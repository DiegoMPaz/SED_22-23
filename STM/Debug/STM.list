
STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009610  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800987c  0800987c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800987c  0800987c  0001987c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009884  08009884  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009888  08009888  00019888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800988c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          0000095c  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a00  20000a00  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002084e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004007  00000000  00000000  00040922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  00044930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  00045f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000062e1  00000000  00000000  00047450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c1c7  00000000  00000000  0004d731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de817  00000000  00000000  000698f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014810f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061fc  00000000  00000000  00148164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a4 	.word	0x200000a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009780 	.word	0x08009780

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a8 	.word	0x200000a8
 80001c4:	08009780 	.word	0x08009780

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96e 	b.w	8000b28 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468c      	mov	ip, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8083 	bne.w	800097a <__udivmoddi4+0x116>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d947      	bls.n	800090a <__udivmoddi4+0xa6>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b142      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 8000880:	f1c2 0020 	rsb	r0, r2, #32
 8000884:	fa24 f000 	lsr.w	r0, r4, r0
 8000888:	4091      	lsls	r1, r2
 800088a:	4097      	lsls	r7, r2
 800088c:	ea40 0c01 	orr.w	ip, r0, r1
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000896:	0c23      	lsrs	r3, r4, #16
 8000898:	fbbc f6f8 	udiv	r6, ip, r8
 800089c:	fa1f fe87 	uxth.w	lr, r7
 80008a0:	fb08 c116 	mls	r1, r8, r6, ip
 80008a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x60>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008b6:	f080 8119 	bcs.w	8000aec <__udivmoddi4+0x288>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 8116 	bls.w	8000aec <__udivmoddi4+0x288>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3310 	mls	r3, r8, r0, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d8:	45a6      	cmp	lr, r4
 80008da:	d909      	bls.n	80008f0 <__udivmoddi4+0x8c>
 80008dc:	193c      	adds	r4, r7, r4
 80008de:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e2:	f080 8105 	bcs.w	8000af0 <__udivmoddi4+0x28c>
 80008e6:	45a6      	cmp	lr, r4
 80008e8:	f240 8102 	bls.w	8000af0 <__udivmoddi4+0x28c>
 80008ec:	3802      	subs	r0, #2
 80008ee:	443c      	add	r4, r7
 80008f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f4:	eba4 040e 	sub.w	r4, r4, lr
 80008f8:	2600      	movs	r6, #0
 80008fa:	b11d      	cbz	r5, 8000904 <__udivmoddi4+0xa0>
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	2300      	movs	r3, #0
 8000900:	e9c5 4300 	strd	r4, r3, [r5]
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	b902      	cbnz	r2, 800090e <__udivmoddi4+0xaa>
 800090c:	deff      	udf	#255	; 0xff
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	2a00      	cmp	r2, #0
 8000914:	d150      	bne.n	80009b8 <__udivmoddi4+0x154>
 8000916:	1bcb      	subs	r3, r1, r7
 8000918:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800091c:	fa1f f887 	uxth.w	r8, r7
 8000920:	2601      	movs	r6, #1
 8000922:	fbb3 fcfe 	udiv	ip, r3, lr
 8000926:	0c21      	lsrs	r1, r4, #16
 8000928:	fb0e 331c 	mls	r3, lr, ip, r3
 800092c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000930:	fb08 f30c 	mul.w	r3, r8, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0xe4>
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0xe2>
 8000940:	428b      	cmp	r3, r1
 8000942:	f200 80e9 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 8000946:	4684      	mov	ip, r0
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	b2a3      	uxth	r3, r4
 800094c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000950:	fb0e 1110 	mls	r1, lr, r0, r1
 8000954:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000958:	fb08 f800 	mul.w	r8, r8, r0
 800095c:	45a0      	cmp	r8, r4
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x10c>
 8000960:	193c      	adds	r4, r7, r4
 8000962:	f100 33ff 	add.w	r3, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x10a>
 8000968:	45a0      	cmp	r8, r4
 800096a:	f200 80d9 	bhi.w	8000b20 <__udivmoddi4+0x2bc>
 800096e:	4618      	mov	r0, r3
 8000970:	eba4 0408 	sub.w	r4, r4, r8
 8000974:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000978:	e7bf      	b.n	80008fa <__udivmoddi4+0x96>
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0x12e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <__udivmoddi4+0x282>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x1cc>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0x140>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80b8 	bhi.w	8000b14 <__udivmoddi4+0x2b0>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0103 	sbc.w	r1, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	468c      	mov	ip, r1
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0a8      	beq.n	8000904 <__udivmoddi4+0xa0>
 80009b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0xa0>
 80009b8:	f1c2 0320 	rsb	r3, r2, #32
 80009bc:	fa20 f603 	lsr.w	r6, r0, r3
 80009c0:	4097      	lsls	r7, r2
 80009c2:	fa01 f002 	lsl.w	r0, r1, r2
 80009c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ca:	40d9      	lsrs	r1, r3
 80009cc:	4330      	orrs	r0, r6
 80009ce:	0c03      	lsrs	r3, r0, #16
 80009d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e0:	fb06 f108 	mul.w	r1, r6, r8
 80009e4:	4299      	cmp	r1, r3
 80009e6:	fa04 f402 	lsl.w	r4, r4, r2
 80009ea:	d909      	bls.n	8000a00 <__udivmoddi4+0x19c>
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f2:	f080 808d 	bcs.w	8000b10 <__udivmoddi4+0x2ac>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 808a 	bls.w	8000b10 <__udivmoddi4+0x2ac>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	443b      	add	r3, r7
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b281      	uxth	r1, r0
 8000a04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a10:	fb00 f308 	mul.w	r3, r0, r8
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x1c4>
 8000a18:	1879      	adds	r1, r7, r1
 8000a1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a1e:	d273      	bcs.n	8000b08 <__udivmoddi4+0x2a4>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d971      	bls.n	8000b08 <__udivmoddi4+0x2a4>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4439      	add	r1, r7
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a2e:	e778      	b.n	8000922 <__udivmoddi4+0xbe>
 8000a30:	f1c6 0c20 	rsb	ip, r6, #32
 8000a34:	fa03 f406 	lsl.w	r4, r3, r6
 8000a38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fa1f f884 	uxth.w	r8, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a62:	fb09 fa08 	mul.w	sl, r9, r8
 8000a66:	458a      	cmp	sl, r1
 8000a68:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x220>
 8000a72:	1861      	adds	r1, r4, r1
 8000a74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a78:	d248      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d946      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a82:	4421      	add	r1, r4
 8000a84:	eba1 010a 	sub.w	r1, r1, sl
 8000a88:	b2bf      	uxth	r7, r7
 8000a8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a96:	fb00 f808 	mul.w	r8, r0, r8
 8000a9a:	45b8      	cmp	r8, r7
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x24a>
 8000a9e:	19e7      	adds	r7, r4, r7
 8000aa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa4:	d22e      	bcs.n	8000b04 <__udivmoddi4+0x2a0>
 8000aa6:	45b8      	cmp	r8, r7
 8000aa8:	d92c      	bls.n	8000b04 <__udivmoddi4+0x2a0>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4427      	add	r7, r4
 8000aae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab2:	eba7 0708 	sub.w	r7, r7, r8
 8000ab6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aba:	454f      	cmp	r7, r9
 8000abc:	46c6      	mov	lr, r8
 8000abe:	4649      	mov	r1, r9
 8000ac0:	d31a      	bcc.n	8000af8 <__udivmoddi4+0x294>
 8000ac2:	d017      	beq.n	8000af4 <__udivmoddi4+0x290>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x27a>
 8000ac6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aca:	eb67 0701 	sbc.w	r7, r7, r1
 8000ace:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad2:	40f2      	lsrs	r2, r6
 8000ad4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad8:	40f7      	lsrs	r7, r6
 8000ada:	e9c5 2700 	strd	r2, r7, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e70b      	b.n	8000904 <__udivmoddi4+0xa0>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e9      	b.n	80008c4 <__udivmoddi4+0x60>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6fd      	b.n	80008f0 <__udivmoddi4+0x8c>
 8000af4:	4543      	cmp	r3, r8
 8000af6:	d2e5      	bcs.n	8000ac4 <__udivmoddi4+0x260>
 8000af8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000afc:	eb69 0104 	sbc.w	r1, r9, r4
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7df      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b04:	4608      	mov	r0, r1
 8000b06:	e7d2      	b.n	8000aae <__udivmoddi4+0x24a>
 8000b08:	4660      	mov	r0, ip
 8000b0a:	e78d      	b.n	8000a28 <__udivmoddi4+0x1c4>
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	e7b9      	b.n	8000a84 <__udivmoddi4+0x220>
 8000b10:	4666      	mov	r6, ip
 8000b12:	e775      	b.n	8000a00 <__udivmoddi4+0x19c>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e74a      	b.n	80009ae <__udivmoddi4+0x14a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	4439      	add	r1, r7
 8000b1e:	e713      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b20:	3802      	subs	r0, #2
 8000b22:	443c      	add	r4, r7
 8000b24:	e724      	b.n	8000970 <__udivmoddi4+0x10c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f023 030f 	bic.w	r3, r3, #15
 8000b3c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	f043 030c 	orr.w	r3, r3, #12
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
 8000b5a:	f043 030c 	orr.w	r3, r3, #12
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b6c:	f107 0208 	add.w	r2, r7, #8
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2304      	movs	r3, #4
 8000b76:	214e      	movs	r1, #78	; 0x4e
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <lcd_send_cmd+0x5c>)
 8000b7a:	f004 f9cf 	bl	8004f1c <HAL_I2C_Master_Transmit>
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000198 	.word	0x20000198

08000b8c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f023 030f 	bic.w	r3, r3, #15
 8000b9c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	f043 030d 	orr.w	r3, r3, #13
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	f043 0309 	orr.w	r3, r3, #9
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000bb8:	7bbb      	ldrb	r3, [r7, #14]
 8000bba:	f043 030d 	orr.w	r3, r3, #13
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	f043 0309 	orr.w	r3, r3, #9
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bcc:	f107 0208 	add.w	r2, r7, #8
 8000bd0:	2364      	movs	r3, #100	; 0x64
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	214e      	movs	r1, #78	; 0x4e
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <lcd_send_data+0x5c>)
 8000bda:	f004 f99f 	bl	8004f1c <HAL_I2C_Master_Transmit>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000198 	.word	0x20000198

08000bec <lcd_clear>:

void lcd_clear (void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	f7ff ff9a 	bl	8000b2c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	e005      	b.n	8000c0a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000bfe:	2020      	movs	r0, #32
 8000c00:	f7ff ffc4 	bl	8000b8c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b45      	cmp	r3, #69	; 0x45
 8000c0e:	ddf6      	ble.n	8000bfe <lcd_clear+0x12>
	}
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <lcd_put_cur+0x18>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d005      	beq.n	8000c3c <lcd_put_cur+0x22>
 8000c30:	e009      	b.n	8000c46 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	603b      	str	r3, [r7, #0]
            break;
 8000c3a:	e004      	b.n	8000c46 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c42:	603b      	str	r3, [r7, #0]
            break;
 8000c44:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff6e 	bl	8000b2c <lcd_send_cmd>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <lcd_init>:


void lcd_init (void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c5c:	2032      	movs	r0, #50	; 0x32
 8000c5e:	f001 fbc3 	bl	80023e8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c62:	2030      	movs	r0, #48	; 0x30
 8000c64:	f7ff ff62 	bl	8000b2c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c68:	2005      	movs	r0, #5
 8000c6a:	f001 fbbd 	bl	80023e8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c6e:	2030      	movs	r0, #48	; 0x30
 8000c70:	f7ff ff5c 	bl	8000b2c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c74:	2001      	movs	r0, #1
 8000c76:	f001 fbb7 	bl	80023e8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c7a:	2030      	movs	r0, #48	; 0x30
 8000c7c:	f7ff ff56 	bl	8000b2c <lcd_send_cmd>
	HAL_Delay(10);
 8000c80:	200a      	movs	r0, #10
 8000c82:	f001 fbb1 	bl	80023e8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000c86:	2020      	movs	r0, #32
 8000c88:	f7ff ff50 	bl	8000b2c <lcd_send_cmd>
	HAL_Delay(10);
 8000c8c:	200a      	movs	r0, #10
 8000c8e:	f001 fbab 	bl	80023e8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c92:	2028      	movs	r0, #40	; 0x28
 8000c94:	f7ff ff4a 	bl	8000b2c <lcd_send_cmd>
	HAL_Delay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f001 fba5 	bl	80023e8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000c9e:	2008      	movs	r0, #8
 8000ca0:	f7ff ff44 	bl	8000b2c <lcd_send_cmd>
	HAL_Delay(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f001 fb9f 	bl	80023e8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ff3e 	bl	8000b2c <lcd_send_cmd>
	HAL_Delay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f001 fb99 	bl	80023e8 <HAL_Delay>
	HAL_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f001 fb96 	bl	80023e8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cbc:	2006      	movs	r0, #6
 8000cbe:	f7ff ff35 	bl	8000b2c <lcd_send_cmd>
	HAL_Delay(1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f001 fb90 	bl	80023e8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000cc8:	200c      	movs	r0, #12
 8000cca:	f7ff ff2f 	bl	8000b2c <lcd_send_cmd>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000cda:	e006      	b.n	8000cea <lcd_send_string+0x18>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff51 	bl	8000b8c <lcd_send_data>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f4      	bne.n	8000cdc <lcd_send_string+0xa>
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_GPIO_EXTI_Callback>:



// Indicador de interrupcion

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
	ctime = HAL_GetTick();
 8000d06:	f001 fb63 	bl	80023d0 <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x44>)
 8000d0e:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin==GPIO_PIN_0 ) interrupt = 1;
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d103      	bne.n	8000d1e <HAL_GPIO_EXTI_Callback+0x22>
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x48>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
	else if (GPIO_Pin==GPIO_PIN_3 ) interrupt = 2;
	else if (GPIO_Pin==GPIO_PIN_4 ) interrupt = 3;
}
 8000d1c:	e00c      	b.n	8000d38 <HAL_GPIO_EXTI_Callback+0x3c>
	else if (GPIO_Pin==GPIO_PIN_3 ) interrupt = 2;
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d103      	bne.n	8000d2c <HAL_GPIO_EXTI_Callback+0x30>
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x48>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	601a      	str	r2, [r3, #0]
}
 8000d2a:	e005      	b.n	8000d38 <HAL_GPIO_EXTI_Callback+0x3c>
	else if (GPIO_Pin==GPIO_PIN_4 ) interrupt = 3;
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	2b10      	cmp	r3, #16
 8000d30:	d102      	bne.n	8000d38 <HAL_GPIO_EXTI_Callback+0x3c>
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x48>)
 8000d34:	2203      	movs	r2, #3
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000cc 	.word	0x200000cc
 8000d44:	200000c4 	.word	0x200000c4

08000d48 <debouncer>:


// Debouncer

int debouncer(volatile int* interrupt, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	4613      	mov	r3, r2
 8000d54:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*interrupt != 0){
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d038      	beq.n	8000dd0 <debouncer+0x88>
		if (button_count == 0) {
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <debouncer+0x94>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10b      	bne.n	8000d7e <debouncer+0x36>
			counter=HAL_GetTick();
 8000d66:	f001 fb33 	bl	80023d0 <HAL_GetTick>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <debouncer+0x98>)
 8000d70:	601a      	str	r2, [r3, #0]
			button_count++;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <debouncer+0x94>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <debouncer+0x94>)
 8000d7c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=10){
 8000d7e:	f001 fb27 	bl	80023d0 <HAL_GetTick>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <debouncer+0x98>)
 8000d86:	6812      	ldr	r2, [r2, #0]
 8000d88:	1a9b      	subs	r3, r3, r2
 8000d8a:	2b09      	cmp	r3, #9
 8000d8c:	d920      	bls.n	8000dd0 <debouncer+0x88>
			counter=HAL_GetTick();
 8000d8e:	f001 fb1f 	bl	80023d0 <HAL_GetTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <debouncer+0x98>)
 8000d98:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1){
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	68b8      	ldr	r0, [r7, #8]
 8000da0:	f002 f9c0 	bl	8003124 <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d003      	beq.n	8000db2 <debouncer+0x6a>
				button_count=1;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <debouncer+0x94>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	e005      	b.n	8000dbe <debouncer+0x76>
			}
			else{
				button_count++;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <debouncer+0x94>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <debouncer+0x94>)
 8000dbc:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 3){ //Periodo antirebotes
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <debouncer+0x94>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d104      	bne.n	8000dd0 <debouncer+0x88>
				button_count = 0;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <debouncer+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
				return 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <debouncer+0x8a>
			}
		}
	}
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000e4 	.word	0x200000e4
 8000de0:	200000e8 	.word	0x200000e8

08000de4 <HAL_TIM_IC_CaptureCallback>:


// Funcion de interrupcion del ultrasonidos

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel 1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7f1b      	ldrb	r3, [r3, #28]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d15c      	bne.n	8000eae <HAL_TIM_IC_CaptureCallback+0xca>
		{
		if (Vs == 0){ // if the first value is not captured
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d11a      	bne.n	8000e32 <HAL_TIM_IC_CaptureCallback+0x4e>

			echo1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f005 fd4e 	bl	80068a0 <HAL_TIM_ReadCapturedValue>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e08:	6013      	str	r3, [r2, #0]
			Vs = 1;  // set the first captured as true
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6a1a      	ldr	r2, [r3, #32]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 020a 	bic.w	r2, r2, #10
 8000e1e:	621a      	str	r2, [r3, #32]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6a1a      	ldr	r2, [r3, #32]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0202 	orr.w	r2, r2, #2
 8000e2e:	621a      	str	r2, [r3, #32]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8000e30:	e03d      	b.n	8000eae <HAL_TIM_IC_CaptureCallback+0xca>
		else if (Vs == 1){   // if the first is already captured
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d139      	bne.n	8000eae <HAL_TIM_IC_CaptureCallback+0xca>
			echo2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f005 fd2f 	bl	80068a0 <HAL_TIM_ReadCapturedValue>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e46:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
			if (echo2 > echo1){
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d907      	bls.n	8000e6c <HAL_TIM_IC_CaptureCallback+0x88>
				period = echo2 - echo1;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e00f      	b.n	8000e8c <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (echo1 > echo2){
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d909      	bls.n	8000e8c <HAL_TIM_IC_CaptureCallback+0xa8>
				period = (0xffff - echo1) + echo2;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e86:	33ff      	adds	r3, #255	; 0xff
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e8a:	6013      	str	r3, [r2, #0]
			Vs = 0; // set it back to false
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6a1a      	ldr	r2, [r3, #32]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 020a 	bic.w	r2, r2, #10
 8000ea0:	621a      	str	r2, [r3, #32]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a12      	ldr	r2, [r2, #32]
 8000eac:	621a      	str	r2, [r3, #32]
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000e0 	.word	0x200000e0
 8000ebc:	20000148 	.word	0x20000148
 8000ec0:	20000304 	.word	0x20000304
 8000ec4:	200000dc 	.word	0x200000dc

08000ec8 <HAL_TIM_PeriodElapsedCallback>:


	// Refresh de la pantalla y callback para vaciado

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) refresh = 1;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d102      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
	if (htim == &htim4){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d113      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x46>
		vaciado++;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000eee:	6013      	str	r3, [r2, #0]
		if (vaciado == t_vaciado){
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d108      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_TIM_Base_Stop_IT(&htim4);
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000efe:	f005 f8bd 	bl	800607c <HAL_TIM_Base_Stop_IT>
			vaciado = 0;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
			cState = 0;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200001f4 	.word	0x200001f4
 8000f1c:	200000c8 	.word	0x200000c8
 8000f20:	20000150 	.word	0x20000150
 8000f24:	200000c0 	.word	0x200000c0
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f001 f9e5 	bl	8002304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 fb57 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fda9 	bl	8001a94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f42:	f000 fc0d 	bl	8001760 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f46:	f000 fc39 	bl	80017bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f4a:	f008 f811 	bl	8008f70 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000f4e:	f000 fbb5 	bl	80016bc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f52:	f000 fc69 	bl	8001828 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f56:	f000 fcd7 	bl	8001908 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f5a:	f000 fd47 	bl	80019ec <MX_TIM4_Init>


  // EL microcontrolador resetea el pull a NOPULL cuando se reinicia el proyecto
  // Aquí se fuerza el modo PULLDOWN de los pines de interrupcion, ya que si entran en Z
  // a veces generan conflicto en las variables que modifican
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000f6c:	2319      	movs	r3, #25
 8000f6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f76:	2302      	movs	r3, #2
 8000f78:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4896      	ldr	r0, [pc, #600]	; (80011d8 <main+0x2a8>)
 8000f80:	f001 ff34 	bl	8002dec <HAL_GPIO_Init>


  lcd_init();
 8000f84:	f7ff fe68 	bl	8000c58 <lcd_init>
  lcd_put_cur(0,0);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff fe45 	bl	8000c1a <lcd_put_cur>
  lcd_send_string("Test");
 8000f90:	4892      	ldr	r0, [pc, #584]	; (80011dc <main+0x2ac>)
 8000f92:	f7ff fe9e 	bl	8000cd2 <lcd_send_string>
  lcd_clear();
 8000f96:	f7ff fe29 	bl	8000bec <lcd_clear>
  HAL_ADC_Start(&hadc1);
 8000f9a:	4891      	ldr	r0, [pc, #580]	; (80011e0 <main+0x2b0>)
 8000f9c:	f001 fa8c 	bl	80024b8 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000fa0:	4890      	ldr	r0, [pc, #576]	; (80011e4 <main+0x2b4>)
 8000fa2:	f004 fffb 	bl	8005f9c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000fa6:	488e      	ldr	r0, [pc, #568]	; (80011e0 <main+0x2b0>)
 8000fa8:	f001 fa86 	bl	80024b8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8000fac:	2101      	movs	r1, #1
 8000fae:	488c      	ldr	r0, [pc, #560]	; (80011e0 <main+0x2b0>)
 8000fb0:	f001 fb54 	bl	800265c <HAL_ADC_PollForConversion>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Lectura y ajuste del LDR
      HAL_ADC_Start(&hadc1);
 8000fb4:	488a      	ldr	r0, [pc, #552]	; (80011e0 <main+0x2b0>)
 8000fb6:	f001 fa7f 	bl	80024b8 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4888      	ldr	r0, [pc, #544]	; (80011e0 <main+0x2b0>)
 8000fbe:	f001 fb4d 	bl	800265c <HAL_ADC_PollForConversion>
      Lumen = HAL_ADC_GetValue(&hadc1);
 8000fc2:	4887      	ldr	r0, [pc, #540]	; (80011e0 <main+0x2b0>)
 8000fc4:	f001 fbd5 	bl	8002772 <HAL_ADC_GetValue>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b86      	ldr	r3, [pc, #536]	; (80011e8 <main+0x2b8>)
 8000fce:	801a      	strh	r2, [r3, #0]
      if (Lumen > Lmax) Lmax = Lumen;
 8000fd0:	4b85      	ldr	r3, [pc, #532]	; (80011e8 <main+0x2b8>)
 8000fd2:	881a      	ldrh	r2, [r3, #0]
 8000fd4:	4b85      	ldr	r3, [pc, #532]	; (80011ec <main+0x2bc>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d903      	bls.n	8000fe4 <main+0xb4>
 8000fdc:	4b82      	ldr	r3, [pc, #520]	; (80011e8 <main+0x2b8>)
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	4b82      	ldr	r3, [pc, #520]	; (80011ec <main+0x2bc>)
 8000fe2:	801a      	strh	r2, [r3, #0]
      if (Lumen < Lmin && Lumen > 3000) Lmin = Lumen;
 8000fe4:	4b80      	ldr	r3, [pc, #512]	; (80011e8 <main+0x2b8>)
 8000fe6:	881a      	ldrh	r2, [r3, #0]
 8000fe8:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <main+0x2c0>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d20a      	bcs.n	8001006 <main+0xd6>
 8000ff0:	4b7d      	ldr	r3, [pc, #500]	; (80011e8 <main+0x2b8>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d904      	bls.n	8001006 <main+0xd6>
 8000ffc:	4b7a      	ldr	r3, [pc, #488]	; (80011e8 <main+0x2b8>)
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	4b7b      	ldr	r3, [pc, #492]	; (80011f0 <main+0x2c0>)
 8001002:	801a      	strh	r2, [r3, #0]
 8001004:	e009      	b.n	800101a <main+0xea>
      else if (Lumen < 3000) Lumen = 3050;
 8001006:	4b78      	ldr	r3, [pc, #480]	; (80011e8 <main+0x2b8>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800100e:	4293      	cmp	r3, r2
 8001010:	d803      	bhi.n	800101a <main+0xea>
 8001012:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <main+0x2b8>)
 8001014:	f640 32ea 	movw	r2, #3050	; 0xbea
 8001018:	801a      	strh	r2, [r3, #0]



	  // Lectura del ultrasonidos

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 1);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001020:	486d      	ldr	r0, [pc, #436]	; (80011d8 <main+0x2a8>)
 8001022:	f002 f897 	bl	8003154 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8001026:	200a      	movs	r0, #10
 8001028:	f001 f9de 	bl	80023e8 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001032:	4869      	ldr	r0, [pc, #420]	; (80011d8 <main+0x2a8>)
 8001034:	f002 f88e 	bl	8003154 <HAL_GPIO_WritePin>

      HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001038:	2100      	movs	r1, #0
 800103a:	486e      	ldr	r0, [pc, #440]	; (80011f4 <main+0x2c4>)
 800103c:	f005 f89c 	bl	8006178 <HAL_TIM_IC_Start_IT>

      dist = period/58;
 8001040:	4b6d      	ldr	r3, [pc, #436]	; (80011f8 <main+0x2c8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a6d      	ldr	r2, [pc, #436]	; (80011fc <main+0x2cc>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001054:	4b6a      	ldr	r3, [pc, #424]	; (8001200 <main+0x2d0>)
 8001056:	edc3 7a00 	vstr	s15, [r3]

	  switch (cd){
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <main+0x2d4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d016      	beq.n	8001090 <main+0x160>
 8001062:	2b03      	cmp	r3, #3
 8001064:	dc1c      	bgt.n	80010a0 <main+0x170>
 8001066:	2b01      	cmp	r3, #1
 8001068:	d002      	beq.n	8001070 <main+0x140>
 800106a:	2b02      	cmp	r3, #2
 800106c:	d008      	beq.n	8001080 <main+0x150>
 800106e:	e017      	b.n	80010a0 <main+0x170>
	  	  case 1:
	  		  d1 = dist;
 8001070:	4b63      	ldr	r3, [pc, #396]	; (8001200 <main+0x2d0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a64      	ldr	r2, [pc, #400]	; (8001208 <main+0x2d8>)
 8001076:	6013      	str	r3, [r2, #0]
	  		  cd = 2;
 8001078:	4b62      	ldr	r3, [pc, #392]	; (8001204 <main+0x2d4>)
 800107a:	2202      	movs	r2, #2
 800107c:	601a      	str	r2, [r3, #0]
	  		  break;
 800107e:	e00f      	b.n	80010a0 <main+0x170>
	  	  case 2:
	  		  d2 = dist;
 8001080:	4b5f      	ldr	r3, [pc, #380]	; (8001200 <main+0x2d0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a61      	ldr	r2, [pc, #388]	; (800120c <main+0x2dc>)
 8001086:	6013      	str	r3, [r2, #0]
	  		  cd = 3;
 8001088:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <main+0x2d4>)
 800108a:	2203      	movs	r2, #3
 800108c:	601a      	str	r2, [r3, #0]
	  		  break;
 800108e:	e007      	b.n	80010a0 <main+0x170>
	  	  case 3:
	  		  d3 = dist;
 8001090:	4b5b      	ldr	r3, [pc, #364]	; (8001200 <main+0x2d0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a5e      	ldr	r2, [pc, #376]	; (8001210 <main+0x2e0>)
 8001096:	6013      	str	r3, [r2, #0]
	  		  cd = 1;
 8001098:	4b5a      	ldr	r3, [pc, #360]	; (8001204 <main+0x2d4>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
	  		  break;
 800109e:	bf00      	nop
	  }
	  dmed = (d1 + d2 + d3)/3;
 80010a0:	4b59      	ldr	r3, [pc, #356]	; (8001208 <main+0x2d8>)
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	4b59      	ldr	r3, [pc, #356]	; (800120c <main+0x2dc>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b0:	4b57      	ldr	r3, [pc, #348]	; (8001210 <main+0x2e0>)
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ba:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80010be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c2:	4b54      	ldr	r3, [pc, #336]	; (8001214 <main+0x2e4>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
	  if (dmed > 100) cState = 5;
 80010c8:	4b52      	ldr	r3, [pc, #328]	; (8001214 <main+0x2e4>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001218 <main+0x2e8>
 80010d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	dd02      	ble.n	80010e2 <main+0x1b2>
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <main+0x2ec>)
 80010de:	2205      	movs	r2, #5
 80010e0:	601a      	str	r2, [r3, #0]
	  Volume = dmed * 3.1415 * 1; //Altura del liquido * pi * radio(1)
 80010e2:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <main+0x2e4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fafc 	bl	80006e4 <__aeabi_f2d>
 80010ec:	a338      	add	r3, pc, #224	; (adr r3, 80011d0 <main+0x2a0>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f869 	bl	80001c8 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fb49 	bl	8000794 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	4a46      	ldr	r2, [pc, #280]	; (8001220 <main+0x2f0>)
 8001106:	6013      	str	r3, [r2, #0]
*/


	  // Control de los estados

	  if (interrupt == 1){
 8001108:	4b46      	ldr	r3, [pc, #280]	; (8001224 <main+0x2f4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d119      	bne.n	8001144 <main+0x214>
		  if(debouncer(&interrupt, GPIOA, GPIO_PIN_0)){
 8001110:	2201      	movs	r2, #1
 8001112:	4931      	ldr	r1, [pc, #196]	; (80011d8 <main+0x2a8>)
 8001114:	4843      	ldr	r0, [pc, #268]	; (8001224 <main+0x2f4>)
 8001116:	f7ff fe17 	bl	8000d48 <debouncer>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d011      	beq.n	8001144 <main+0x214>
			  if (cState == 0){					// Inicio -> Temp
 8001120:	4b3e      	ldr	r3, [pc, #248]	; (800121c <main+0x2ec>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10d      	bne.n	8001144 <main+0x214>
			  	  		pState = cState;
 8001128:	4b3c      	ldr	r3, [pc, #240]	; (800121c <main+0x2ec>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <main+0x2f8>)
 800112e:	6013      	str	r3, [r2, #0]
			  	  		cState = 1;
 8001130:	4b3a      	ldr	r3, [pc, #232]	; (800121c <main+0x2ec>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
			  	  		ptime = ctime;
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <main+0x2fc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <main+0x300>)
 800113c:	6013      	str	r3, [r2, #0]
			  	  		interrupt = 0;
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <main+0x2f4>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
		  	  }
		  }
	  }

	  if (interrupt == 2){
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <main+0x2f4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b02      	cmp	r3, #2
 800114a:	f040 8085 	bne.w	8001258 <main+0x328>
		  if(debouncer(&interrupt, GPIOA, GPIO_PIN_3)){
 800114e:	2208      	movs	r2, #8
 8001150:	4921      	ldr	r1, [pc, #132]	; (80011d8 <main+0x2a8>)
 8001152:	4834      	ldr	r0, [pc, #208]	; (8001224 <main+0x2f4>)
 8001154:	f7ff fdf8 	bl	8000d48 <debouncer>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d07c      	beq.n	8001258 <main+0x328>
			   if(cState == 1){					// Temp -> Humedad
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <main+0x2ec>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d10e      	bne.n	8001184 <main+0x254>
			  	  	pState = cState;
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <main+0x2ec>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <main+0x2f8>)
 800116c:	6013      	str	r3, [r2, #0]
			  	  	cState = 2;
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <main+0x2ec>)
 8001170:	2202      	movs	r2, #2
 8001172:	601a      	str	r2, [r3, #0]
			  	  	ptime = ctime;
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <main+0x2fc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <main+0x300>)
 800117a:	6013      	str	r3, [r2, #0]
			  	  	interrupt = 0;
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <main+0x2f4>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e069      	b.n	8001258 <main+0x328>
			   }
			   else if (cState == 2){			// Humedad -> Volumen
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <main+0x2ec>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d10e      	bne.n	80011aa <main+0x27a>
			  	  	pState = cState;
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <main+0x2ec>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a25      	ldr	r2, [pc, #148]	; (8001228 <main+0x2f8>)
 8001192:	6013      	str	r3, [r2, #0]
			  	  	cState = 3;
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <main+0x2ec>)
 8001196:	2203      	movs	r2, #3
 8001198:	601a      	str	r2, [r3, #0]
			  	  	ptime = ctime;
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <main+0x2fc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <main+0x300>)
 80011a0:	6013      	str	r3, [r2, #0]
			  	  	interrupt = 0;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <main+0x2f4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e056      	b.n	8001258 <main+0x328>
			   }
			   else if(cState == 3){			// Volumen -> Lumin
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <main+0x2ec>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d140      	bne.n	8001234 <main+0x304>
			  	  	pState = cState;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <main+0x2ec>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <main+0x2f8>)
 80011b8:	6013      	str	r3, [r2, #0]
			  	  	cState = 4;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <main+0x2ec>)
 80011bc:	2204      	movs	r2, #4
 80011be:	601a      	str	r2, [r3, #0]
			  	  	ptime = ctime;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <main+0x2fc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <main+0x300>)
 80011c6:	6013      	str	r3, [r2, #0]
			  	  	interrupt = 0;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <main+0x2f4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e043      	b.n	8001258 <main+0x328>
 80011d0:	c083126f 	.word	0xc083126f
 80011d4:	400921ca 	.word	0x400921ca
 80011d8:	40020000 	.word	0x40020000
 80011dc:	08009798 	.word	0x08009798
 80011e0:	20000250 	.word	0x20000250
 80011e4:	200001f4 	.word	0x200001f4
 80011e8:	200001f2 	.word	0x200001f2
 80011ec:	2000000e 	.word	0x2000000e
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	200000fc 	.word	0x200000fc
 80011f8:	200000dc 	.word	0x200000dc
 80011fc:	8d3dcb09 	.word	0x8d3dcb09
 8001200:	2000023c 	.word	0x2000023c
 8001204:	20000010 	.word	0x20000010
 8001208:	200001ec 	.word	0x200001ec
 800120c:	2000029c 	.word	0x2000029c
 8001210:	2000030c 	.word	0x2000030c
 8001214:	200002a0 	.word	0x200002a0
 8001218:	42c80000 	.word	0x42c80000
 800121c:	20000004 	.word	0x20000004
 8001220:	200002a4 	.word	0x200002a4
 8001224:	200000c4 	.word	0x200000c4
 8001228:	20000000 	.word	0x20000000
 800122c:	200000cc 	.word	0x200000cc
 8001230:	200000d0 	.word	0x200000d0
			   }
			   else if(cState == 4 ){			// Lumin -> Temp
 8001234:	4ba7      	ldr	r3, [pc, #668]	; (80014d4 <main+0x5a4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b04      	cmp	r3, #4
 800123a:	d10d      	bne.n	8001258 <main+0x328>
			  	  	pState = cState;
 800123c:	4ba5      	ldr	r3, [pc, #660]	; (80014d4 <main+0x5a4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4aa5      	ldr	r2, [pc, #660]	; (80014d8 <main+0x5a8>)
 8001242:	6013      	str	r3, [r2, #0]
			  	  	cState =1;
 8001244:	4ba3      	ldr	r3, [pc, #652]	; (80014d4 <main+0x5a4>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]
			  	  	ptime = ctime;
 800124a:	4ba4      	ldr	r3, [pc, #656]	; (80014dc <main+0x5ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4aa4      	ldr	r2, [pc, #656]	; (80014e0 <main+0x5b0>)
 8001250:	6013      	str	r3, [r2, #0]
			  	  	interrupt = 0;
 8001252:	4ba4      	ldr	r3, [pc, #656]	; (80014e4 <main+0x5b4>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
			   }
		  }
	  }
	  if (interrupt == 3){
 8001258:	4ba2      	ldr	r3, [pc, #648]	; (80014e4 <main+0x5b4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d12f      	bne.n	80012c0 <main+0x390>
		   if(debouncer(&interrupt, GPIOA, GPIO_PIN_4)){
 8001260:	2210      	movs	r2, #16
 8001262:	49a1      	ldr	r1, [pc, #644]	; (80014e8 <main+0x5b8>)
 8001264:	489f      	ldr	r0, [pc, #636]	; (80014e4 <main+0x5b4>)
 8001266:	f7ff fd6f 	bl	8000d48 <debouncer>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d027      	beq.n	80012c0 <main+0x390>

			  	  if (cState == 5){				// Alerta -> Vaciado
 8001270:	4b98      	ldr	r3, [pc, #608]	; (80014d4 <main+0x5a4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d111      	bne.n	800129c <main+0x36c>
			  	  		pState = cState;
 8001278:	4b96      	ldr	r3, [pc, #600]	; (80014d4 <main+0x5a4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a96      	ldr	r2, [pc, #600]	; (80014d8 <main+0x5a8>)
 800127e:	6013      	str	r3, [r2, #0]
			  	  		cState = 6;
 8001280:	4b94      	ldr	r3, [pc, #592]	; (80014d4 <main+0x5a4>)
 8001282:	2206      	movs	r2, #6
 8001284:	601a      	str	r2, [r3, #0]
			  	  		ptime = ctime;
 8001286:	4b95      	ldr	r3, [pc, #596]	; (80014dc <main+0x5ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a95      	ldr	r2, [pc, #596]	; (80014e0 <main+0x5b0>)
 800128c:	6013      	str	r3, [r2, #0]
  	  					interrupt = 0;
 800128e:	4b95      	ldr	r3, [pc, #596]	; (80014e4 <main+0x5b4>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
			  	  		HAL_TIM_Base_Start_IT(&htim4);
 8001294:	4895      	ldr	r0, [pc, #596]	; (80014ec <main+0x5bc>)
 8001296:	f004 fe81 	bl	8005f9c <HAL_TIM_Base_Start_IT>
 800129a:	e011      	b.n	80012c0 <main+0x390>
		  		  	  }
			  	  else if (cState != 6){		// Vaciado -> Inicio
 800129c:	4b8d      	ldr	r3, [pc, #564]	; (80014d4 <main+0x5a4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b06      	cmp	r3, #6
 80012a2:	d00d      	beq.n	80012c0 <main+0x390>
			  		  	pState = cState;
 80012a4:	4b8b      	ldr	r3, [pc, #556]	; (80014d4 <main+0x5a4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a8b      	ldr	r2, [pc, #556]	; (80014d8 <main+0x5a8>)
 80012aa:	6013      	str	r3, [r2, #0]
			  		    cState = 5;
 80012ac:	4b89      	ldr	r3, [pc, #548]	; (80014d4 <main+0x5a4>)
 80012ae:	2205      	movs	r2, #5
 80012b0:	601a      	str	r2, [r3, #0]
			  			ptime = ctime;
 80012b2:	4b8a      	ldr	r3, [pc, #552]	; (80014dc <main+0x5ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a8a      	ldr	r2, [pc, #552]	; (80014e0 <main+0x5b0>)
 80012b8:	6013      	str	r3, [r2, #0]
			  			interrupt = 0;
 80012ba:	4b8a      	ldr	r3, [pc, #552]	; (80014e4 <main+0x5b4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
	  }



	  // Salida por pantalla
	  if (HAL_GetTick() - ctime > 500) refresh = 1;
 80012c0:	f001 f886 	bl	80023d0 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b85      	ldr	r3, [pc, #532]	; (80014dc <main+0x5ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012d0:	d902      	bls.n	80012d8 <main+0x3a8>
 80012d2:	4b87      	ldr	r3, [pc, #540]	; (80014f0 <main+0x5c0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

	  if (pState != cState || refresh != 0){
 80012d8:	4b7f      	ldr	r3, [pc, #508]	; (80014d8 <main+0x5a8>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b7d      	ldr	r3, [pc, #500]	; (80014d4 <main+0x5a4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d104      	bne.n	80012ee <main+0x3be>
 80012e4:	4b82      	ldr	r3, [pc, #520]	; (80014f0 <main+0x5c0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8150 	beq.w	800158e <main+0x65e>
		  if (pState != cState){
 80012ee:	4b7a      	ldr	r3, [pc, #488]	; (80014d8 <main+0x5a8>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b78      	ldr	r3, [pc, #480]	; (80014d4 <main+0x5a4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d005      	beq.n	8001306 <main+0x3d6>
			  lcd_clear();
 80012fa:	f7ff fc77 	bl	8000bec <lcd_clear>
			  pState = cState;
 80012fe:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <main+0x5a4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a75      	ldr	r2, [pc, #468]	; (80014d8 <main+0x5a8>)
 8001304:	6013      	str	r3, [r2, #0]
		  }
		  if (cState == 5 || cState == 6) HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8001306:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <main+0x5a4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b05      	cmp	r3, #5
 800130c:	d003      	beq.n	8001316 <main+0x3e6>
 800130e:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <main+0x5a4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b06      	cmp	r3, #6
 8001314:	d103      	bne.n	800131e <main+0x3ee>
 8001316:	2104      	movs	r1, #4
 8001318:	4876      	ldr	r0, [pc, #472]	; (80014f4 <main+0x5c4>)
 800131a:	f001 ff34 	bl	8003186 <HAL_GPIO_TogglePin>

		  refresh = 0;
 800131e:	4b74      	ldr	r3, [pc, #464]	; (80014f0 <main+0x5c0>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
		  ctime = HAL_GetTick();
 8001324:	f001 f854 	bl	80023d0 <HAL_GetTick>
 8001328:	4603      	mov	r3, r0
 800132a:	4a6c      	ldr	r2, [pc, #432]	; (80014dc <main+0x5ac>)
 800132c:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800132e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001332:	4871      	ldr	r0, [pc, #452]	; (80014f8 <main+0x5c8>)
 8001334:	f001 ff27 	bl	8003186 <HAL_GPIO_TogglePin>

		  if (cState == 0){
 8001338:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <main+0x5a4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d113      	bne.n	8001368 <main+0x438>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2104      	movs	r1, #4
 8001344:	486b      	ldr	r0, [pc, #428]	; (80014f4 <main+0x5c4>)
 8001346:	f001 ff05 	bl	8003154 <HAL_GPIO_WritePin>
			  lcd_put_cur(0,0);
 800134a:	2100      	movs	r1, #0
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fc64 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("Planta sin");
 8001352:	486a      	ldr	r0, [pc, #424]	; (80014fc <main+0x5cc>)
 8001354:	f7ff fcbd 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001358:	2100      	movs	r1, #0
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff fc5d 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("inicializar");
 8001360:	4867      	ldr	r0, [pc, #412]	; (8001500 <main+0x5d0>)
 8001362:	f7ff fcb6 	bl	8000cd2 <lcd_send_string>
 8001366:	e112      	b.n	800158e <main+0x65e>
		  }
		  else if (cState == 1){
 8001368:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <main+0x5a4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d123      	bne.n	80013b8 <main+0x488>
			  lcd_put_cur(0,0);
 8001370:	2100      	movs	r1, #0
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fc51 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("Temperatura:");
 8001378:	4862      	ldr	r0, [pc, #392]	; (8001504 <main+0x5d4>)
 800137a:	f7ff fcaa 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 800137e:	2100      	movs	r1, #0
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fc4a 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("            ");
 8001386:	4860      	ldr	r0, [pc, #384]	; (8001508 <main+0x5d8>)
 8001388:	f7ff fca3 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 800138c:	2100      	movs	r1, #0
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fc43 	bl	8000c1a <lcd_put_cur>
			  itoa(Temp, pantalla, 10);
 8001394:	4b5d      	ldr	r3, [pc, #372]	; (800150c <main+0x5dc>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139e:	220a      	movs	r2, #10
 80013a0:	495b      	ldr	r1, [pc, #364]	; (8001510 <main+0x5e0>)
 80013a2:	ee17 0a90 	vmov	r0, s15
 80013a6:	f008 f8c7 	bl	8009538 <itoa>
			  lcd_send_string(pantalla);
 80013aa:	4859      	ldr	r0, [pc, #356]	; (8001510 <main+0x5e0>)
 80013ac:	f7ff fc91 	bl	8000cd2 <lcd_send_string>
			  lcd_send_string(" C");
 80013b0:	4858      	ldr	r0, [pc, #352]	; (8001514 <main+0x5e4>)
 80013b2:	f7ff fc8e 	bl	8000cd2 <lcd_send_string>
 80013b6:	e0ea      	b.n	800158e <main+0x65e>
		  }
		  else if (cState == 2){
 80013b8:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <main+0x5a4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <main+0x4d8>
			  lcd_put_cur(0,0);
 80013c0:	2100      	movs	r1, #0
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fc29 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("Humedad:");
 80013c8:	4853      	ldr	r0, [pc, #332]	; (8001518 <main+0x5e8>)
 80013ca:	f7ff fc82 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff fc22 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("            ");
 80013d6:	484c      	ldr	r0, [pc, #304]	; (8001508 <main+0x5d8>)
 80013d8:	f7ff fc7b 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 80013dc:	2100      	movs	r1, #0
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fc1b 	bl	8000c1a <lcd_put_cur>
			  itoa(RH, pantalla, 10);
 80013e4:	4b4d      	ldr	r3, [pc, #308]	; (800151c <main+0x5ec>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ee:	220a      	movs	r2, #10
 80013f0:	4947      	ldr	r1, [pc, #284]	; (8001510 <main+0x5e0>)
 80013f2:	ee17 0a90 	vmov	r0, s15
 80013f6:	f008 f89f 	bl	8009538 <itoa>
			  lcd_send_string(pantalla);
 80013fa:	4845      	ldr	r0, [pc, #276]	; (8001510 <main+0x5e0>)
 80013fc:	f7ff fc69 	bl	8000cd2 <lcd_send_string>
			  lcd_send_string(" %");
 8001400:	4847      	ldr	r0, [pc, #284]	; (8001520 <main+0x5f0>)
 8001402:	f7ff fc66 	bl	8000cd2 <lcd_send_string>
 8001406:	e0c2      	b.n	800158e <main+0x65e>
		  }
		  else if(cState == 3){
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <main+0x5a4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d123      	bne.n	8001458 <main+0x528>
			  lcd_put_cur(0,0);
 8001410:	2100      	movs	r1, #0
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff fc01 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("Volumen:");
 8001418:	4842      	ldr	r0, [pc, #264]	; (8001524 <main+0x5f4>)
 800141a:	f7ff fc5a 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 800141e:	2100      	movs	r1, #0
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff fbfa 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("            ");
 8001426:	4838      	ldr	r0, [pc, #224]	; (8001508 <main+0x5d8>)
 8001428:	f7ff fc53 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 800142c:	2100      	movs	r1, #0
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff fbf3 	bl	8000c1a <lcd_put_cur>
			  itoa(Volume, pantalla, 10);
 8001434:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <main+0x5f8>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143e:	220a      	movs	r2, #10
 8001440:	4933      	ldr	r1, [pc, #204]	; (8001510 <main+0x5e0>)
 8001442:	ee17 0a90 	vmov	r0, s15
 8001446:	f008 f877 	bl	8009538 <itoa>
			  lcd_send_string(pantalla);
 800144a:	4831      	ldr	r0, [pc, #196]	; (8001510 <main+0x5e0>)
 800144c:	f7ff fc41 	bl	8000cd2 <lcd_send_string>
			  lcd_send_string(" cm3");
 8001450:	4836      	ldr	r0, [pc, #216]	; (800152c <main+0x5fc>)
 8001452:	f7ff fc3e 	bl	8000cd2 <lcd_send_string>
 8001456:	e09a      	b.n	800158e <main+0x65e>
		  }
		  else if(cState == 4){
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <main+0x5a4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d171      	bne.n	8001544 <main+0x614>
			  lcd_put_cur(0,0);
 8001460:	2100      	movs	r1, #0
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fbd9 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("Luminosidad:");
 8001468:	4831      	ldr	r0, [pc, #196]	; (8001530 <main+0x600>)
 800146a:	f7ff fc32 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 800146e:	2100      	movs	r1, #0
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff fbd2 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("            ");
 8001476:	4824      	ldr	r0, [pc, #144]	; (8001508 <main+0x5d8>)
 8001478:	f7ff fc2b 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 800147c:	2100      	movs	r1, #0
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff fbcb 	bl	8000c1a <lcd_put_cur>
			  Ldisplay = (((Lumen-Lmin)*20)/(Lmax-Lmin))*5;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <main+0x604>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <main+0x608>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	1ad2      	subs	r2, r2, r3
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	461a      	mov	r2, r3
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <main+0x60c>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <main+0x608>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	1acb      	subs	r3, r1, r3
 80014a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <main+0x610>)
 80014b6:	801a      	strh	r2, [r3, #0]
			  itoa(Ldisplay, pantalla, 10);
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <main+0x610>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	220a      	movs	r2, #10
 80014be:	4914      	ldr	r1, [pc, #80]	; (8001510 <main+0x5e0>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f008 f839 	bl	8009538 <itoa>
			  lcd_send_string(pantalla);
 80014c6:	4812      	ldr	r0, [pc, #72]	; (8001510 <main+0x5e0>)
 80014c8:	f7ff fc03 	bl	8000cd2 <lcd_send_string>
			  lcd_send_string(" %");
 80014cc:	4814      	ldr	r0, [pc, #80]	; (8001520 <main+0x5f0>)
 80014ce:	f7ff fc00 	bl	8000cd2 <lcd_send_string>
 80014d2:	e05c      	b.n	800158e <main+0x65e>
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000000 	.word	0x20000000
 80014dc:	200000cc 	.word	0x200000cc
 80014e0:	200000d0 	.word	0x200000d0
 80014e4:	200000c4 	.word	0x200000c4
 80014e8:	40020000 	.word	0x40020000
 80014ec:	20000150 	.word	0x20000150
 80014f0:	200000c8 	.word	0x200000c8
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	080097a0 	.word	0x080097a0
 8001500:	080097ac 	.word	0x080097ac
 8001504:	080097b8 	.word	0x080097b8
 8001508:	080097c8 	.word	0x080097c8
 800150c:	200000d4 	.word	0x200000d4
 8001510:	20000240 	.word	0x20000240
 8001514:	080097d8 	.word	0x080097d8
 8001518:	080097dc 	.word	0x080097dc
 800151c:	200000d8 	.word	0x200000d8
 8001520:	080097e8 	.word	0x080097e8
 8001524:	080097ec 	.word	0x080097ec
 8001528:	200002a4 	.word	0x200002a4
 800152c:	080097f8 	.word	0x080097f8
 8001530:	08009800 	.word	0x08009800
 8001534:	200001f2 	.word	0x200001f2
 8001538:	2000000c 	.word	0x2000000c
 800153c:	2000000e 	.word	0x2000000e
 8001540:	20000144 	.word	0x20000144

		  }
		  else if (cState == 5){
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <main+0x69c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d10e      	bne.n	800156a <main+0x63a>
			  lcd_put_cur(0,0);
 800154c:	2100      	movs	r1, #0
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fb63 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("Vaciado");
 8001554:	481e      	ldr	r0, [pc, #120]	; (80015d0 <main+0x6a0>)
 8001556:	f7ff fbbc 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 800155a:	2100      	movs	r1, #0
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff fb5c 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("necesario");
 8001562:	481c      	ldr	r0, [pc, #112]	; (80015d4 <main+0x6a4>)
 8001564:	f7ff fbb5 	bl	8000cd2 <lcd_send_string>
 8001568:	e011      	b.n	800158e <main+0x65e>
		  }
		  else if (cState == 6){
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <main+0x69c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b06      	cmp	r3, #6
 8001570:	d10d      	bne.n	800158e <main+0x65e>
			  lcd_put_cur(0,0);
 8001572:	2100      	movs	r1, #0
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fb50 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("Vaciando");
 800157a:	4817      	ldr	r0, [pc, #92]	; (80015d8 <main+0x6a8>)
 800157c:	f7ff fba9 	bl	8000cd2 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001580:	2100      	movs	r1, #0
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fb49 	bl	8000c1a <lcd_put_cur>
			  lcd_send_string("tanque");
 8001588:	4814      	ldr	r0, [pc, #80]	; (80015dc <main+0x6ac>)
 800158a:	f7ff fba2 	bl	8000cd2 <lcd_send_string>
	  }



	  // Testing DHT11
	  if (Temp != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <main+0x6b0>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d005      	beq.n	80015aa <main+0x67a>
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <main+0x6b4>)
 80015a6:	f001 fdd5 	bl	8003154 <HAL_GPIO_WritePin>
	  if (RH != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <main+0x6b8>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	f43f acfc 	beq.w	8000fb4 <main+0x84>
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c2:	4808      	ldr	r0, [pc, #32]	; (80015e4 <main+0x6b4>)
 80015c4:	f001 fdc6 	bl	8003154 <HAL_GPIO_WritePin>
      HAL_ADC_Start(&hadc1);
 80015c8:	e4f4      	b.n	8000fb4 <main+0x84>
 80015ca:	bf00      	nop
 80015cc:	20000004 	.word	0x20000004
 80015d0:	08009810 	.word	0x08009810
 80015d4:	08009818 	.word	0x08009818
 80015d8:	08009824 	.word	0x08009824
 80015dc:	08009830 	.word	0x08009830
 80015e0:	200000d4 	.word	0x200000d4
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	200000d8 	.word	0x200000d8

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b094      	sub	sp, #80	; 0x50
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	2230      	movs	r2, #48	; 0x30
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f007 ffae 	bl	800955c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <SystemClock_Config+0xc8>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <SystemClock_Config+0xc8>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	; 0x40
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <SystemClock_Config+0xc8>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <SystemClock_Config+0xcc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <SystemClock_Config+0xcc>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <SystemClock_Config+0xcc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001648:	2301      	movs	r3, #1
 800164a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001652:	2302      	movs	r3, #2
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800165c:	2304      	movs	r3, #4
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001660:	2348      	movs	r3, #72	; 0x48
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001664:	2302      	movs	r3, #2
 8001666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001668:	2303      	movs	r3, #3
 800166a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	4618      	mov	r0, r3
 8001672:	f003 ff5b 	bl	800552c <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800167c:	f000 fb68 	bl	8001d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001680:	230f      	movs	r3, #15
 8001682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001684:	2302      	movs	r3, #2
 8001686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2102      	movs	r1, #2
 800169c:	4618      	mov	r0, r3
 800169e:	f004 f9bd 	bl	8005a1c <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016a8:	f000 fb52 	bl	8001d50 <Error_Handler>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3750      	adds	r7, #80	; 0x50
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MX_ADC1_Init+0x98>)
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <MX_ADC1_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_ADC1_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <MX_ADC1_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_ADC1_Init+0x98>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_ADC1_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_ADC1_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_ADC1_Init+0x98>)
 80016fc:	4a17      	ldr	r2, [pc, #92]	; (800175c <MX_ADC1_Init+0xa0>)
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_ADC1_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_ADC1_Init+0x98>)
 8001708:	2201      	movs	r2, #1
 800170a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_ADC1_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_ADC1_Init+0x98>)
 8001716:	2201      	movs	r2, #1
 8001718:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <MX_ADC1_Init+0x98>)
 800171c:	f000 fe88 	bl	8002430 <HAL_ADC_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001726:	f000 fb13 	bl	8001d50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800172a:	2301      	movs	r3, #1
 800172c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_ADC1_Init+0x98>)
 800173c:	f001 f826 	bl	800278c <HAL_ADC_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001746:	f000 fb03 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000250 	.word	0x20000250
 8001758:	40012000 	.word	0x40012000
 800175c:	0f000001 	.word	0x0f000001

08001760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_I2C1_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C1_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_I2C1_Init+0x58>)
 800176e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_I2C1_Init+0x50>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_I2C1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_I2C1_Init+0x50>)
 800179e:	f003 fa79 	bl	8004c94 <HAL_I2C_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f000 fad2 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000198 	.word	0x20000198
 80017b4:	40005400 	.word	0x40005400
 80017b8:	000186a0 	.word	0x000186a0

080017bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_SPI1_Init+0x64>)
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <MX_SPI1_Init+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SPI1_Init+0x64>)
 80017c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SPI1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_SPI1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SPI1_Init+0x64>)
 80017e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_SPI1_Init+0x64>)
 8001808:	220a      	movs	r2, #10
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_SPI1_Init+0x64>)
 800180e:	f004 faed 	bl	8005dec <HAL_SPI_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001818:	f000 fa9a 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200002a8 	.word	0x200002a8
 8001824:	40013000 	.word	0x40013000

08001828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0318 	add.w	r3, r7, #24
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <MX_TIM2_Init+0xdc>)
 8001854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001858:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <MX_TIM2_Init+0xdc>)
 800185c:	2247      	movs	r2, #71	; 0x47
 800185e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <MX_TIM2_Init+0xdc>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <MX_TIM2_Init+0xdc>)
 8001868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <MX_TIM2_Init+0xdc>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <MX_TIM2_Init+0xdc>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187a:	4822      	ldr	r0, [pc, #136]	; (8001904 <MX_TIM2_Init+0xdc>)
 800187c:	f004 fb3f 	bl	8005efe <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001886:	f000 fa63 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	4619      	mov	r1, r3
 8001896:	481b      	ldr	r0, [pc, #108]	; (8001904 <MX_TIM2_Init+0xdc>)
 8001898:	f004 ff3a 	bl	8006710 <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80018a2:	f000 fa55 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018a6:	4817      	ldr	r0, [pc, #92]	; (8001904 <MX_TIM2_Init+0xdc>)
 80018a8:	f004 fc17 	bl	80060da <HAL_TIM_IC_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018b2:	f000 fa4d 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	4619      	mov	r1, r3
 80018c4:	480f      	ldr	r0, [pc, #60]	; (8001904 <MX_TIM2_Init+0xdc>)
 80018c6:	f005 fad7 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80018d0:	f000 fa3e 	bl	8001d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018d8:	2301      	movs	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <MX_TIM2_Init+0xdc>)
 80018ec:	f004 fe74 	bl	80065d8 <HAL_TIM_IC_ConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80018f6:	f000 fa2b 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200000fc 	.word	0x200000fc

08001908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001926:	463b      	mov	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <MX_TIM3_Init+0xdc>)
 8001934:	4a2c      	ldr	r2, [pc, #176]	; (80019e8 <MX_TIM3_Init+0xe0>)
 8001936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <MX_TIM3_Init+0xdc>)
 800193a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800193e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <MX_TIM3_Init+0xdc>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <MX_TIM3_Init+0xdc>)
 8001948:	f242 7210 	movw	r2, #10000	; 0x2710
 800194c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <MX_TIM3_Init+0xdc>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <MX_TIM3_Init+0xdc>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800195a:	4822      	ldr	r0, [pc, #136]	; (80019e4 <MX_TIM3_Init+0xdc>)
 800195c:	f004 facf 	bl	8005efe <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001966:	f000 f9f3 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0318 	add.w	r3, r7, #24
 8001974:	4619      	mov	r1, r3
 8001976:	481b      	ldr	r0, [pc, #108]	; (80019e4 <MX_TIM3_Init+0xdc>)
 8001978:	f004 feca 	bl	8006710 <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001982:	f000 f9e5 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001986:	4817      	ldr	r0, [pc, #92]	; (80019e4 <MX_TIM3_Init+0xdc>)
 8001988:	f004 fba7 	bl	80060da <HAL_TIM_IC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001992:	f000 f9dd 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	480f      	ldr	r0, [pc, #60]	; (80019e4 <MX_TIM3_Init+0xdc>)
 80019a6:	f005 fa67 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80019b0:	f000 f9ce 	bl	8001d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019b4:	2300      	movs	r3, #0
 80019b6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019b8:	2301      	movs	r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	2208      	movs	r2, #8
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <MX_TIM3_Init+0xdc>)
 80019cc:	f004 fe04 	bl	80065d8 <HAL_TIM_IC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80019d6:	f000 f9bb 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001f4 	.word	0x200001f4
 80019e8:	40000400 	.word	0x40000400

080019ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a0a:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <MX_TIM4_Init+0xa4>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a10:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001a14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a30:	4816      	ldr	r0, [pc, #88]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a32:	f004 fb52 	bl	80060da <HAL_TIM_IC_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001a3c:	f000 f988 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480f      	ldr	r0, [pc, #60]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a50:	f005 fa12 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001a5a:	f000 f979 	bl	8001d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	220c      	movs	r2, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_TIM4_Init+0xa0>)
 8001a76:	f004 fdaf 	bl	80065d8 <HAL_TIM_IC_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001a80:	f000 f966 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000150 	.word	0x20000150
 8001a90:	40000800 	.word	0x40000800

08001a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	4ba2      	ldr	r3, [pc, #648]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4aa1      	ldr	r2, [pc, #644]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001ab4:	f043 0310 	orr.w	r3, r3, #16
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b9f      	ldr	r3, [pc, #636]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	4b9b      	ldr	r3, [pc, #620]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a9a      	ldr	r2, [pc, #616]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b98      	ldr	r3, [pc, #608]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b94      	ldr	r3, [pc, #592]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a93      	ldr	r2, [pc, #588]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b91      	ldr	r3, [pc, #580]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b8d      	ldr	r3, [pc, #564]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a8c      	ldr	r2, [pc, #560]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	4b86      	ldr	r3, [pc, #536]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a85      	ldr	r2, [pc, #532]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b83      	ldr	r3, [pc, #524]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <MX_GPIO_Init+0x2a4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	210c      	movs	r1, #12
 8001b56:	4879      	ldr	r0, [pc, #484]	; (8001d3c <MX_GPIO_Init+0x2a8>)
 8001b58:	f001 fafc 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4877      	ldr	r0, [pc, #476]	; (8001d40 <MX_GPIO_Init+0x2ac>)
 8001b62:	f001 faf7 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 8001b6c:	4875      	ldr	r0, [pc, #468]	; (8001d44 <MX_GPIO_Init+0x2b0>)
 8001b6e:	f001 faf1 	bl	8003154 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b78:	4873      	ldr	r0, [pc, #460]	; (8001d48 <MX_GPIO_Init+0x2b4>)
 8001b7a:	f001 faeb 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CS_I2C_SPI_Pin;
 8001b7e:	230c      	movs	r3, #12
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4869      	ldr	r0, [pc, #420]	; (8001d3c <MX_GPIO_Init+0x2a8>)
 8001b96:	f001 f929 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4863      	ldr	r0, [pc, #396]	; (8001d40 <MX_GPIO_Init+0x2ac>)
 8001bb2:	f001 f91b 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	485b      	ldr	r0, [pc, #364]	; (8001d40 <MX_GPIO_Init+0x2ac>)
 8001bd2:	f001 f90b 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001bd6:	2319      	movs	r3, #25
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001be0:	2302      	movs	r3, #2
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4857      	ldr	r0, [pc, #348]	; (8001d48 <MX_GPIO_Init+0x2b4>)
 8001bec:	f001 f8fe 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	4852      	ldr	r0, [pc, #328]	; (8001d4c <MX_GPIO_Init+0x2b8>)
 8001c04:	f001 f8f2 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	4849      	ldr	r0, [pc, #292]	; (8001d4c <MX_GPIO_Init+0x2b8>)
 8001c26:	f001 f8e1 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4841      	ldr	r0, [pc, #260]	; (8001d4c <MX_GPIO_Init+0x2b8>)
 8001c48:	f001 f8d0 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 8001c4c:	f44f 4372 	mov.w	r3, #61952	; 0xf200
 8001c50:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4837      	ldr	r0, [pc, #220]	; (8001d44 <MX_GPIO_Init+0x2b0>)
 8001c66:	f001 f8c1 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c6a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	482e      	ldr	r0, [pc, #184]	; (8001d40 <MX_GPIO_Init+0x2ac>)
 8001c88:	f001 f8b0 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4827      	ldr	r0, [pc, #156]	; (8001d48 <MX_GPIO_Init+0x2b4>)
 8001caa:	f001 f89f 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4820      	ldr	r0, [pc, #128]	; (8001d48 <MX_GPIO_Init+0x2b4>)
 8001cc8:	f001 f890 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4819      	ldr	r0, [pc, #100]	; (8001d44 <MX_GPIO_Init+0x2b0>)
 8001ce0:	f001 f884 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ce8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4810      	ldr	r0, [pc, #64]	; (8001d3c <MX_GPIO_Init+0x2a8>)
 8001cfa:	f001 f877 	bl	8002dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2006      	movs	r0, #6
 8001d04:	f001 f83b 	bl	8002d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d08:	2006      	movs	r0, #6
 8001d0a:	f001 f854 	bl	8002db6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2009      	movs	r0, #9
 8001d14:	f001 f833 	bl	8002d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d18:	2009      	movs	r0, #9
 8001d1a:	f001 f84c 	bl	8002db6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	200a      	movs	r0, #10
 8001d24:	f001 f82b 	bl	8002d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f001 f844 	bl	8002db6 <HAL_NVIC_EnableIRQ>

}
 8001d2e:	bf00      	nop
 8001d30:	3730      	adds	r7, #48	; 0x30
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <Error_Handler+0x8>
	...

08001d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d9a:	2007      	movs	r0, #7
 8001d9c:	f000 ffe4 	bl	8002d68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_ADC_MspInit+0x7c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d127      	bne.n	8001e1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_ADC_MspInit+0x80>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_ADC_MspInit+0x80>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_ADC_MspInit+0x80>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_ADC_MspInit+0x80>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <HAL_ADC_MspInit+0x80>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <HAL_ADC_MspInit+0x80>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e06:	2302      	movs	r3, #2
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4805      	ldr	r0, [pc, #20]	; (8001e30 <HAL_ADC_MspInit+0x84>)
 8001e1a:	f000 ffe7 	bl	8002dec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	; 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40012000 	.word	0x40012000
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_I2C_MspInit+0x84>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12b      	bne.n	8001eae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_I2C_MspInit+0x88>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_I2C_MspInit+0x88>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_I2C_MspInit+0x88>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e72:	23c0      	movs	r3, #192	; 0xc0
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e76:	2312      	movs	r3, #18
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e82:	2304      	movs	r3, #4
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <HAL_I2C_MspInit+0x8c>)
 8001e8e:	f000 ffad 	bl	8002dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_I2C_MspInit+0x88>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_I2C_MspInit+0x88>)
 8001e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_I2C_MspInit+0x88>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	; 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40005400 	.word	0x40005400
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020400 	.word	0x40020400

08001ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_SPI_MspInit+0x84>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12b      	bne.n	8001f3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f1e:	23e0      	movs	r3, #224	; 0xe0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f2e:	2305      	movs	r3, #5
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_SPI_MspInit+0x8c>)
 8001f3a:	f000 ff57 	bl	8002dec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40013000 	.word	0x40013000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000

08001f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d135      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	4b48      	ldr	r3, [pc, #288]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b45      	ldr	r3, [pc, #276]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a40      	ldr	r2, [pc, #256]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4835      	ldr	r0, [pc, #212]	; (80020a0 <HAL_TIM_Base_MspInit+0x14c>)
 8001fcc:	f000 ff0e 	bl	8002dec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	201c      	movs	r0, #28
 8001fd6:	f000 fed2 	bl	8002d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fda:	201c      	movs	r0, #28
 8001fdc:	f000 feeb 	bl	8002db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fe0:	e057      	b.n	8002092 <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM3)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <HAL_TIM_Base_MspInit+0x150>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d152      	bne.n	8002092 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a29      	ldr	r2, [pc, #164]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	6313      	str	r3, [r2, #48]	; 0x30
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_TIM_Base_MspInit+0x148>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002040:	2301      	movs	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002050:	2302      	movs	r3, #2
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4813      	ldr	r0, [pc, #76]	; (80020a8 <HAL_TIM_Base_MspInit+0x154>)
 800205c:	f000 fec6 	bl	8002dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002072:	2302      	movs	r3, #2
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002076:	f107 031c 	add.w	r3, r7, #28
 800207a:	4619      	mov	r1, r3
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <HAL_TIM_Base_MspInit+0x158>)
 800207e:	f000 feb5 	bl	8002dec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	201d      	movs	r0, #29
 8002088:	f000 fe79 	bl	8002d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800208c:	201d      	movs	r0, #29
 800208e:	f000 fe92 	bl	8002db6 <HAL_NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800

080020b0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_TIM_IC_MspInit+0x94>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d134      	bne.n	800213c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_TIM_IC_MspInit+0x98>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_TIM_IC_MspInit+0x98>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_TIM_IC_MspInit+0x98>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_TIM_IC_MspInit+0x98>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_TIM_IC_MspInit+0x98>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_TIM_IC_MspInit+0x98>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800210a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800211c:	2302      	movs	r3, #2
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <HAL_TIM_IC_MspInit+0x9c>)
 8002128:	f000 fe60 	bl	8002dec <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	201e      	movs	r0, #30
 8002132:	f000 fe24 	bl	8002d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002136:	201e      	movs	r0, #30
 8002138:	f000 fe3d 	bl	8002db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40000800 	.word	0x40000800
 8002148:	40023800 	.word	0x40023800
 800214c:	40020400 	.word	0x40020400

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <NMI_Handler+0x4>

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <MemManage_Handler+0x4>

08002162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <BusFault_Handler+0x4>

08002168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <UsageFault_Handler+0x4>

0800216e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219c:	f000 f904 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f001 f807 	bl	80031bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021b6:	2008      	movs	r0, #8
 80021b8:	f001 f800 	bl	80031bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021c4:	2010      	movs	r0, #16
 80021c6:	f000 fff9 	bl	80031bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <TIM2_IRQHandler+0x10>)
 80021d6:	f004 f8f7 	bl	80063c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200000fc 	.word	0x200000fc

080021e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM3_IRQHandler+0x10>)
 80021ea:	f004 f8ed 	bl	80063c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200001f4 	.word	0x200001f4

080021f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <TIM4_IRQHandler+0x10>)
 80021fe:	f004 f8e3 	bl	80063c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000150 	.word	0x20000150

0800220c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <OTG_FS_IRQHandler+0x10>)
 8002212:	f001 fa55 	bl	80036c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200006ec 	.word	0x200006ec

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f007 f930 	bl	80094b4 <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20020000 	.word	0x20020000
 8002280:	00000400 	.word	0x00000400
 8002284:	200000ec 	.word	0x200000ec
 8002288:	20000a00 	.word	0x20000a00

0800228c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022b6:	490e      	ldr	r1, [pc, #56]	; (80022f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022cc:	4c0b      	ldr	r4, [pc, #44]	; (80022fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022da:	f7ff ffd7 	bl	800228c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022de:	f007 f8ef 	bl	80094c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7fe fe25 	bl	8000f30 <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80022f4:	0800988c 	.word	0x0800988c
  ldr r2, =_sbss
 80022f8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80022fc:	20000a00 	.word	0x20000a00

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>
	...

08002304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_Init+0x40>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_Init+0x40>)
 800231a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_Init+0x40>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fd1b 	bl	8002d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fd10 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fd33 	bl	8002dd2 <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 fcfb 	bl	8002d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000014 	.word	0x20000014
 80023a0:	2000001c 	.word	0x2000001c
 80023a4:	20000018 	.word	0x20000018

080023a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_IncTick+0x20>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_IncTick+0x24>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	2000001c 	.word	0x2000001c
 80023cc:	20000310 	.word	0x20000310

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000310 	.word	0x20000310

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff ffee 	bl	80023d0 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d005      	beq.n	800240e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_Delay+0x44>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800240e:	bf00      	nop
 8002410:	f7ff ffde 	bl	80023d0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f7      	bhi.n	8002410 <HAL_Delay+0x28>
  {
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000001c 	.word	0x2000001c

08002430 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e033      	b.n	80024ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fcac 	bl	8001dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002476:	f023 0302 	bic.w	r3, r3, #2
 800247a:	f043 0202 	orr.w	r2, r3, #2
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 faa4 	bl	80029d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f023 0303 	bic.w	r3, r3, #3
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
 800249e:	e001      	b.n	80024a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Start+0x1a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0b2      	b.n	8002638 <HAL_ADC_Start+0x180>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d018      	beq.n	800251a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024f8:	4b52      	ldr	r3, [pc, #328]	; (8002644 <HAL_ADC_Start+0x18c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_ADC_Start+0x190>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	0c9a      	lsrs	r2, r3, #18
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800250c:	e002      	b.n	8002514 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	3b01      	subs	r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f9      	bne.n	800250e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d17a      	bne.n	800261e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002552:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002566:	d106      	bne.n	8002576 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f023 0206 	bic.w	r2, r3, #6
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
 8002574:	e002      	b.n	800257c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002584:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_ADC_Start+0x194>)
 8002586:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002590:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b00      	cmp	r3, #0
 800259c:	d12a      	bne.n	80025f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <HAL_ADC_Start+0x198>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d015      	beq.n	80025d4 <HAL_ADC_Start+0x11c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_ADC_Start+0x19c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d105      	bne.n	80025be <HAL_ADC_Start+0x106>
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_ADC_Start+0x194>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a25      	ldr	r2, [pc, #148]	; (8002658 <HAL_ADC_Start+0x1a0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d136      	bne.n	8002636 <HAL_ADC_Start+0x17e>
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_ADC_Start+0x194>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d130      	bne.n	8002636 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d129      	bne.n	8002636 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	e020      	b.n	8002636 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <HAL_ADC_Start+0x198>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d11b      	bne.n	8002636 <HAL_ADC_Start+0x17e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d114      	bne.n	8002636 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	e00b      	b.n	8002636 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	20000014 	.word	0x20000014
 8002648:	431bde83 	.word	0x431bde83
 800264c:	40012300 	.word	0x40012300
 8002650:	40012000 	.word	0x40012000
 8002654:	40012100 	.word	0x40012100
 8002658:	40012200 	.word	0x40012200

0800265c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002678:	d113      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002688:	d10b      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e063      	b.n	800276a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026a2:	f7ff fe95 	bl	80023d0 <HAL_GetTick>
 80026a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026a8:	e021      	b.n	80026ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d01d      	beq.n	80026ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_ADC_PollForConversion+0x6c>
 80026b8:	f7ff fe8a 	bl	80023d0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d212      	bcs.n	80026ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d00b      	beq.n	80026ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e03d      	b.n	800276a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d1d6      	bne.n	80026aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0212 	mvn.w	r2, #18
 8002704:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d123      	bne.n	8002768 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11f      	bne.n	8002768 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1c>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e105      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x228>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d925      	bls.n	8002804 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b1e      	subs	r3, #30
 80027ce:	2207      	movs	r2, #7
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43da      	mvns	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	400a      	ands	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68d9      	ldr	r1, [r3, #12]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	4603      	mov	r3, r0
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4403      	add	r3, r0
 80027f6:	3b1e      	subs	r3, #30
 80027f8:	409a      	lsls	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	e022      	b.n	800284a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6919      	ldr	r1, [r3, #16]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	2207      	movs	r2, #7
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6919      	ldr	r1, [r3, #16]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	4603      	mov	r3, r0
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4403      	add	r3, r0
 8002840:	409a      	lsls	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b06      	cmp	r3, #6
 8002850:	d824      	bhi.n	800289c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b05      	subs	r3, #5
 8002864:	221f      	movs	r2, #31
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	400a      	ands	r2, r1
 8002872:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b05      	subs	r3, #5
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	635a      	str	r2, [r3, #52]	; 0x34
 800289a:	e04c      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d824      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b23      	subs	r3, #35	; 0x23
 80028b6:	221f      	movs	r2, #31
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43da      	mvns	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	400a      	ands	r2, r1
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b23      	subs	r3, #35	; 0x23
 80028e0:	fa00 f203 	lsl.w	r2, r0, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
 80028ec:	e023      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b41      	subs	r3, #65	; 0x41
 8002900:	221f      	movs	r2, #31
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	400a      	ands	r2, r1
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3b41      	subs	r3, #65	; 0x41
 800292a:	fa00 f203 	lsl.w	r2, r0, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_ADC_ConfigChannel+0x234>)
 8002938:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a21      	ldr	r2, [pc, #132]	; (80029c4 <HAL_ADC_ConfigChannel+0x238>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d109      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1cc>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b12      	cmp	r3, #18
 800294a:	d105      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_ADC_ConfigChannel+0x238>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d123      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21e>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d003      	beq.n	8002972 <HAL_ADC_ConfigChannel+0x1e6>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b11      	cmp	r3, #17
 8002970:	d11b      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d111      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_ADC_ConfigChannel+0x240>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	0c9a      	lsrs	r2, r3, #18
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40012300 	.word	0x40012300
 80029c4:	40012000 	.word	0x40012000
 80029c8:	20000014 	.word	0x20000014
 80029cc:	431bde83 	.word	0x431bde83

080029d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029d8:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <ADC_Init+0x1f0>)
 80029da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	021a      	lsls	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	4a58      	ldr	r2, [pc, #352]	; (8002bc4 <ADC_Init+0x1f4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	e00f      	b.n	8002ace <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0202 	bic.w	r2, r2, #2
 8002adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7e1b      	ldrb	r3, [r3, #24]
 8002ae8:	005a      	lsls	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	3b01      	subs	r3, #1
 8002b28:	035a      	lsls	r2, r3, #13
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e007      	b.n	8002b44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	051a      	lsls	r2, r3, #20
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b86:	025a      	lsls	r2, r3, #9
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	029a      	lsls	r2, r3, #10
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40012300 	.word	0x40012300
 8002bc4:	0f000001 	.word	0x0f000001

08002bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be4:	4013      	ands	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfa:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	60d3      	str	r3, [r2, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <__NVIC_GetPriorityGrouping+0x18>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	f003 0307 	and.w	r3, r3, #7
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db0b      	blt.n	8002c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4907      	ldr	r1, [pc, #28]	; (8002c64 <__NVIC_EnableIRQ+0x38>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db0a      	blt.n	8002c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <__NVIC_SetPriority+0x4c>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c90:	e00a      	b.n	8002ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <__NVIC_SetPriority+0x50>)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	3b04      	subs	r3, #4
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	761a      	strb	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000e100 	.word	0xe000e100
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f1c3 0307 	rsb	r3, r3, #7
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf28      	it	cs
 8002cda:	2304      	movcs	r3, #4
 8002cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d902      	bls.n	8002cec <NVIC_EncodePriority+0x30>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3b03      	subs	r3, #3
 8002cea:	e000      	b.n	8002cee <NVIC_EncodePriority+0x32>
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	401a      	ands	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43d9      	mvns	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	4313      	orrs	r3, r2
         );
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d34:	d301      	bcc.n	8002d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00f      	b.n	8002d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <SysTick_Config+0x40>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d42:	210f      	movs	r1, #15
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f7ff ff8e 	bl	8002c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <SysTick_Config+0x40>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <SysTick_Config+0x40>)
 8002d54:	2207      	movs	r2, #7
 8002d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	e000e010 	.word	0xe000e010

08002d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff29 	bl	8002bc8 <__NVIC_SetPriorityGrouping>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d90:	f7ff ff3e 	bl	8002c10 <__NVIC_GetPriorityGrouping>
 8002d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7ff ff8e 	bl	8002cbc <NVIC_EncodePriority>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff5d 	bl	8002c68 <__NVIC_SetPriority>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff31 	bl	8002c2c <__NVIC_EnableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ffa2 	bl	8002d24 <SysTick_Config>
 8002de0:	4603      	mov	r3, r0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	e16b      	b.n	80030e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f040 815a 	bne.w	80030da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d005      	beq.n	8002e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d130      	bne.n	8002ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2203      	movs	r2, #3
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e74:	2201      	movs	r2, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 0201 	and.w	r2, r3, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d017      	beq.n	8002edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d123      	bne.n	8002f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	08da      	lsrs	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3208      	adds	r2, #8
 8002ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	220f      	movs	r2, #15
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	08da      	lsrs	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3208      	adds	r2, #8
 8002f2a:	69b9      	ldr	r1, [r7, #24]
 8002f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0203 	and.w	r2, r3, #3
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80b4 	beq.w	80030da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b60      	ldr	r3, [pc, #384]	; (80030f8 <HAL_GPIO_Init+0x30c>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a5f      	ldr	r2, [pc, #380]	; (80030f8 <HAL_GPIO_Init+0x30c>)
 8002f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f80:	6453      	str	r3, [r2, #68]	; 0x44
 8002f82:	4b5d      	ldr	r3, [pc, #372]	; (80030f8 <HAL_GPIO_Init+0x30c>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f8e:	4a5b      	ldr	r2, [pc, #364]	; (80030fc <HAL_GPIO_Init+0x310>)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	3302      	adds	r3, #2
 8002f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_GPIO_Init+0x314>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02b      	beq.n	8003012 <HAL_GPIO_Init+0x226>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a51      	ldr	r2, [pc, #324]	; (8003104 <HAL_GPIO_Init+0x318>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d025      	beq.n	800300e <HAL_GPIO_Init+0x222>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a50      	ldr	r2, [pc, #320]	; (8003108 <HAL_GPIO_Init+0x31c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01f      	beq.n	800300a <HAL_GPIO_Init+0x21e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4f      	ldr	r2, [pc, #316]	; (800310c <HAL_GPIO_Init+0x320>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d019      	beq.n	8003006 <HAL_GPIO_Init+0x21a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4e      	ldr	r2, [pc, #312]	; (8003110 <HAL_GPIO_Init+0x324>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_GPIO_Init+0x216>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4d      	ldr	r2, [pc, #308]	; (8003114 <HAL_GPIO_Init+0x328>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00d      	beq.n	8002ffe <HAL_GPIO_Init+0x212>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4c      	ldr	r2, [pc, #304]	; (8003118 <HAL_GPIO_Init+0x32c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <HAL_GPIO_Init+0x20e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4b      	ldr	r2, [pc, #300]	; (800311c <HAL_GPIO_Init+0x330>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_GPIO_Init+0x20a>
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	e00e      	b.n	8003014 <HAL_GPIO_Init+0x228>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	e00c      	b.n	8003014 <HAL_GPIO_Init+0x228>
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	e00a      	b.n	8003014 <HAL_GPIO_Init+0x228>
 8002ffe:	2305      	movs	r3, #5
 8003000:	e008      	b.n	8003014 <HAL_GPIO_Init+0x228>
 8003002:	2304      	movs	r3, #4
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x228>
 8003006:	2303      	movs	r3, #3
 8003008:	e004      	b.n	8003014 <HAL_GPIO_Init+0x228>
 800300a:	2302      	movs	r3, #2
 800300c:	e002      	b.n	8003014 <HAL_GPIO_Init+0x228>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_GPIO_Init+0x228>
 8003012:	2300      	movs	r3, #0
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	f002 0203 	and.w	r2, r2, #3
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	4093      	lsls	r3, r2
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003024:	4935      	ldr	r1, [pc, #212]	; (80030fc <HAL_GPIO_Init+0x310>)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_GPIO_Init+0x334>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003056:	4a32      	ldr	r2, [pc, #200]	; (8003120 <HAL_GPIO_Init+0x334>)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800305c:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_GPIO_Init+0x334>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <HAL_GPIO_Init+0x334>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_GPIO_Init+0x334>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_GPIO_Init+0x334>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_GPIO_Init+0x334>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d4:	4a12      	ldr	r2, [pc, #72]	; (8003120 <HAL_GPIO_Init+0x334>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3301      	adds	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b0f      	cmp	r3, #15
 80030e4:	f67f ae90 	bls.w	8002e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40013800 	.word	0x40013800
 8003100:	40020000 	.word	0x40020000
 8003104:	40020400 	.word	0x40020400
 8003108:	40020800 	.word	0x40020800
 800310c:	40020c00 	.word	0x40020c00
 8003110:	40021000 	.word	0x40021000
 8003114:	40021400 	.word	0x40021400
 8003118:	40021800 	.word	0x40021800
 800311c:	40021c00 	.word	0x40021c00
 8003120:	40013c00 	.word	0x40013c00

08003124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	e001      	b.n	8003146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003146:	7bfb      	ldrb	r3, [r7, #15]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003170:	e003      	b.n	800317a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003172:	887b      	ldrh	r3, [r7, #2]
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	619a      	str	r2, [r3, #24]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003198:	887a      	ldrh	r2, [r7, #2]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	041a      	lsls	r2, r3, #16
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43d9      	mvns	r1, r3
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	400b      	ands	r3, r1
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d006      	beq.n	80031e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031d2:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd fd8e 	bl	8000cfc <HAL_GPIO_EXTI_Callback>
  }
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40013c00 	.word	0x40013c00

080031ec <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ee:	b08f      	sub	sp, #60	; 0x3c
 80031f0:	af0a      	add	r7, sp, #40	; 0x28
 80031f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e054      	b.n	80032a8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f005 fefd 	bl	8009018 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2203      	movs	r2, #3
 8003222:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f003 ff1d 	bl	800707c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	687e      	ldr	r6, [r7, #4]
 800324a:	466d      	mov	r5, sp
 800324c:	f106 0410 	add.w	r4, r6, #16
 8003250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003258:	e894 0003 	ldmia.w	r4, {r0, r1}
 800325c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003260:	1d33      	adds	r3, r6, #4
 8003262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003264:	6838      	ldr	r0, [r7, #0]
 8003266:	f003 fe97 	bl	8006f98 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f003 ff14 	bl	800709e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	687e      	ldr	r6, [r7, #4]
 800327e:	466d      	mov	r5, sp
 8003280:	f106 0410 	add.w	r4, r6, #16
 8003284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003290:	e885 0003 	stmia.w	r5, {r0, r1}
 8003294:	1d33      	adds	r3, r6, #4
 8003296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003298:	6838      	ldr	r0, [r7, #0]
 800329a:	f004 f87b 	bl	8007394 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032b0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	70fb      	strb	r3, [r7, #3]
 80032c2:	460b      	mov	r3, r1
 80032c4:	70bb      	strb	r3, [r7, #2]
 80032c6:	4613      	mov	r3, r2
 80032c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_HCD_HC_Init+0x28>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e076      	b.n	80033c6 <HAL_HCD_HC_Init+0x116>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	333d      	adds	r3, #61	; 0x3d
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3338      	adds	r3, #56	; 0x38
 8003300:	787a      	ldrb	r2, [r7, #1]
 8003302:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3340      	adds	r3, #64	; 0x40
 8003312:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003314:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	3339      	adds	r3, #57	; 0x39
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	333f      	adds	r3, #63	; 0x3f
 8003336:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800333a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	78ba      	ldrb	r2, [r7, #2]
 8003340:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003344:	b2d0      	uxtb	r0, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	333a      	adds	r3, #58	; 0x3a
 8003352:	4602      	mov	r2, r0
 8003354:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003356:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800335a:	2b00      	cmp	r3, #0
 800335c:	da09      	bge.n	8003372 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	333b      	adds	r3, #59	; 0x3b
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e008      	b.n	8003384 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	333b      	adds	r3, #59	; 0x3b
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	333c      	adds	r3, #60	; 0x3c
 8003392:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003396:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	787c      	ldrb	r4, [r7, #1]
 800339e:	78ba      	ldrb	r2, [r7, #2]
 80033a0:	78f9      	ldrb	r1, [r7, #3]
 80033a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033a4:	9302      	str	r3, [sp, #8]
 80033a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4623      	mov	r3, r4
 80033b4:	f004 f93e 	bl	8007634 <USB_HC_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}

080033ce <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_HCD_HC_Halt+0x1e>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e00f      	b.n	800340c <HAL_HCD_HC_Halt+0x3e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 fb7a 	bl	8007af6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	70fb      	strb	r3, [r7, #3]
 8003426:	460b      	mov	r3, r1
 8003428:	70bb      	strb	r3, [r7, #2]
 800342a:	4613      	mov	r3, r2
 800342c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	333b      	adds	r3, #59	; 0x3b
 800343c:	78ba      	ldrb	r2, [r7, #2]
 800343e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	333f      	adds	r3, #63	; 0x3f
 800344e:	787a      	ldrb	r2, [r7, #1]
 8003450:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003452:	7c3b      	ldrb	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d112      	bne.n	800347e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3342      	adds	r3, #66	; 0x42
 8003466:	2203      	movs	r2, #3
 8003468:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	333d      	adds	r3, #61	; 0x3d
 8003478:	7f3a      	ldrb	r2, [r7, #28]
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e008      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3342      	adds	r3, #66	; 0x42
 800348c:	2202      	movs	r2, #2
 800348e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003490:	787b      	ldrb	r3, [r7, #1]
 8003492:	2b03      	cmp	r3, #3
 8003494:	f200 80c6 	bhi.w	8003624 <HAL_HCD_HC_SubmitRequest+0x210>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	08003611 	.word	0x08003611
 80034a8:	08003515 	.word	0x08003515
 80034ac:	08003593 	.word	0x08003593
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80034b0:	7c3b      	ldrb	r3, [r7, #16]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	f040 80b8 	bne.w	8003628 <HAL_HCD_HC_SubmitRequest+0x214>
 80034b8:	78bb      	ldrb	r3, [r7, #2]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 80b4 	bne.w	8003628 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80034c0:	8b3b      	ldrh	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d108      	bne.n	80034d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3355      	adds	r3, #85	; 0x55
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3355      	adds	r3, #85	; 0x55
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3342      	adds	r3, #66	; 0x42
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034fe:	e093      	b.n	8003628 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3342      	adds	r3, #66	; 0x42
 800350e:	2202      	movs	r2, #2
 8003510:	701a      	strb	r2, [r3, #0]
      break;
 8003512:	e089      	b.n	8003628 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003514:	78bb      	ldrb	r3, [r7, #2]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11d      	bne.n	8003556 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3355      	adds	r3, #85	; 0x55
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3342      	adds	r3, #66	; 0x42
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003540:	e073      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3342      	adds	r3, #66	; 0x42
 8003550:	2202      	movs	r2, #2
 8003552:	701a      	strb	r2, [r3, #0]
      break;
 8003554:	e069      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3354      	adds	r3, #84	; 0x54
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3342      	adds	r3, #66	; 0x42
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
      break;
 800357c:	e055      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3342      	adds	r3, #66	; 0x42
 800358c:	2202      	movs	r2, #2
 800358e:	701a      	strb	r2, [r3, #0]
      break;
 8003590:	e04b      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003592:	78bb      	ldrb	r3, [r7, #2]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11d      	bne.n	80035d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3355      	adds	r3, #85	; 0x55
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3342      	adds	r3, #66	; 0x42
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035be:	e034      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3342      	adds	r3, #66	; 0x42
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
      break;
 80035d2:	e02a      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3354      	adds	r3, #84	; 0x54
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3342      	adds	r3, #66	; 0x42
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
      break;
 80035fa:	e016      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3342      	adds	r3, #66	; 0x42
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]
      break;
 800360e:	e00c      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3342      	adds	r3, #66	; 0x42
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
      break;
 8003622:	e002      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003624:	bf00      	nop
 8003626:	e000      	b.n	800362a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003628:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	3344      	adds	r3, #68	; 0x44
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	8b3a      	ldrh	r2, [r7, #24]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	202c      	movs	r0, #44	; 0x2c
 8003644:	fb00 f303 	mul.w	r3, r0, r3
 8003648:	440b      	add	r3, r1
 800364a:	334c      	adds	r3, #76	; 0x4c
 800364c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3360      	adds	r3, #96	; 0x60
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	3350      	adds	r3, #80	; 0x50
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	3339      	adds	r3, #57	; 0x39
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	3361      	adds	r3, #97	; 0x61
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	222c      	movs	r2, #44	; 0x2c
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	3338      	adds	r3, #56	; 0x38
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	18d1      	adds	r1, r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	f004 f8ce 	bl	8007850 <USB_HC_StartXfer>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop

080036c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f003 fe1b 	bl	8007312 <USB_GetMode>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	f040 80f6 	bne.w	80038d0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f003 fdff 	bl	80072ec <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80ec 	beq.w	80038ce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 fdf6 	bl	80072ec <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370a:	d104      	bne.n	8003716 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003714:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f003 fde6 	bl	80072ec <USB_ReadInterrupts>
 8003720:	4603      	mov	r3, r0
 8003722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372a:	d104      	bne.n	8003736 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003734:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f003 fdd6 	bl	80072ec <USB_ReadInterrupts>
 8003740:	4603      	mov	r3, r0
 8003742:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003746:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374a:	d104      	bne.n	8003756 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003754:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f003 fdc6 	bl	80072ec <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b02      	cmp	r3, #2
 8003768:	d103      	bne.n	8003772 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2202      	movs	r2, #2
 8003770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f003 fdb8 	bl	80072ec <USB_ReadInterrupts>
 800377c:	4603      	mov	r3, r0
 800377e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003786:	d11c      	bne.n	80037c2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003790:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80037a2:	2110      	movs	r1, #16
 80037a4:	6938      	ldr	r0, [r7, #16]
 80037a6:	f003 fcc7 	bl	8007138 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80037aa:	6938      	ldr	r0, [r7, #16]
 80037ac:	f003 fce8 	bl	8007180 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fea0 	bl	80074fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f005 fc9b 	bl	80090f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 fd90 	bl	80072ec <USB_ReadInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d6:	d102      	bne.n	80037de <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f001 f9e7 	bl	8004bac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fd82 	bl	80072ec <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d106      	bne.n	8003800 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f005 fc64 	bl	80090c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2208      	movs	r2, #8
 80037fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 fd71 	bl	80072ec <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b10      	cmp	r3, #16
 8003812:	d101      	bne.n	8003818 <HAL_HCD_IRQHandler+0x158>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_HCD_IRQHandler+0x15a>
 8003818:	2300      	movs	r3, #0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d012      	beq.n	8003844 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0210 	bic.w	r2, r2, #16
 800382c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f001 f8ea 	bl	8004a08 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0210 	orr.w	r2, r2, #16
 8003842:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f003 fd4f 	bl	80072ec <USB_ReadInterrupts>
 800384e:	4603      	mov	r3, r0
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003858:	d13a      	bne.n	80038d0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f004 f938 	bl	8007ad4 <USB_HC_ReadInterrupt>
 8003864:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e025      	b.n	80038b8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d018      	beq.n	80038b2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003896:	d106      	bne.n	80038a6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f88f 	bl	80039c2 <HCD_HC_IN_IRQHandler>
 80038a4:	e005      	b.n	80038b2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fcaa 	bl	8004206 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3d4      	bcc.n	800386c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ca:	615a      	str	r2, [r3, #20]
 80038cc:	e000      	b.n	80038d0 <HAL_HCD_IRQHandler+0x210>
      return;
 80038ce:	bf00      	nop
    }
  }
}
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_HCD_Start+0x16>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e013      	b.n	8003914 <HAL_HCD_Start+0x3e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f003 fe38 	bl	8007570 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fba8 	bl	800705a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_HCD_Stop+0x16>
 800392e:	2302      	movs	r3, #2
 8003930:	e00d      	b.n	800394e <HAL_HCD_Stop+0x32>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f004 fa32 	bl	8007da8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	3360      	adds	r3, #96	; 0x60
 8003970:	781b      	ldrb	r3, [r3, #0]
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	3350      	adds	r3, #80	; 0x50
 8003998:	681b      	ldr	r3, [r3, #0]
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 fe2c 	bl	8007610 <USB_GetCurrentFrame>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d119      	bne.n	8003a26 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	461a      	mov	r2, r3
 8003a00:	2304      	movs	r3, #4
 8003a02:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	60d3      	str	r3, [r2, #12]
 8003a24:	e101      	b.n	8003c2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d12b      	bne.n	8003a96 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	212c      	movs	r1, #44	; 0x2c
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3361      	adds	r3, #97	; 0x61
 8003a60:	2207      	movs	r2, #7
 8003a62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 f831 	bl	8007af6 <USB_HC_Halt>
 8003a94:	e0c9      	b.n	8003c2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d109      	bne.n	8003ac0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2320      	movs	r3, #32
 8003abc:	6093      	str	r3, [r2, #8]
 8003abe:	e0b4      	b.n	8003c2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d133      	bne.n	8003b3e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	0151      	lsls	r1, r2, #5
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	440a      	add	r2, r1
 8003aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3361      	adds	r3, #97	; 0x61
 8003b04:	2205      	movs	r2, #5
 8003b06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2310      	movs	r3, #16
 8003b18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	461a      	mov	r2, r3
 8003b28:	2308      	movs	r3, #8
 8003b2a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 ffdd 	bl	8007af6 <USB_HC_Halt>
 8003b3c:	e075      	b.n	8003c2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b54:	d134      	bne.n	8003bc0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	3361      	adds	r3, #97	; 0x61
 8003b84:	2208      	movs	r2, #8
 8003b86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	2310      	movs	r3, #16
 8003b98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 ff9c 	bl	8007af6 <USB_HC_Halt>
 8003bbe:	e034      	b.n	8003c2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b80      	cmp	r3, #128	; 0x80
 8003bd4:	d129      	bne.n	8003c2a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	0151      	lsls	r1, r2, #5
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	440a      	add	r2, r1
 8003bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	3361      	adds	r3, #97	; 0x61
 8003c04:	2206      	movs	r2, #6
 8003c06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 ff6f 	bl	8007af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	461a      	mov	r2, r3
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c40:	d122      	bne.n	8003c88 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 ff42 	bl	8007af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c84:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c86:	e2ba      	b.n	80041fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	f040 811b 	bne.w	8003ed6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d019      	beq.n	8003cdc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3348      	adds	r3, #72	; 0x48
 8003cb6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003cca:	1ad2      	subs	r2, r2, r3
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	202c      	movs	r0, #44	; 0x2c
 8003cd2:	fb00 f303 	mul.w	r3, r0, r3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3350      	adds	r3, #80	; 0x50
 8003cda:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3361      	adds	r3, #97	; 0x61
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	335c      	adds	r3, #92	; 0x5c
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2301      	movs	r3, #1
 8003d10:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	333f      	adds	r3, #63	; 0x3f
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	333f      	adds	r3, #63	; 0x3f
 8003d34:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d121      	bne.n	8003d7e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f003 fec6 	bl	8007af6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d76:	461a      	mov	r2, r3
 8003d78:	2310      	movs	r3, #16
 8003d7a:	6093      	str	r3, [r2, #8]
 8003d7c:	e066      	b.n	8003e4c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	333f      	adds	r3, #63	; 0x3f
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d127      	bne.n	8003de2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	0151      	lsls	r1, r2, #5
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	440a      	add	r2, r1
 8003da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003db0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3360      	adds	r3, #96	; 0x60
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	b2d9      	uxtb	r1, r3
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	202c      	movs	r0, #44	; 0x2c
 8003dce:	fb00 f303 	mul.w	r3, r0, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3360      	adds	r3, #96	; 0x60
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f005 f99a 	bl	8009114 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003de0:	e034      	b.n	8003e4c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	333f      	adds	r3, #63	; 0x3f
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d12a      	bne.n	8003e4c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3360      	adds	r3, #96	; 0x60
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	3354      	adds	r3, #84	; 0x54
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	f083 0301 	eor.w	r3, r3, #1
 8003e1c:	b2d8      	uxtb	r0, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3354      	adds	r3, #84	; 0x54
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	b2d9      	uxtb	r1, r3
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	202c      	movs	r0, #44	; 0x2c
 8003e3a:	fb00 f303 	mul.w	r3, r0, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3360      	adds	r3, #96	; 0x60
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f005 f964 	bl	8009114 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d12b      	bne.n	8003eac <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	3348      	adds	r3, #72	; 0x48
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	202c      	movs	r0, #44	; 0x2c
 8003e6a:	fb00 f202 	mul.w	r2, r0, r2
 8003e6e:	440a      	add	r2, r1
 8003e70:	3240      	adds	r2, #64	; 0x40
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 81be 	beq.w	80041fe <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3354      	adds	r3, #84	; 0x54
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	f083 0301 	eor.w	r3, r3, #1
 8003e96:	b2d8      	uxtb	r0, r3
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3354      	adds	r3, #84	; 0x54
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	701a      	strb	r2, [r3, #0]
}
 8003eaa:	e1a8      	b.n	80041fe <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3354      	adds	r3, #84	; 0x54
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f083 0301 	eor.w	r3, r3, #1
 8003ec0:	b2d8      	uxtb	r0, r3
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3354      	adds	r3, #84	; 0x54
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	701a      	strb	r2, [r3, #0]
}
 8003ed4:	e193      	b.n	80041fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	f040 8106 	bne.w	80040fa <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	0151      	lsls	r1, r2, #5
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	440a      	add	r2, r1
 8003f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f08:	f023 0302 	bic.w	r3, r3, #2
 8003f0c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3361      	adds	r3, #97	; 0x61
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d109      	bne.n	8003f36 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3360      	adds	r3, #96	; 0x60
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e0c9      	b.n	80040ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	3361      	adds	r3, #97	; 0x61
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d109      	bne.n	8003f5e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	3360      	adds	r3, #96	; 0x60
 8003f58:	2205      	movs	r2, #5
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e0b5      	b.n	80040ca <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	212c      	movs	r1, #44	; 0x2c
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3361      	adds	r3, #97	; 0x61
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d009      	beq.n	8003f86 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	212c      	movs	r1, #44	; 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3361      	adds	r3, #97	; 0x61
 8003f80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d150      	bne.n	8004028 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	212c      	movs	r1, #44	; 0x2c
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	335c      	adds	r3, #92	; 0x5c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	202c      	movs	r0, #44	; 0x2c
 8003f9e:	fb00 f303 	mul.w	r3, r0, r3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	335c      	adds	r3, #92	; 0x5c
 8003fa6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	335c      	adds	r3, #92	; 0x5c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d912      	bls.n	8003fe2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	335c      	adds	r3, #92	; 0x5c
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3360      	adds	r3, #96	; 0x60
 8003fdc:	2204      	movs	r2, #4
 8003fde:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fe0:	e073      	b.n	80040ca <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	3360      	adds	r3, #96	; 0x60
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800400a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004012:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004026:	e050      	b.n	80040ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	3361      	adds	r3, #97	; 0x61
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d122      	bne.n	8004082 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	3360      	adds	r3, #96	; 0x60
 800404a:	2202      	movs	r2, #2
 800404c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004064:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800406c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	461a      	mov	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	e023      	b.n	80040ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3361      	adds	r3, #97	; 0x61
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b07      	cmp	r3, #7
 8004094:	d119      	bne.n	80040ca <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	335c      	adds	r3, #92	; 0x5c
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	202c      	movs	r0, #44	; 0x2c
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	440b      	add	r3, r1
 80040b4:	335c      	adds	r3, #92	; 0x5c
 80040b6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3360      	adds	r3, #96	; 0x60
 80040c6:	2204      	movs	r2, #4
 80040c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	461a      	mov	r2, r3
 80040d8:	2302      	movs	r3, #2
 80040da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	b2d9      	uxtb	r1, r3
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	202c      	movs	r0, #44	; 0x2c
 80040e6:	fb00 f303 	mul.w	r3, r0, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	3360      	adds	r3, #96	; 0x60
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f005 f80e 	bl	8009114 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80040f8:	e081      	b.n	80041fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d176      	bne.n	80041fe <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	333f      	adds	r3, #63	; 0x3f
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d121      	bne.n	8004168 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	335c      	adds	r3, #92	; 0x5c
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	440a      	add	r2, r1
 800414c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f003 fcc8 	bl	8007af6 <USB_HC_Halt>
 8004166:	e041      	b.n	80041ec <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	212c      	movs	r1, #44	; 0x2c
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	333f      	adds	r3, #63	; 0x3f
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	333f      	adds	r3, #63	; 0x3f
 800418a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800418c:	2b02      	cmp	r3, #2
 800418e:	d12d      	bne.n	80041ec <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	335c      	adds	r3, #92	; 0x5c
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d120      	bne.n	80041ec <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	212c      	movs	r1, #44	; 0x2c
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	3361      	adds	r3, #97	; 0x61
 80041b8:	2203      	movs	r2, #3
 80041ba:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d6:	f043 0302 	orr.w	r3, r3, #2
 80041da:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f003 fc85 	bl	8007af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f8:	461a      	mov	r2, r3
 80041fa:	2310      	movs	r3, #16
 80041fc:	6093      	str	r3, [r2, #8]
}
 80041fe:	bf00      	nop
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b04      	cmp	r3, #4
 8004234:	d119      	bne.n	800426a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004242:	461a      	mov	r2, r3
 8004244:	2304      	movs	r3, #4
 8004246:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	440a      	add	r2, r1
 800425e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004262:	f043 0302 	orr.w	r3, r3, #2
 8004266:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004268:	e3ca      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b20      	cmp	r3, #32
 800427e:	d13e      	bne.n	80042fe <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	461a      	mov	r2, r3
 800428e:	2320      	movs	r3, #32
 8004290:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	212c      	movs	r1, #44	; 0x2c
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	4413      	add	r3, r2
 800429e:	333d      	adds	r3, #61	; 0x3d
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	f040 83ac 	bne.w	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	333d      	adds	r3, #61	; 0x3d
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	212c      	movs	r1, #44	; 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	3360      	adds	r3, #96	; 0x60
 80042c8:	2202      	movs	r2, #2
 80042ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042e6:	f043 0302 	orr.w	r3, r3, #2
 80042ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f003 fbfd 	bl	8007af6 <USB_HC_Halt>
}
 80042fc:	e380      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d122      	bne.n	800435c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	4413      	add	r3, r2
 800431e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	440a      	add	r2, r1
 800432c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f003 fbd8 	bl	8007af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004352:	461a      	mov	r2, r3
 8004354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004358:	6093      	str	r3, [r2, #8]
}
 800435a:	e351      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d150      	bne.n	8004414 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	335c      	adds	r3, #92	; 0x5c
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d111      	bne.n	80043be <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	333d      	adds	r3, #61	; 0x3d
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	461a      	mov	r2, r3
 80043ba:	2340      	movs	r3, #64	; 0x40
 80043bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043d8:	f043 0302 	orr.w	r3, r3, #2
 80043dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 fb84 	bl	8007af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fa:	461a      	mov	r2, r3
 80043fc:	2301      	movs	r3, #1
 80043fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3361      	adds	r3, #97	; 0x61
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
}
 8004412:	e2f5      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	4413      	add	r3, r2
 800441c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d13c      	bne.n	80044a4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	212c      	movs	r1, #44	; 0x2c
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	4413      	add	r3, r2
 8004436:	3361      	adds	r3, #97	; 0x61
 8004438:	2204      	movs	r2, #4
 800443a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	333d      	adds	r3, #61	; 0x3d
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	335c      	adds	r3, #92	; 0x5c
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	440a      	add	r2, r1
 8004476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f003 fb33 	bl	8007af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449c:	461a      	mov	r2, r3
 800449e:	2340      	movs	r3, #64	; 0x40
 80044a0:	6093      	str	r3, [r2, #8]
}
 80044a2:	e2ad      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d12a      	bne.n	8004510 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c6:	461a      	mov	r2, r3
 80044c8:	2308      	movs	r3, #8
 80044ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044e6:	f043 0302 	orr.w	r3, r3, #2
 80044ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f003 fafd 	bl	8007af6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	3361      	adds	r3, #97	; 0x61
 800450a:	2205      	movs	r2, #5
 800450c:	701a      	strb	r2, [r3, #0]
}
 800450e:	e277      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b10      	cmp	r3, #16
 8004524:	d150      	bne.n	80045c8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	212c      	movs	r1, #44	; 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	335c      	adds	r3, #92	; 0x5c
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3361      	adds	r3, #97	; 0x61
 8004546:	2203      	movs	r2, #3
 8004548:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	212c      	movs	r1, #44	; 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	333d      	adds	r3, #61	; 0x3d
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d112      	bne.n	8004584 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	333c      	adds	r3, #60	; 0x3c
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d108      	bne.n	8004584 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	333d      	adds	r3, #61	; 0x3d
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	440a      	add	r2, r1
 800459a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800459e:	f043 0302 	orr.w	r3, r3, #2
 80045a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 faa1 	bl	8007af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	2310      	movs	r3, #16
 80045c4:	6093      	str	r3, [r2, #8]
}
 80045c6:	e21b      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045da:	2b80      	cmp	r3, #128	; 0x80
 80045dc:	d174      	bne.n	80046c8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d121      	bne.n	800462a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3361      	adds	r3, #97	; 0x61
 80045f4:	2206      	movs	r2, #6
 80045f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	440a      	add	r2, r1
 800460e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004612:	f043 0302 	orr.w	r3, r3, #2
 8004616:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f003 fa67 	bl	8007af6 <USB_HC_Halt>
 8004628:	e044      	b.n	80046b4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	212c      	movs	r1, #44	; 0x2c
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	4413      	add	r3, r2
 8004636:	335c      	adds	r3, #92	; 0x5c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	202c      	movs	r0, #44	; 0x2c
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	440b      	add	r3, r1
 8004648:	335c      	adds	r3, #92	; 0x5c
 800464a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	212c      	movs	r1, #44	; 0x2c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	335c      	adds	r3, #92	; 0x5c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d920      	bls.n	80046a2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	212c      	movs	r1, #44	; 0x2c
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	4413      	add	r3, r2
 800466c:	335c      	adds	r3, #92	; 0x5c
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3360      	adds	r3, #96	; 0x60
 8004680:	2204      	movs	r2, #4
 8004682:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	b2d9      	uxtb	r1, r3
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	202c      	movs	r0, #44	; 0x2c
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	4413      	add	r3, r2
 8004694:	3360      	adds	r3, #96	; 0x60
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f004 fd3a 	bl	8009114 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046a0:	e008      	b.n	80046b4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	3360      	adds	r3, #96	; 0x60
 80046b0:	2202      	movs	r2, #2
 80046b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c0:	461a      	mov	r2, r3
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	6093      	str	r3, [r2, #8]
}
 80046c6:	e19b      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d134      	bne.n	800474a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f003 f9f3 	bl	8007af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	2310      	movs	r3, #16
 8004720:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	461a      	mov	r2, r3
 8004730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004734:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	212c      	movs	r1, #44	; 0x2c
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	3361      	adds	r3, #97	; 0x61
 8004744:	2208      	movs	r2, #8
 8004746:	701a      	strb	r2, [r3, #0]
}
 8004748:	e15a      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	f040 814f 	bne.w	8004a00 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	440a      	add	r2, r1
 8004778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800477c:	f023 0302 	bic.w	r3, r3, #2
 8004780:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3361      	adds	r3, #97	; 0x61
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d17d      	bne.n	8004892 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	3360      	adds	r3, #96	; 0x60
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	212c      	movs	r1, #44	; 0x2c
 80047ae:	fb01 f303 	mul.w	r3, r1, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	333f      	adds	r3, #63	; 0x3f
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d00a      	beq.n	80047d2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	212c      	movs	r1, #44	; 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	333f      	adds	r3, #63	; 0x3f
 80047ca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	f040 8100 	bne.w	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d113      	bne.n	8004802 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	212c      	movs	r1, #44	; 0x2c
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	3355      	adds	r3, #85	; 0x55
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	f083 0301 	eor.w	r3, r3, #1
 80047ee:	b2d8      	uxtb	r0, r3
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	3355      	adds	r3, #85	; 0x55
 80047fe:	4602      	mov	r2, r0
 8004800:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b01      	cmp	r3, #1
 8004808:	f040 80e3 	bne.w	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	334c      	adds	r3, #76	; 0x4c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80d8 	beq.w	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	212c      	movs	r1, #44	; 0x2c
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	334c      	adds	r3, #76	; 0x4c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	202c      	movs	r0, #44	; 0x2c
 8004838:	fb00 f202 	mul.w	r2, r0, r2
 800483c:	440a      	add	r2, r1
 800483e:	3240      	adds	r2, #64	; 0x40
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	4413      	add	r3, r2
 8004844:	3b01      	subs	r3, #1
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	202c      	movs	r0, #44	; 0x2c
 800484c:	fb00 f202 	mul.w	r2, r0, r2
 8004850:	440a      	add	r2, r1
 8004852:	3240      	adds	r2, #64	; 0x40
 8004854:	8812      	ldrh	r2, [r2, #0]
 8004856:	fbb3 f3f2 	udiv	r3, r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80b5 	beq.w	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	3355      	adds	r3, #85	; 0x55
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f083 0301 	eor.w	r3, r3, #1
 800487c:	b2d8      	uxtb	r0, r3
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	212c      	movs	r1, #44	; 0x2c
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	4413      	add	r3, r2
 800488a:	3355      	adds	r3, #85	; 0x55
 800488c:	4602      	mov	r2, r0
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e09f      	b.n	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	212c      	movs	r1, #44	; 0x2c
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	4413      	add	r3, r2
 800489e:	3361      	adds	r3, #97	; 0x61
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d109      	bne.n	80048ba <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	212c      	movs	r1, #44	; 0x2c
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	3360      	adds	r3, #96	; 0x60
 80048b4:	2202      	movs	r2, #2
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	e08b      	b.n	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	212c      	movs	r1, #44	; 0x2c
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	3361      	adds	r3, #97	; 0x61
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d109      	bne.n	80048e2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	212c      	movs	r1, #44	; 0x2c
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	4413      	add	r3, r2
 80048da:	3360      	adds	r3, #96	; 0x60
 80048dc:	2202      	movs	r2, #2
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	e077      	b.n	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	212c      	movs	r1, #44	; 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	3361      	adds	r3, #97	; 0x61
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d109      	bne.n	800490a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	3360      	adds	r3, #96	; 0x60
 8004904:	2205      	movs	r2, #5
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	e063      	b.n	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	212c      	movs	r1, #44	; 0x2c
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	3361      	adds	r3, #97	; 0x61
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b06      	cmp	r3, #6
 800491c:	d009      	beq.n	8004932 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	3361      	adds	r3, #97	; 0x61
 800492c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800492e:	2b08      	cmp	r3, #8
 8004930:	d14f      	bne.n	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	335c      	adds	r3, #92	; 0x5c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	202c      	movs	r0, #44	; 0x2c
 800494a:	fb00 f303 	mul.w	r3, r0, r3
 800494e:	440b      	add	r3, r1
 8004950:	335c      	adds	r3, #92	; 0x5c
 8004952:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	212c      	movs	r1, #44	; 0x2c
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	4413      	add	r3, r2
 8004960:	335c      	adds	r3, #92	; 0x5c
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d912      	bls.n	800498e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	335c      	adds	r3, #92	; 0x5c
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	3360      	adds	r3, #96	; 0x60
 8004988:	2204      	movs	r2, #4
 800498a:	701a      	strb	r2, [r3, #0]
 800498c:	e021      	b.n	80049d2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	212c      	movs	r1, #44	; 0x2c
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	3360      	adds	r3, #96	; 0x60
 800499c:	2202      	movs	r2, #2
 800499e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049b6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049be:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049cc:	461a      	mov	r2, r3
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049de:	461a      	mov	r2, r3
 80049e0:	2302      	movs	r3, #2
 80049e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	b2d9      	uxtb	r1, r3
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	202c      	movs	r0, #44	; 0x2c
 80049ee:	fb00 f303 	mul.w	r3, r0, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	3360      	adds	r3, #96	; 0x60
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f004 fb8a 	bl	8009114 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004a00:	bf00      	nop
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	0c5b      	lsrs	r3, r3, #17
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	091b      	lsrs	r3, r3, #4
 8004a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a3c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d004      	beq.n	8004a4e <HCD_RXQLVL_IRQHandler+0x46>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	f000 80a9 	beq.w	8004b9e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a4c:	e0aa      	b.n	8004ba4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a6 	beq.w	8004ba2 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	212c      	movs	r1, #44	; 0x2c
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	3344      	adds	r3, #68	; 0x44
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 809b 	beq.w	8004ba2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	212c      	movs	r1, #44	; 0x2c
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	3350      	adds	r3, #80	; 0x50
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	441a      	add	r2, r3
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	202c      	movs	r0, #44	; 0x2c
 8004a86:	fb00 f303 	mul.w	r3, r0, r3
 8004a8a:	440b      	add	r3, r1
 8004a8c:	334c      	adds	r3, #76	; 0x4c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d87a      	bhi.n	8004b8a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3344      	adds	r3, #68	; 0x44
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	f002 fbc5 	bl	800723c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	212c      	movs	r1, #44	; 0x2c
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	3344      	adds	r3, #68	; 0x44
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	441a      	add	r2, r3
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	202c      	movs	r0, #44	; 0x2c
 8004acc:	fb00 f303 	mul.w	r3, r0, r3
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3344      	adds	r3, #68	; 0x44
 8004ad4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	212c      	movs	r1, #44	; 0x2c
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3350      	adds	r3, #80	; 0x50
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	441a      	add	r2, r3
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	202c      	movs	r0, #44	; 0x2c
 8004af0:	fb00 f303 	mul.w	r3, r0, r3
 8004af4:	440b      	add	r3, r1
 8004af6:	3350      	adds	r3, #80	; 0x50
 8004af8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	0cdb      	lsrs	r3, r3, #19
 8004b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b0e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	212c      	movs	r1, #44	; 0x2c
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3340      	adds	r3, #64	; 0x40
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d13c      	bne.n	8004ba2 <HCD_RXQLVL_IRQHandler+0x19a>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d039      	beq.n	8004ba2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b44:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b4c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	212c      	movs	r1, #44	; 0x2c
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3354      	adds	r3, #84	; 0x54
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f083 0301 	eor.w	r3, r3, #1
 8004b74:	b2d8      	uxtb	r0, r3
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	3354      	adds	r3, #84	; 0x54
 8004b84:	4602      	mov	r2, r0
 8004b86:	701a      	strb	r2, [r3, #0]
      break;
 8004b88:	e00b      	b.n	8004ba2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	212c      	movs	r1, #44	; 0x2c
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	3360      	adds	r3, #96	; 0x60
 8004b98:	2204      	movs	r2, #4
 8004b9a:	701a      	strb	r2, [r3, #0]
      break;
 8004b9c:	e001      	b.n	8004ba2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004ba2:	bf00      	nop
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	3728      	adds	r7, #40	; 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bd8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d10b      	bne.n	8004bfc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d102      	bne.n	8004bf4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f004 fa74 	bl	80090dc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d132      	bne.n	8004c6c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d126      	bne.n	8004c66 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d113      	bne.n	8004c48 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c2a:	d106      	bne.n	8004c3a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2102      	movs	r1, #2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f002 fc62 	bl	80074fc <USB_InitFSLSPClkSel>
 8004c38:	e011      	b.n	8004c5e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4618      	mov	r0, r3
 8004c42:	f002 fc5b 	bl	80074fc <USB_InitFSLSPClkSel>
 8004c46:	e00a      	b.n	8004c5e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c56:	461a      	mov	r2, r3
 8004c58:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004c5c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f004 fa66 	bl	8009130 <HAL_HCD_PortEnabled_Callback>
 8004c64:	e002      	b.n	8004c6c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f004 fa70 	bl	800914c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d103      	bne.n	8004c7e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f043 0320 	orr.w	r3, r3, #32
 8004c7c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c84:	461a      	mov	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6013      	str	r3, [r2, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e12b      	b.n	8004efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd f8ba 	bl	8001e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2224      	movs	r2, #36	; 0x24
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0201 	bic.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f001 f864 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8004cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4a81      	ldr	r2, [pc, #516]	; (8004f08 <HAL_I2C_Init+0x274>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d807      	bhi.n	8004d18 <HAL_I2C_Init+0x84>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a80      	ldr	r2, [pc, #512]	; (8004f0c <HAL_I2C_Init+0x278>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bf94      	ite	ls
 8004d10:	2301      	movls	r3, #1
 8004d12:	2300      	movhi	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	e006      	b.n	8004d26 <HAL_I2C_Init+0x92>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a7d      	ldr	r2, [pc, #500]	; (8004f10 <HAL_I2C_Init+0x27c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bf94      	ite	ls
 8004d20:	2301      	movls	r3, #1
 8004d22:	2300      	movhi	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0e7      	b.n	8004efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a78      	ldr	r2, [pc, #480]	; (8004f14 <HAL_I2C_Init+0x280>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	0c9b      	lsrs	r3, r3, #18
 8004d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a6a      	ldr	r2, [pc, #424]	; (8004f08 <HAL_I2C_Init+0x274>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d802      	bhi.n	8004d68 <HAL_I2C_Init+0xd4>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	e009      	b.n	8004d7c <HAL_I2C_Init+0xe8>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	4a69      	ldr	r2, [pc, #420]	; (8004f18 <HAL_I2C_Init+0x284>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	495c      	ldr	r1, [pc, #368]	; (8004f08 <HAL_I2C_Init+0x274>)
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	d819      	bhi.n	8004dd0 <HAL_I2C_Init+0x13c>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e59      	subs	r1, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004daa:	1c59      	adds	r1, r3, #1
 8004dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004db0:	400b      	ands	r3, r1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_I2C_Init+0x138>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1e59      	subs	r1, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dca:	e051      	b.n	8004e70 <HAL_I2C_Init+0x1dc>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	e04f      	b.n	8004e70 <HAL_I2C_Init+0x1dc>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d111      	bne.n	8004dfc <HAL_I2C_Init+0x168>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1e58      	subs	r0, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	440b      	add	r3, r1
 8004de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dea:	3301      	adds	r3, #1
 8004dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	e012      	b.n	8004e22 <HAL_I2C_Init+0x18e>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1e58      	subs	r0, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6859      	ldr	r1, [r3, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	0099      	lsls	r1, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e12:	3301      	adds	r3, #1
 8004e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Init+0x196>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e022      	b.n	8004e70 <HAL_I2C_Init+0x1dc>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10e      	bne.n	8004e50 <HAL_I2C_Init+0x1bc>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1e58      	subs	r0, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	440b      	add	r3, r1
 8004e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e44:	3301      	adds	r3, #1
 8004e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4e:	e00f      	b.n	8004e70 <HAL_I2C_Init+0x1dc>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	1e58      	subs	r0, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	0099      	lsls	r1, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e66:	3301      	adds	r3, #1
 8004e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	6809      	ldr	r1, [r1, #0]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6911      	ldr	r1, [r2, #16]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68d2      	ldr	r2, [r2, #12]
 8004eaa:	4311      	orrs	r1, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	000186a0 	.word	0x000186a0
 8004f0c:	001e847f 	.word	0x001e847f
 8004f10:	003d08ff 	.word	0x003d08ff
 8004f14:	431bde83 	.word	0x431bde83
 8004f18:	10624dd3 	.word	0x10624dd3

08004f1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	461a      	mov	r2, r3
 8004f28:	460b      	mov	r3, r1
 8004f2a:	817b      	strh	r3, [r7, #10]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f30:	f7fd fa4e 	bl	80023d0 <HAL_GetTick>
 8004f34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	f040 80e0 	bne.w	8005104 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2319      	movs	r3, #25
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	4970      	ldr	r1, [pc, #448]	; (8005110 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f964 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e0d3      	b.n	8005106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_I2C_Master_Transmit+0x50>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e0cc      	b.n	8005106 <HAL_I2C_Master_Transmit+0x1ea>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d007      	beq.n	8004f92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2221      	movs	r2, #33	; 0x21
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2210      	movs	r2, #16
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	893a      	ldrh	r2, [r7, #8]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a50      	ldr	r2, [pc, #320]	; (8005114 <HAL_I2C_Master_Transmit+0x1f8>)
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fd4:	8979      	ldrh	r1, [r7, #10]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f89c 	bl	8005118 <I2C_MasterRequestWrite>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e08d      	b.n	8005106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005000:	e066      	b.n	80050d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	6a39      	ldr	r1, [r7, #32]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f9de 	bl	80053c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b04      	cmp	r3, #4
 8005018:	d107      	bne.n	800502a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e06b      	b.n	8005106 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d11b      	bne.n	80050a4 <HAL_I2C_Master_Transmit+0x188>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d017      	beq.n	80050a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	6a39      	ldr	r1, [r7, #32]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f9ce 	bl	800544a <I2C_WaitOnBTFFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00d      	beq.n	80050d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d107      	bne.n	80050cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e01a      	b.n	8005106 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d194      	bne.n	8005002 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	00100002 	.word	0x00100002
 8005114:	ffff0000 	.word	0xffff0000

08005118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	460b      	mov	r3, r1
 8005126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d006      	beq.n	8005142 <I2C_MasterRequestWrite+0x2a>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d003      	beq.n	8005142 <I2C_MasterRequestWrite+0x2a>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005140:	d108      	bne.n	8005154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e00b      	b.n	800516c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	2b12      	cmp	r3, #18
 800515a:	d107      	bne.n	800516c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f84f 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005192:	d103      	bne.n	800519c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e035      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a8:	d108      	bne.n	80051bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	e01b      	b.n	80051f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051bc:	897b      	ldrh	r3, [r7, #10]
 80051be:	11db      	asrs	r3, r3, #7
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0306 	and.w	r3, r3, #6
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f063 030f 	orn	r3, r3, #15
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	490e      	ldr	r1, [pc, #56]	; (8005214 <I2C_MasterRequestWrite+0xfc>)
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f875 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e010      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4907      	ldr	r1, [pc, #28]	; (8005218 <I2C_MasterRequestWrite+0x100>)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f865 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	00010008 	.word	0x00010008
 8005218:	00010002 	.word	0x00010002

0800521c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522c:	e025      	b.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d021      	beq.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fd f8cb 	bl	80023d0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e023      	b.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d10d      	bne.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	43da      	mvns	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf0c      	ite	eq
 8005296:	2301      	moveq	r3, #1
 8005298:	2300      	movne	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	e00c      	b.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	43da      	mvns	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d0b6      	beq.n	800522e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d8:	e051      	b.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d123      	bne.n	8005332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005302:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0204 	orr.w	r2, r3, #4
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e046      	b.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d021      	beq.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fd f849 	bl	80023d0 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d116      	bne.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e020      	b.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10c      	bne.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	43da      	mvns	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf14      	ite	ne
 800539a:	2301      	movne	r3, #1
 800539c:	2300      	moveq	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e00b      	b.n	80053ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d18d      	bne.n	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d4:	e02d      	b.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f878 	bl	80054cc <I2C_IsAcknowledgeFailed>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e02d      	b.n	8005442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d021      	beq.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fc ffef 	bl	80023d0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d116      	bne.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e007      	b.n	8005442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d1ca      	bne.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005456:	e02d      	b.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f837 	bl	80054cc <I2C_IsAcknowledgeFailed>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e02d      	b.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d021      	beq.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005470:	f7fc ffae 	bl	80023d0 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e007      	b.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d1ca      	bne.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d11b      	bne.n	800551c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e264      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d075      	beq.n	8005636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800554a:	4ba3      	ldr	r3, [pc, #652]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	2b04      	cmp	r3, #4
 8005554:	d00c      	beq.n	8005570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005556:	4ba0      	ldr	r3, [pc, #640]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800555e:	2b08      	cmp	r3, #8
 8005560:	d112      	bne.n	8005588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005562:	4b9d      	ldr	r3, [pc, #628]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556e:	d10b      	bne.n	8005588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005570:	4b99      	ldr	r3, [pc, #612]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d05b      	beq.n	8005634 <HAL_RCC_OscConfig+0x108>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d157      	bne.n	8005634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e23f      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005590:	d106      	bne.n	80055a0 <HAL_RCC_OscConfig+0x74>
 8005592:	4b91      	ldr	r3, [pc, #580]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a90      	ldr	r2, [pc, #576]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e01d      	b.n	80055dc <HAL_RCC_OscConfig+0xb0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCC_OscConfig+0x98>
 80055aa:	4b8b      	ldr	r3, [pc, #556]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a8a      	ldr	r2, [pc, #552]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	4b88      	ldr	r3, [pc, #544]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a87      	ldr	r2, [pc, #540]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e00b      	b.n	80055dc <HAL_RCC_OscConfig+0xb0>
 80055c4:	4b84      	ldr	r3, [pc, #528]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a83      	ldr	r2, [pc, #524]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80055ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	4b81      	ldr	r3, [pc, #516]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a80      	ldr	r2, [pc, #512]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80055d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d013      	beq.n	800560c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7fc fef4 	bl	80023d0 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ec:	f7fc fef0 	bl	80023d0 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e204      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fe:	4b76      	ldr	r3, [pc, #472]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0xc0>
 800560a:	e014      	b.n	8005636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7fc fee0 	bl	80023d0 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005614:	f7fc fedc 	bl	80023d0 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b64      	cmp	r3, #100	; 0x64
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e1f0      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005626:	4b6c      	ldr	r3, [pc, #432]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0xe8>
 8005632:	e000      	b.n	8005636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d063      	beq.n	800570a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005642:	4b65      	ldr	r3, [pc, #404]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800564e:	4b62      	ldr	r3, [pc, #392]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005656:	2b08      	cmp	r3, #8
 8005658:	d11c      	bne.n	8005694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565a:	4b5f      	ldr	r3, [pc, #380]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d116      	bne.n	8005694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005666:	4b5c      	ldr	r3, [pc, #368]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <HAL_RCC_OscConfig+0x152>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d001      	beq.n	800567e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e1c4      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567e:	4b56      	ldr	r3, [pc, #344]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4952      	ldr	r1, [pc, #328]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005692:	e03a      	b.n	800570a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d020      	beq.n	80056de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800569c:	4b4f      	ldr	r3, [pc, #316]	; (80057dc <HAL_RCC_OscConfig+0x2b0>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fc fe95 	bl	80023d0 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056aa:	f7fc fe91 	bl	80023d0 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e1a5      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056bc:	4b46      	ldr	r3, [pc, #280]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c8:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4940      	ldr	r1, [pc, #256]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	600b      	str	r3, [r1, #0]
 80056dc:	e015      	b.n	800570a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056de:	4b3f      	ldr	r3, [pc, #252]	; (80057dc <HAL_RCC_OscConfig+0x2b0>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e4:	f7fc fe74 	bl	80023d0 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ec:	f7fc fe70 	bl	80023d0 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e184      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fe:	4b36      	ldr	r3, [pc, #216]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d030      	beq.n	8005778 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800571e:	4b30      	ldr	r3, [pc, #192]	; (80057e0 <HAL_RCC_OscConfig+0x2b4>)
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fc fe54 	bl	80023d0 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800572c:	f7fc fe50 	bl	80023d0 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e164      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573e:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 8005740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x200>
 800574a:	e015      	b.n	8005778 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800574c:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <HAL_RCC_OscConfig+0x2b4>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005752:	f7fc fe3d 	bl	80023d0 <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800575a:	f7fc fe39 	bl	80023d0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e14d      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 800576e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80a0 	beq.w	80058c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578a:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	4a0e      	ldr	r2, [pc, #56]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a4:	6413      	str	r3, [r2, #64]	; 0x40
 80057a6:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <HAL_RCC_OscConfig+0x2b8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d121      	bne.n	8005806 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <HAL_RCC_OscConfig+0x2b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a07      	ldr	r2, [pc, #28]	; (80057e4 <HAL_RCC_OscConfig+0x2b8>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ce:	f7fc fdff 	bl	80023d0 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d4:	e011      	b.n	80057fa <HAL_RCC_OscConfig+0x2ce>
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
 80057dc:	42470000 	.word	0x42470000
 80057e0:	42470e80 	.word	0x42470e80
 80057e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e8:	f7fc fdf2 	bl	80023d0 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e106      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fa:	4b85      	ldr	r3, [pc, #532]	; (8005a10 <HAL_RCC_OscConfig+0x4e4>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d106      	bne.n	800581c <HAL_RCC_OscConfig+0x2f0>
 800580e:	4b81      	ldr	r3, [pc, #516]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a80      	ldr	r2, [pc, #512]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
 800581a:	e01c      	b.n	8005856 <HAL_RCC_OscConfig+0x32a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b05      	cmp	r3, #5
 8005822:	d10c      	bne.n	800583e <HAL_RCC_OscConfig+0x312>
 8005824:	4b7b      	ldr	r3, [pc, #492]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a7a      	ldr	r2, [pc, #488]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 800582a:	f043 0304 	orr.w	r3, r3, #4
 800582e:	6713      	str	r3, [r2, #112]	; 0x70
 8005830:	4b78      	ldr	r3, [pc, #480]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4a77      	ldr	r2, [pc, #476]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
 800583c:	e00b      	b.n	8005856 <HAL_RCC_OscConfig+0x32a>
 800583e:	4b75      	ldr	r3, [pc, #468]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	4a74      	ldr	r2, [pc, #464]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	6713      	str	r3, [r2, #112]	; 0x70
 800584a:	4b72      	ldr	r3, [pc, #456]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	4a71      	ldr	r2, [pc, #452]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d015      	beq.n	800588a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585e:	f7fc fdb7 	bl	80023d0 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005864:	e00a      	b.n	800587c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005866:	f7fc fdb3 	bl	80023d0 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f241 3288 	movw	r2, #5000	; 0x1388
 8005874:	4293      	cmp	r3, r2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e0c5      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587c:	4b65      	ldr	r3, [pc, #404]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 800587e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ee      	beq.n	8005866 <HAL_RCC_OscConfig+0x33a>
 8005888:	e014      	b.n	80058b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588a:	f7fc fda1 	bl	80023d0 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fc fd9d 	bl	80023d0 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e0af      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a8:	4b5a      	ldr	r3, [pc, #360]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ee      	bne.n	8005892 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ba:	4b56      	ldr	r3, [pc, #344]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a55      	ldr	r2, [pc, #340]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 80058c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 809b 	beq.w	8005a06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058d0:	4b50      	ldr	r3, [pc, #320]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 030c 	and.w	r3, r3, #12
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d05c      	beq.n	8005996 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d141      	bne.n	8005968 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e4:	4b4c      	ldr	r3, [pc, #304]	; (8005a18 <HAL_RCC_OscConfig+0x4ec>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ea:	f7fc fd71 	bl	80023d0 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f2:	f7fc fd6d 	bl	80023d0 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e081      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005904:	4b43      	ldr	r3, [pc, #268]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f0      	bne.n	80058f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	019b      	lsls	r3, r3, #6
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	3b01      	subs	r3, #1
 800592a:	041b      	lsls	r3, r3, #16
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	061b      	lsls	r3, r3, #24
 8005934:	4937      	ldr	r1, [pc, #220]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593a:	4b37      	ldr	r3, [pc, #220]	; (8005a18 <HAL_RCC_OscConfig+0x4ec>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005940:	f7fc fd46 	bl	80023d0 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005948:	f7fc fd42 	bl	80023d0 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e056      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800595a:	4b2e      	ldr	r3, [pc, #184]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x41c>
 8005966:	e04e      	b.n	8005a06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <HAL_RCC_OscConfig+0x4ec>)
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596e:	f7fc fd2f 	bl	80023d0 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005976:	f7fc fd2b 	bl	80023d0 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e03f      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005988:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f0      	bne.n	8005976 <HAL_RCC_OscConfig+0x44a>
 8005994:	e037      	b.n	8005a06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e032      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <HAL_RCC_OscConfig+0x4e8>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d028      	beq.n	8005a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d121      	bne.n	8005a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d11a      	bne.n	8005a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059d2:	4013      	ands	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059da:	4293      	cmp	r3, r2
 80059dc:	d111      	bne.n	8005a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	3b01      	subs	r3, #1
 80059ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d001      	beq.n	8005a06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40007000 	.word	0x40007000
 8005a14:	40023800 	.word	0x40023800
 8005a18:	42470060 	.word	0x42470060

08005a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0cc      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a30:	4b68      	ldr	r3, [pc, #416]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d90c      	bls.n	8005a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b65      	ldr	r3, [pc, #404]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0b8      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a70:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4a58      	ldr	r2, [pc, #352]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a88:	4b53      	ldr	r3, [pc, #332]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4a52      	ldr	r2, [pc, #328]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a94:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	494d      	ldr	r1, [pc, #308]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d044      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	4b47      	ldr	r3, [pc, #284]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d119      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e07f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d003      	beq.n	8005ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d107      	bne.n	8005aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e06f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aea:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e067      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005afa:	4b37      	ldr	r3, [pc, #220]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f023 0203 	bic.w	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4934      	ldr	r1, [pc, #208]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b0c:	f7fc fc60 	bl	80023d0 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b14:	f7fc fc5c 	bl	80023d0 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e04f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2a:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 020c 	and.w	r2, r3, #12
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d1eb      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d20c      	bcs.n	8005b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b52:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e032      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4916      	ldr	r1, [pc, #88]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b8e:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	490e      	ldr	r1, [pc, #56]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ba2:	f000 f821 	bl	8005be8 <HAL_RCC_GetSysClockFreq>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	490a      	ldr	r1, [pc, #40]	; (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005bb4:	5ccb      	ldrb	r3, [r1, r3]
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fc fbc0 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40023c00 	.word	0x40023c00
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	0800983c 	.word	0x0800983c
 8005be0:	20000014 	.word	0x20000014
 8005be4:	20000018 	.word	0x20000018

08005be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c00:	4b67      	ldr	r3, [pc, #412]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 030c 	and.w	r3, r3, #12
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d00d      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x40>
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	f200 80bd 	bhi.w	8005d8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0x34>
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d003      	beq.n	8005c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c1a:	e0b7      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c1c:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c1e:	60bb      	str	r3, [r7, #8]
       break;
 8005c20:	e0b7      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c22:	4b61      	ldr	r3, [pc, #388]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005c24:	60bb      	str	r3, [r7, #8]
      break;
 8005c26:	e0b4      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c28:	4b5d      	ldr	r3, [pc, #372]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c32:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d04d      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c3e:	4b58      	ldr	r3, [pc, #352]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	099b      	lsrs	r3, r3, #6
 8005c44:	461a      	mov	r2, r3
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c4e:	f04f 0100 	mov.w	r1, #0
 8005c52:	ea02 0800 	and.w	r8, r2, r0
 8005c56:	ea03 0901 	and.w	r9, r3, r1
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	014b      	lsls	r3, r1, #5
 8005c68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c6c:	0142      	lsls	r2, r0, #5
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	ebb0 0008 	subs.w	r0, r0, r8
 8005c76:	eb61 0109 	sbc.w	r1, r1, r9
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	018b      	lsls	r3, r1, #6
 8005c84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c88:	0182      	lsls	r2, r0, #6
 8005c8a:	1a12      	subs	r2, r2, r0
 8005c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8005c90:	f04f 0000 	mov.w	r0, #0
 8005c94:	f04f 0100 	mov.w	r1, #0
 8005c98:	00d9      	lsls	r1, r3, #3
 8005c9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c9e:	00d0      	lsls	r0, r2, #3
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	eb12 0208 	adds.w	r2, r2, r8
 8005ca8:	eb43 0309 	adc.w	r3, r3, r9
 8005cac:	f04f 0000 	mov.w	r0, #0
 8005cb0:	f04f 0100 	mov.w	r1, #0
 8005cb4:	0259      	lsls	r1, r3, #9
 8005cb6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005cba:	0250      	lsls	r0, r2, #9
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	f7fa fdb2 	bl	8000834 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e04a      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cda:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	099b      	lsrs	r3, r3, #6
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	ea02 0400 	and.w	r4, r2, r0
 8005cf2:	ea03 0501 	and.w	r5, r3, r1
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	014b      	lsls	r3, r1, #5
 8005d04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d08:	0142      	lsls	r2, r0, #5
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	1b00      	subs	r0, r0, r4
 8005d10:	eb61 0105 	sbc.w	r1, r1, r5
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	018b      	lsls	r3, r1, #6
 8005d1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d22:	0182      	lsls	r2, r0, #6
 8005d24:	1a12      	subs	r2, r2, r0
 8005d26:	eb63 0301 	sbc.w	r3, r3, r1
 8005d2a:	f04f 0000 	mov.w	r0, #0
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	00d9      	lsls	r1, r3, #3
 8005d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d38:	00d0      	lsls	r0, r2, #3
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	1912      	adds	r2, r2, r4
 8005d40:	eb45 0303 	adc.w	r3, r5, r3
 8005d44:	f04f 0000 	mov.w	r0, #0
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	0299      	lsls	r1, r3, #10
 8005d4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d52:	0290      	lsls	r0, r2, #10
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	f7fa fd66 	bl	8000834 <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	60bb      	str	r3, [r7, #8]
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d8e:	60bb      	str	r3, [r7, #8]
      break;
 8005d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d92:	68bb      	ldr	r3, [r7, #8]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d9e:	bf00      	nop
 8005da0:	40023800 	.word	0x40023800
 8005da4:	00f42400 	.word	0x00f42400
 8005da8:	007a1200 	.word	0x007a1200

08005dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db0:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000014 	.word	0x20000014

08005dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dc8:	f7ff fff0 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	0a9b      	lsrs	r3, r3, #10
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	4903      	ldr	r1, [pc, #12]	; (8005de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dda:	5ccb      	ldrb	r3, [r1, r3]
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40023800 	.word	0x40023800
 8005de8:	0800984c 	.word	0x0800984c

08005dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e07b      	b.n	8005ef6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d108      	bne.n	8005e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e0e:	d009      	beq.n	8005e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	61da      	str	r2, [r3, #28]
 8005e16:	e005      	b.n	8005e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fc f840 	bl	8001ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	ea42 0103 	orr.w	r1, r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	f003 0104 	and.w	r1, r3, #4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	f003 0210 	and.w	r2, r3, #16
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e041      	b.n	8005f94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fc f815 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f000 fd11 	bl	8006964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d001      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e04e      	b.n	8006052 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a23      	ldr	r2, [pc, #140]	; (8006060 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d022      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d01d      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d018      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1e      	ldr	r2, [pc, #120]	; (8006068 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1c      	ldr	r2, [pc, #112]	; (800606c <HAL_TIM_Base_Start_IT+0xd0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00e      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1b      	ldr	r2, [pc, #108]	; (8006070 <HAL_TIM_Base_Start_IT+0xd4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_TIM_Base_Start_IT+0xd8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a18      	ldr	r2, [pc, #96]	; (8006078 <HAL_TIM_Base_Start_IT+0xdc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d111      	bne.n	8006040 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b06      	cmp	r3, #6
 800602c:	d010      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603e:	e007      	b.n	8006050 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40010000 	.word	0x40010000
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40010400 	.word	0x40010400
 8006074:	40014000 	.word	0x40014000
 8006078:	40001800 	.word	0x40001800

0800607c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	f241 1311 	movw	r3, #4369	; 0x1111
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10f      	bne.n	80060c4 <HAL_TIM_Base_Stop_IT+0x48>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a1a      	ldr	r2, [r3, #32]
 80060aa:	f240 4344 	movw	r3, #1092	; 0x444
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <HAL_TIM_Base_Stop_IT+0x48>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0201 	bic.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e041      	b.n	8006170 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7fb ffd5 	bl	80020b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f000 fc23 	bl	8006964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_TIM_IC_Start_IT+0x1e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006192:	b2db      	uxtb	r3, r3
 8006194:	e013      	b.n	80061be <HAL_TIM_IC_Start_IT+0x46>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b04      	cmp	r3, #4
 800619a:	d104      	bne.n	80061a6 <HAL_TIM_IC_Start_IT+0x2e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e00b      	b.n	80061be <HAL_TIM_IC_Start_IT+0x46>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_IC_Start_IT+0x3e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	e003      	b.n	80061be <HAL_TIM_IC_Start_IT+0x46>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <HAL_TIM_IC_Start_IT+0x58>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e013      	b.n	80061f8 <HAL_TIM_IC_Start_IT+0x80>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d104      	bne.n	80061e0 <HAL_TIM_IC_Start_IT+0x68>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e00b      	b.n	80061f8 <HAL_TIM_IC_Start_IT+0x80>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d104      	bne.n	80061f0 <HAL_TIM_IC_Start_IT+0x78>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e003      	b.n	80061f8 <HAL_TIM_IC_Start_IT+0x80>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d102      	bne.n	8006206 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006200:	7b7b      	ldrb	r3, [r7, #13]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d001      	beq.n	800620a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e0cc      	b.n	80063a4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_TIM_IC_Start_IT+0xa2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006218:	e013      	b.n	8006242 <HAL_TIM_IC_Start_IT+0xca>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d104      	bne.n	800622a <HAL_TIM_IC_Start_IT+0xb2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006228:	e00b      	b.n	8006242 <HAL_TIM_IC_Start_IT+0xca>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d104      	bne.n	800623a <HAL_TIM_IC_Start_IT+0xc2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	e003      	b.n	8006242 <HAL_TIM_IC_Start_IT+0xca>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <HAL_TIM_IC_Start_IT+0xda>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006250:	e013      	b.n	800627a <HAL_TIM_IC_Start_IT+0x102>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b04      	cmp	r3, #4
 8006256:	d104      	bne.n	8006262 <HAL_TIM_IC_Start_IT+0xea>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006260:	e00b      	b.n	800627a <HAL_TIM_IC_Start_IT+0x102>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d104      	bne.n	8006272 <HAL_TIM_IC_Start_IT+0xfa>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006270:	e003      	b.n	800627a <HAL_TIM_IC_Start_IT+0x102>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d841      	bhi.n	8006304 <HAL_TIM_IC_Start_IT+0x18c>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <HAL_TIM_IC_Start_IT+0x110>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080062bd 	.word	0x080062bd
 800628c:	08006305 	.word	0x08006305
 8006290:	08006305 	.word	0x08006305
 8006294:	08006305 	.word	0x08006305
 8006298:	080062cf 	.word	0x080062cf
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006305 	.word	0x08006305
 80062a4:	08006305 	.word	0x08006305
 80062a8:	080062e1 	.word	0x080062e1
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006305 	.word	0x08006305
 80062b8:	080062f3 	.word	0x080062f3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0202 	orr.w	r2, r2, #2
 80062ca:	60da      	str	r2, [r3, #12]
      break;
 80062cc:	e01d      	b.n	800630a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0204 	orr.w	r2, r2, #4
 80062dc:	60da      	str	r2, [r3, #12]
      break;
 80062de:	e014      	b.n	800630a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0208 	orr.w	r2, r2, #8
 80062ee:	60da      	str	r2, [r3, #12]
      break;
 80062f0:	e00b      	b.n	800630a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0210 	orr.w	r2, r2, #16
 8006300:	60da      	str	r2, [r3, #12]
      break;
 8006302:	e002      	b.n	800630a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	bf00      	nop
  }

  if (status == HAL_OK)
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d148      	bne.n	80063a2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2201      	movs	r2, #1
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f000 fd87 	bl	8006e2c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a22      	ldr	r2, [pc, #136]	; (80063ac <HAL_TIM_IC_Start_IT+0x234>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d022      	beq.n	800636e <HAL_TIM_IC_Start_IT+0x1f6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006330:	d01d      	beq.n	800636e <HAL_TIM_IC_Start_IT+0x1f6>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_TIM_IC_Start_IT+0x238>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d018      	beq.n	800636e <HAL_TIM_IC_Start_IT+0x1f6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1c      	ldr	r2, [pc, #112]	; (80063b4 <HAL_TIM_IC_Start_IT+0x23c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <HAL_TIM_IC_Start_IT+0x1f6>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <HAL_TIM_IC_Start_IT+0x240>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00e      	beq.n	800636e <HAL_TIM_IC_Start_IT+0x1f6>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a19      	ldr	r2, [pc, #100]	; (80063bc <HAL_TIM_IC_Start_IT+0x244>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d009      	beq.n	800636e <HAL_TIM_IC_Start_IT+0x1f6>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_TIM_IC_Start_IT+0x248>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <HAL_TIM_IC_Start_IT+0x1f6>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <HAL_TIM_IC_Start_IT+0x24c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d111      	bne.n	8006392 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b06      	cmp	r3, #6
 800637e:	d010      	beq.n	80063a2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006390:	e007      	b.n	80063a2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40000c00 	.word	0x40000c00
 80063bc:	40010400 	.word	0x40010400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40001800 	.word	0x40001800

080063c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d122      	bne.n	8006424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d11b      	bne.n	8006424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0202 	mvn.w	r2, #2
 80063f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fa fcea 	bl	8000de4 <HAL_TIM_IC_CaptureCallback>
 8006410:	e005      	b.n	800641e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa88 	bl	8006928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fa8f 	bl	800693c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b04      	cmp	r3, #4
 8006430:	d122      	bne.n	8006478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b04      	cmp	r3, #4
 800643e:	d11b      	bne.n	8006478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0204 	mvn.w	r2, #4
 8006448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fa fcc0 	bl	8000de4 <HAL_TIM_IC_CaptureCallback>
 8006464:	e005      	b.n	8006472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa5e 	bl	8006928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fa65 	bl	800693c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b08      	cmp	r3, #8
 8006484:	d122      	bne.n	80064cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b08      	cmp	r3, #8
 8006492:	d11b      	bne.n	80064cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0208 	mvn.w	r2, #8
 800649c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2204      	movs	r2, #4
 80064a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fa fc96 	bl	8000de4 <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa34 	bl	8006928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fa3b 	bl	800693c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0210 	mvn.w	r2, #16
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2208      	movs	r2, #8
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fa fc6c 	bl	8000de4 <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa0a 	bl	8006928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fa11 	bl	800693c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d10e      	bne.n	800654c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d107      	bne.n	800654c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0201 	mvn.w	r2, #1
 8006544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fa fcbe 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d10e      	bne.n	8006578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d107      	bne.n	8006578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fd06 	bl	8006f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d10e      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	d107      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9d6 	bl	8006950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d10e      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d107      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0220 	mvn.w	r2, #32
 80065c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fcd0 	bl	8006f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e088      	b.n	8006708 <HAL_TIM_IC_ConfigChannel+0x130>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d11b      	bne.n	800663c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6819      	ldr	r1, [r3, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f000 fa46 	bl	8006aa4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 020c 	bic.w	r2, r2, #12
 8006626:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	619a      	str	r2, [r3, #24]
 800663a:	e060      	b.n	80066fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b04      	cmp	r3, #4
 8006640:	d11c      	bne.n	800667c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f000 faca 	bl	8006bea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006664:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6999      	ldr	r1, [r3, #24]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	021a      	lsls	r2, r3, #8
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	619a      	str	r2, [r3, #24]
 800667a:	e040      	b.n	80066fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b08      	cmp	r3, #8
 8006680:	d11b      	bne.n	80066ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6819      	ldr	r1, [r3, #0]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f000 fb17 	bl	8006cc4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 020c 	bic.w	r2, r2, #12
 80066a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69d9      	ldr	r1, [r3, #28]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	61da      	str	r2, [r3, #28]
 80066b8:	e021      	b.n	80066fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b0c      	cmp	r3, #12
 80066be:	d11c      	bne.n	80066fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6819      	ldr	r1, [r3, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f000 fb34 	bl	8006d3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69da      	ldr	r2, [r3, #28]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69d9      	ldr	r1, [r3, #28]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	021a      	lsls	r2, r3, #8
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	61da      	str	r2, [r3, #28]
 80066f8:	e001      	b.n	80066fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006706:	7dfb      	ldrb	r3, [r7, #23]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_TIM_ConfigClockSource+0x1c>
 8006728:	2302      	movs	r3, #2
 800672a:	e0b4      	b.n	8006896 <HAL_TIM_ConfigClockSource+0x186>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800674a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006764:	d03e      	beq.n	80067e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	f200 8087 	bhi.w	800687c <HAL_TIM_ConfigClockSource+0x16c>
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006772:	f000 8086 	beq.w	8006882 <HAL_TIM_ConfigClockSource+0x172>
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677a:	d87f      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 800677c:	2b70      	cmp	r3, #112	; 0x70
 800677e:	d01a      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006780:	2b70      	cmp	r3, #112	; 0x70
 8006782:	d87b      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 8006784:	2b60      	cmp	r3, #96	; 0x60
 8006786:	d050      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x11a>
 8006788:	2b60      	cmp	r3, #96	; 0x60
 800678a:	d877      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 800678c:	2b50      	cmp	r3, #80	; 0x50
 800678e:	d03c      	beq.n	800680a <HAL_TIM_ConfigClockSource+0xfa>
 8006790:	2b50      	cmp	r3, #80	; 0x50
 8006792:	d873      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d058      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x13a>
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d86f      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 800679c:	2b30      	cmp	r3, #48	; 0x30
 800679e:	d064      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x15a>
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	d86b      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d060      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x15a>
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d867      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d05c      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x15a>
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d05a      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x15a>
 80067b4:	e062      	b.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6899      	ldr	r1, [r3, #8]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f000 fb11 	bl	8006dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	609a      	str	r2, [r3, #8]
      break;
 80067e2:	e04f      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	6899      	ldr	r1, [r3, #8]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f000 fafa 	bl	8006dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006806:	609a      	str	r2, [r3, #8]
      break;
 8006808:	e03c      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	461a      	mov	r2, r3
 8006818:	f000 f9b8 	bl	8006b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2150      	movs	r1, #80	; 0x50
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fac7 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 8006828:	e02c      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	6859      	ldr	r1, [r3, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	461a      	mov	r2, r3
 8006838:	f000 fa14 	bl	8006c64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2160      	movs	r1, #96	; 0x60
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fab7 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 8006848:	e01c      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6859      	ldr	r1, [r3, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	461a      	mov	r2, r3
 8006858:	f000 f998 	bl	8006b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2140      	movs	r1, #64	; 0x40
 8006862:	4618      	mov	r0, r3
 8006864:	f000 faa7 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 8006868:	e00c      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f000 fa9e 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 800687a:	e003      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
      break;
 8006880:	e000      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b0c      	cmp	r3, #12
 80068b2:	d831      	bhi.n	8006918 <HAL_TIM_ReadCapturedValue+0x78>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080068f1 	.word	0x080068f1
 80068c0:	08006919 	.word	0x08006919
 80068c4:	08006919 	.word	0x08006919
 80068c8:	08006919 	.word	0x08006919
 80068cc:	080068fb 	.word	0x080068fb
 80068d0:	08006919 	.word	0x08006919
 80068d4:	08006919 	.word	0x08006919
 80068d8:	08006919 	.word	0x08006919
 80068dc:	08006905 	.word	0x08006905
 80068e0:	08006919 	.word	0x08006919
 80068e4:	08006919 	.word	0x08006919
 80068e8:	08006919 	.word	0x08006919
 80068ec:	0800690f 	.word	0x0800690f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f6:	60fb      	str	r3, [r7, #12]

      break;
 80068f8:	e00f      	b.n	800691a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	60fb      	str	r3, [r7, #12]

      break;
 8006902:	e00a      	b.n	800691a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	60fb      	str	r3, [r7, #12]

      break;
 800690c:	e005      	b.n	800691a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	60fb      	str	r3, [r7, #12]

      break;
 8006916:	e000      	b.n	800691a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006918:	bf00      	nop
  }

  return tmpreg;
 800691a:	68fb      	ldr	r3, [r7, #12]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a40      	ldr	r2, [pc, #256]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d00f      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a3d      	ldr	r2, [pc, #244]	; (8006a7c <TIM_Base_SetConfig+0x118>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00b      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a3c      	ldr	r2, [pc, #240]	; (8006a80 <TIM_Base_SetConfig+0x11c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d007      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3b      	ldr	r2, [pc, #236]	; (8006a84 <TIM_Base_SetConfig+0x120>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a3a      	ldr	r2, [pc, #232]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d108      	bne.n	80069b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2f      	ldr	r2, [pc, #188]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d02b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c4:	d027      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a2c      	ldr	r2, [pc, #176]	; (8006a7c <TIM_Base_SetConfig+0x118>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d023      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2b      	ldr	r2, [pc, #172]	; (8006a80 <TIM_Base_SetConfig+0x11c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01f      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <TIM_Base_SetConfig+0x120>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d017      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a28      	ldr	r2, [pc, #160]	; (8006a8c <TIM_Base_SetConfig+0x128>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <TIM_Base_SetConfig+0x12c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00f      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a26      	ldr	r2, [pc, #152]	; (8006a94 <TIM_Base_SetConfig+0x130>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a25      	ldr	r2, [pc, #148]	; (8006a98 <TIM_Base_SetConfig+0x134>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d007      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <TIM_Base_SetConfig+0x138>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a23      	ldr	r2, [pc, #140]	; (8006aa0 <TIM_Base_SetConfig+0x13c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d108      	bne.n	8006a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_Base_SetConfig+0xf8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a0c      	ldr	r2, [pc, #48]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d103      	bne.n	8006a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	615a      	str	r2, [r3, #20]
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40000400 	.word	0x40000400
 8006a80:	40000800 	.word	0x40000800
 8006a84:	40000c00 	.word	0x40000c00
 8006a88:	40010400 	.word	0x40010400
 8006a8c:	40014000 	.word	0x40014000
 8006a90:	40014400 	.word	0x40014400
 8006a94:	40014800 	.word	0x40014800
 8006a98:	40001800 	.word	0x40001800
 8006a9c:	40001c00 	.word	0x40001c00
 8006aa0:	40002000 	.word	0x40002000

08006aa4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f023 0201 	bic.w	r2, r3, #1
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4a28      	ldr	r2, [pc, #160]	; (8006b70 <TIM_TI1_SetConfig+0xcc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d01b      	beq.n	8006b0a <TIM_TI1_SetConfig+0x66>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad8:	d017      	beq.n	8006b0a <TIM_TI1_SetConfig+0x66>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a25      	ldr	r2, [pc, #148]	; (8006b74 <TIM_TI1_SetConfig+0xd0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <TIM_TI1_SetConfig+0x66>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a24      	ldr	r2, [pc, #144]	; (8006b78 <TIM_TI1_SetConfig+0xd4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <TIM_TI1_SetConfig+0x66>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a23      	ldr	r2, [pc, #140]	; (8006b7c <TIM_TI1_SetConfig+0xd8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00b      	beq.n	8006b0a <TIM_TI1_SetConfig+0x66>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a22      	ldr	r2, [pc, #136]	; (8006b80 <TIM_TI1_SetConfig+0xdc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <TIM_TI1_SetConfig+0x66>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <TIM_TI1_SetConfig+0xe0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_TI1_SetConfig+0x66>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a20      	ldr	r2, [pc, #128]	; (8006b88 <TIM_TI1_SetConfig+0xe4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d101      	bne.n	8006b0e <TIM_TI1_SetConfig+0x6a>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <TIM_TI1_SetConfig+0x6c>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d008      	beq.n	8006b26 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e003      	b.n	8006b2e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f023 030a 	bic.w	r3, r3, #10
 8006b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f003 030a 	and.w	r3, r3, #10
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40010400 	.word	0x40010400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40001800 	.word	0x40001800

08006b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f023 0201 	bic.w	r2, r3, #1
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f023 030a 	bic.w	r3, r3, #10
 8006bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b087      	sub	sp, #28
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f023 0210 	bic.w	r2, r3, #16
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	031b      	lsls	r3, r3, #12
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	621a      	str	r2, [r3, #32]
}
 8006c58:	bf00      	nop
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f023 0210 	bic.w	r2, r3, #16
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	031b      	lsls	r3, r3, #12
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ca0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	621a      	str	r2, [r3, #32]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f023 0303 	bic.w	r3, r3, #3
 8006cf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	621a      	str	r2, [r3, #32]
}
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	031b      	lsls	r3, r3, #12
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	031b      	lsls	r3, r3, #12
 8006d94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f043 0307 	orr.w	r3, r3, #7
 8006dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	609a      	str	r2, [r3, #8]
}
 8006de0:	bf00      	nop
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	021a      	lsls	r2, r3, #8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2201      	movs	r2, #1
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	401a      	ands	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1a      	ldr	r2, [r3, #32]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	fa01 f303 	lsl.w	r3, r1, r3
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e05a      	b.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a21      	ldr	r2, [pc, #132]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d022      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006edc:	d01d      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1a      	ldr	r2, [pc, #104]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10c      	bne.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40010400 	.word	0x40010400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40001800 	.word	0x40001800

08006f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f98:	b084      	sub	sp, #16
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	f107 001c 	add.w	r0, r7, #28
 8006fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d122      	bne.n	8006ff6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f9a0 	bl	8007330 <USB_CoreReset>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73fb      	strb	r3, [r7, #15]
 8006ff4:	e01a      	b.n	800702c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f994 	bl	8007330 <USB_CoreReset>
 8007008:	4603      	mov	r3, r0
 800700a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800700c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	639a      	str	r2, [r3, #56]	; 0x38
 800701e:	e005      	b.n	800702c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	2b01      	cmp	r3, #1
 8007030:	d10b      	bne.n	800704a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f043 0206 	orr.w	r2, r3, #6
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007056:	b004      	add	sp, #16
 8007058:	4770      	bx	lr

0800705a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f043 0201 	orr.w	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f023 0201 	bic.w	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d115      	bne.n	80070ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070cc:	2001      	movs	r0, #1
 80070ce:	f7fb f98b 	bl	80023e8 <HAL_Delay>
      ms++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3301      	adds	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f91a 	bl	8007312 <USB_GetMode>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d01e      	beq.n	8007122 <USB_SetCurrentMode+0x84>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b31      	cmp	r3, #49	; 0x31
 80070e8:	d9f0      	bls.n	80070cc <USB_SetCurrentMode+0x2e>
 80070ea:	e01a      	b.n	8007122 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d115      	bne.n	800711e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070fe:	2001      	movs	r0, #1
 8007100:	f7fb f972 	bl	80023e8 <HAL_Delay>
      ms++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f901 	bl	8007312 <USB_GetMode>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <USB_SetCurrentMode+0x84>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b31      	cmp	r3, #49	; 0x31
 800711a:	d9f0      	bls.n	80070fe <USB_SetCurrentMode+0x60>
 800711c:	e001      	b.n	8007122 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e005      	b.n	800712e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b32      	cmp	r3, #50	; 0x32
 8007126:	d101      	bne.n	800712c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	019b      	lsls	r3, r3, #6
 800714a:	f043 0220 	orr.w	r2, r3, #32
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3301      	adds	r3, #1
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <USB_FlushTxFifo+0x44>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d901      	bls.n	8007162 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e006      	b.n	8007170 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b20      	cmp	r3, #32
 800716c:	d0f1      	beq.n	8007152 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	00030d40 	.word	0x00030d40

08007180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2210      	movs	r2, #16
 8007190:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	4a08      	ldr	r2, [pc, #32]	; (80071bc <USB_FlushRxFifo+0x3c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e006      	b.n	80071b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d0f1      	beq.n	8007192 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	00030d40 	.word	0x00030d40

080071c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b089      	sub	sp, #36	; 0x24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4611      	mov	r1, r2
 80071cc:	461a      	mov	r2, r3
 80071ce:	460b      	mov	r3, r1
 80071d0:	71fb      	strb	r3, [r7, #7]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d123      	bne.n	800722e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071e6:	88bb      	ldrh	r3, [r7, #4]
 80071e8:	3303      	adds	r3, #3
 80071ea:	089b      	lsrs	r3, r3, #2
 80071ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071ee:	2300      	movs	r3, #0
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	e018      	b.n	8007226 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	031a      	lsls	r2, r3, #12
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007200:	461a      	mov	r2, r3
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	3301      	adds	r3, #1
 800720c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	3301      	adds	r3, #1
 8007212:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	3301      	adds	r3, #1
 8007218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	3301      	adds	r3, #1
 800721e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	3301      	adds	r3, #1
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d3e2      	bcc.n	80071f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3724      	adds	r7, #36	; 0x24
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800723c:	b480      	push	{r7}
 800723e:	b08b      	sub	sp, #44	; 0x2c
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	089b      	lsrs	r3, r3, #2
 8007256:	b29b      	uxth	r3, r3
 8007258:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	f003 0303 	and.w	r3, r3, #3
 8007260:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007262:	2300      	movs	r3, #0
 8007264:	623b      	str	r3, [r7, #32]
 8007266:	e014      	b.n	8007292 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	601a      	str	r2, [r3, #0]
    pDest++;
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	3301      	adds	r3, #1
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	3301      	adds	r3, #1
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	3301      	adds	r3, #1
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	3301      	adds	r3, #1
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	3301      	adds	r3, #1
 8007290:	623b      	str	r3, [r7, #32]
 8007292:	6a3a      	ldr	r2, [r7, #32]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	429a      	cmp	r2, r3
 8007298:	d3e6      	bcc.n	8007268 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800729a:	8bfb      	ldrh	r3, [r7, #30]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01e      	beq.n	80072de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072aa:	461a      	mov	r2, r3
 80072ac:	f107 0310 	add.w	r3, r7, #16
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	fa22 f303 	lsr.w	r3, r2, r3
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	701a      	strb	r2, [r3, #0]
      i++;
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	3301      	adds	r3, #1
 80072ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	3301      	adds	r3, #1
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80072d2:	8bfb      	ldrh	r3, [r7, #30]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072d8:	8bfb      	ldrh	r3, [r7, #30]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1ea      	bne.n	80072b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	372c      	adds	r7, #44	; 0x2c
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4013      	ands	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007304:	68fb      	ldr	r3, [r7, #12]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f003 0301 	and.w	r3, r3, #1
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	4a13      	ldr	r2, [pc, #76]	; (8007390 <USB_CoreReset+0x60>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d901      	bls.n	800734c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e01a      	b.n	8007382 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	daf3      	bge.n	800733c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f043 0201 	orr.w	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3301      	adds	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	4a09      	ldr	r2, [pc, #36]	; (8007390 <USB_CoreReset+0x60>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d901      	bls.n	8007374 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e006      	b.n	8007382 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d0f1      	beq.n	8007364 <USB_CoreReset+0x34>

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	00030d40 	.word	0x00030d40

08007394 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007394:	b084      	sub	sp, #16
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	f107 001c 	add.w	r0, r7, #28
 80073a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073b0:	461a      	mov	r2, r3
 80073b2:	2300      	movs	r3, #0
 80073b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d018      	beq.n	8007418 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d10a      	bne.n	8007402 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073fa:	f043 0304 	orr.w	r3, r3, #4
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	e014      	b.n	800742c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007410:	f023 0304 	bic.w	r3, r3, #4
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	e009      	b.n	800742c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007426:	f023 0304 	bic.w	r3, r3, #4
 800742a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800742c:	2110      	movs	r1, #16
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff fe82 	bl	8007138 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fea3 	bl	8007180 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	e015      	b.n	800746c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4413      	add	r3, r2
 8007448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744c:	461a      	mov	r2, r3
 800744e:	f04f 33ff 	mov.w	r3, #4294967295
 8007452:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4413      	add	r3, r2
 800745c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007460:	461a      	mov	r2, r3
 8007462:	2300      	movs	r3, #0
 8007464:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3301      	adds	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	429a      	cmp	r2, r3
 8007472:	d3e5      	bcc.n	8007440 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00b      	beq.n	80074a6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007494:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <USB_HostInit+0x154>)
 800749a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <USB_HostInit+0x158>)
 80074a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80074a4:	e009      	b.n	80074ba <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2280      	movs	r2, #128	; 0x80
 80074aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a10      	ldr	r2, [pc, #64]	; (80074f0 <USB_HostInit+0x15c>)
 80074b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a0f      	ldr	r2, [pc, #60]	; (80074f4 <USB_HostInit+0x160>)
 80074b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d105      	bne.n	80074cc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f043 0210 	orr.w	r2, r3, #16
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699a      	ldr	r2, [r3, #24]
 80074d0:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <USB_HostInit+0x164>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074e4:	b004      	add	sp, #16
 80074e6:	4770      	bx	lr
 80074e8:	01000200 	.word	0x01000200
 80074ec:	00e00300 	.word	0x00e00300
 80074f0:	00600080 	.word	0x00600080
 80074f4:	004000e0 	.word	0x004000e0
 80074f8:	a3200008 	.word	0xa3200008

080074fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800751a:	f023 0303 	bic.w	r3, r3, #3
 800751e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007534:	4313      	orrs	r3, r2
 8007536:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d107      	bne.n	800754e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007544:	461a      	mov	r2, r3
 8007546:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800754a:	6053      	str	r3, [r2, #4]
 800754c:	e009      	b.n	8007562 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	2b02      	cmp	r3, #2
 8007552:	d106      	bne.n	8007562 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800755a:	461a      	mov	r2, r3
 800755c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007560:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007594:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <USB_DriveVbus+0x44>
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d106      	bne.n	80075b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075be:	d109      	bne.n	80075d4 <USB_DriveVbus+0x64>
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b085      	sub	sp, #20
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	0c5b      	lsrs	r3, r3, #17
 8007600:	f003 0303 	and.w	r3, r3, #3
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	b29b      	uxth	r3, r3
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	461a      	mov	r2, r3
 8007642:	4603      	mov	r3, r0
 8007644:	70fb      	strb	r3, [r7, #3]
 8007646:	460b      	mov	r3, r1
 8007648:	70bb      	strb	r3, [r7, #2]
 800764a:	4613      	mov	r3, r2
 800764c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007656:	78fb      	ldrb	r3, [r7, #3]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007662:	461a      	mov	r2, r3
 8007664:	f04f 33ff 	mov.w	r3, #4294967295
 8007668:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800766a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800766e:	2b03      	cmp	r3, #3
 8007670:	d87e      	bhi.n	8007770 <USB_HC_Init+0x13c>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <USB_HC_Init+0x44>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007689 	.word	0x08007689
 800767c:	08007733 	.word	0x08007733
 8007680:	08007689 	.word	0x08007689
 8007684:	080076f5 	.word	0x080076f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	4413      	add	r3, r2
 8007690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007694:	461a      	mov	r2, r3
 8007696:	f240 439d 	movw	r3, #1181	; 0x49d
 800769a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800769c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	da10      	bge.n	80076c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80076c4:	e057      	b.n	8007776 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d051      	beq.n	8007776 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	0151      	lsls	r1, r2, #5
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	440a      	add	r2, r1
 80076e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80076f0:	60d3      	str	r3, [r2, #12]
      break;
 80076f2:	e040      	b.n	8007776 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007700:	461a      	mov	r2, r3
 8007702:	f240 639d 	movw	r3, #1693	; 0x69d
 8007706:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800770c:	2b00      	cmp	r3, #0
 800770e:	da34      	bge.n	800777a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	440a      	add	r2, r1
 8007726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007730:	e023      	b.n	800777a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773e:	461a      	mov	r2, r3
 8007740:	f240 2325 	movw	r3, #549	; 0x225
 8007744:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800774a:	2b00      	cmp	r3, #0
 800774c:	da17      	bge.n	800777e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4413      	add	r3, r2
 8007756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	440a      	add	r2, r1
 8007764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007768:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800776c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800776e:	e006      	b.n	800777e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	77fb      	strb	r3, [r7, #31]
      break;
 8007774:	e004      	b.n	8007780 <USB_HC_Init+0x14c>
      break;
 8007776:	bf00      	nop
 8007778:	e002      	b.n	8007780 <USB_HC_Init+0x14c>
      break;
 800777a:	bf00      	nop
 800777c:	e000      	b.n	8007780 <USB_HC_Init+0x14c>
      break;
 800777e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007786:	699a      	ldr	r2, [r3, #24]
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	2101      	movs	r1, #1
 8007790:	fa01 f303 	lsl.w	r3, r1, r3
 8007794:	6939      	ldr	r1, [r7, #16]
 8007796:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800779a:	4313      	orrs	r3, r2
 800779c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80077aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	da03      	bge.n	80077ba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80077b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b6:	61bb      	str	r3, [r7, #24]
 80077b8:	e001      	b.n	80077be <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff ff0f 	bl	80075e2 <USB_GetHostSpeed>
 80077c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80077c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d106      	bne.n	80077dc <USB_HC_Init+0x1a8>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d003      	beq.n	80077dc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80077d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	e001      	b.n	80077e0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077e0:	787b      	ldrb	r3, [r7, #1]
 80077e2:	059b      	lsls	r3, r3, #22
 80077e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80077e8:	78bb      	ldrb	r3, [r7, #2]
 80077ea:	02db      	lsls	r3, r3, #11
 80077ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80077f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077f6:	049b      	lsls	r3, r3, #18
 80077f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80077fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80077fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007800:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007804:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	0159      	lsls	r1, r3, #5
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	440b      	add	r3, r1
 8007812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007816:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800781c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800781e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007822:	2b03      	cmp	r3, #3
 8007824:	d10f      	bne.n	8007846 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4413      	add	r3, r2
 800782e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	440a      	add	r2, r1
 800783c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007844:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007846:	7ffb      	ldrb	r3, [r7, #31]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3720      	adds	r7, #32
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08c      	sub	sp, #48	; 0x30
 8007854:	af02      	add	r7, sp, #8
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800786c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007876:	2b00      	cmp	r3, #0
 8007878:	d02d      	beq.n	80078d6 <USB_HC_StartXfer+0x86>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	791b      	ldrb	r3, [r3, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d129      	bne.n	80078d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d117      	bne.n	80078b8 <USB_HC_StartXfer+0x68>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	79db      	ldrb	r3, [r3, #7]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <USB_HC_StartXfer+0x48>
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	79db      	ldrb	r3, [r3, #7]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d10f      	bne.n	80078b8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	0151      	lsls	r1, r2, #5
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	440a      	add	r2, r1
 80078ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10b      	bne.n	80078d6 <USB_HC_StartXfer+0x86>
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	795b      	ldrb	r3, [r3, #5]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d107      	bne.n	80078d6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	4619      	mov	r1, r3
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 fa2f 	bl	8007d30 <USB_DoPing>
      return HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e0f8      	b.n	8007ac8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d018      	beq.n	8007910 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	8912      	ldrh	r2, [r2, #8]
 80078e6:	4413      	add	r3, r2
 80078e8:	3b01      	subs	r3, #1
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	8912      	ldrh	r2, [r2, #8]
 80078ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80078f2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80078f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80078f6:	8b7b      	ldrh	r3, [r7, #26]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d90b      	bls.n	8007914 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80078fc:	8b7b      	ldrh	r3, [r7, #26]
 80078fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007900:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	8912      	ldrh	r2, [r2, #8]
 8007906:	fb02 f203 	mul.w	r2, r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	611a      	str	r2, [r3, #16]
 800790e:	e001      	b.n	8007914 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007910:	2301      	movs	r3, #1
 8007912:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800791c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	8912      	ldrh	r2, [r2, #8]
 8007922:	fb02 f203 	mul.w	r2, r2, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	611a      	str	r2, [r3, #16]
 800792a:	e003      	b.n	8007934 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800793c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800793e:	04d9      	lsls	r1, r3, #19
 8007940:	4b63      	ldr	r3, [pc, #396]	; (8007ad0 <USB_HC_StartXfer+0x280>)
 8007942:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007944:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	7a9b      	ldrb	r3, [r3, #10]
 800794a:	075b      	lsls	r3, r3, #29
 800794c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007950:	69f9      	ldr	r1, [r7, #28]
 8007952:	0148      	lsls	r0, r1, #5
 8007954:	6a39      	ldr	r1, [r7, #32]
 8007956:	4401      	add	r1, r0
 8007958:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800795c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800795e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	68d9      	ldr	r1, [r3, #12]
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	4413      	add	r3, r2
 8007972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007976:	460a      	mov	r2, r1
 8007978:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	4413      	add	r3, r2
 800799a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	6a3a      	ldr	r2, [r7, #32]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	7e7b      	ldrb	r3, [r7, #25]
 80079c2:	075b      	lsls	r3, r3, #29
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	0148      	lsls	r0, r1, #5
 80079c8:	6a39      	ldr	r1, [r7, #32]
 80079ca:	4401      	add	r1, r0
 80079cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80079d0:	4313      	orrs	r3, r2
 80079d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079ea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	78db      	ldrb	r3, [r3, #3]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	e003      	b.n	8007a06 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a04:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a0c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	e04e      	b.n	8007ac8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	78db      	ldrb	r3, [r3, #3]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d149      	bne.n	8007ac6 <USB_HC_StartXfer+0x276>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d045      	beq.n	8007ac6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	79db      	ldrb	r3, [r3, #7]
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d830      	bhi.n	8007aa4 <USB_HC_StartXfer+0x254>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <USB_HC_StartXfer+0x1f8>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a7d 	.word	0x08007a7d
 8007a50:	08007a59 	.word	0x08007a59
 8007a54:	08007a7d 	.word	0x08007a7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	3303      	adds	r3, #3
 8007a5e:	089b      	lsrs	r3, r3, #2
 8007a60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007a62:	8afa      	ldrh	r2, [r7, #22]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d91c      	bls.n	8007aa8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f043 0220 	orr.w	r2, r3, #32
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a7a:	e015      	b.n	8007aa8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	3303      	adds	r3, #3
 8007a82:	089b      	lsrs	r3, r3, #2
 8007a84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007a86:	8afa      	ldrh	r2, [r7, #22]
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d90a      	bls.n	8007aac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007aa2:	e003      	b.n	8007aac <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007aa4:	bf00      	nop
 8007aa6:	e002      	b.n	8007aae <USB_HC_StartXfer+0x25e>
        break;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <USB_HC_StartXfer+0x25e>
        break;
 8007aac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	68d9      	ldr	r1, [r3, #12]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	785a      	ldrb	r2, [r3, #1]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2000      	movs	r0, #0
 8007abe:	9000      	str	r0, [sp, #0]
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff fb7d 	bl	80071c0 <USB_WritePacket>
  }

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3728      	adds	r7, #40	; 0x28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	1ff80000 	.word	0x1ff80000

08007ad4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	b29b      	uxth	r3, r3
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b089      	sub	sp, #36	; 0x24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	0c9b      	lsrs	r3, r3, #18
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	0fdb      	lsrs	r3, r3, #31
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d104      	bne.n	8007b50 <USB_HC_Halt+0x5a>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e0e8      	b.n	8007d22 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <USB_HC_Halt+0x66>
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d173      	bne.n	8007c44 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b7a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f040 80cb 	bne.w	8007d20 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d143      	bne.n	8007c1e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	0151      	lsls	r1, r2, #5
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	440a      	add	r2, r1
 8007bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bb4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bd4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bf4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c02:	d81d      	bhi.n	8007c40 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c1a:	d0ec      	beq.n	8007bf6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c1c:	e080      	b.n	8007d20 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c3c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c3e:	e06f      	b.n	8007d20 <USB_HC_Halt+0x22a>
            break;
 8007c40:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c42:	e06d      	b.n	8007d20 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c62:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d143      	bne.n	8007cfc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	0151      	lsls	r1, r2, #5
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	440a      	add	r2, r1
 8007c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cd2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ce0:	d81d      	bhi.n	8007d1e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cf8:	d0ec      	beq.n	8007cd4 <USB_HC_Halt+0x1de>
 8007cfa:	e011      	b.n	8007d20 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e000      	b.n	8007d20 <USB_HC_Halt+0x22a>
          break;
 8007d1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3724      	adds	r7, #36	; 0x24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
	...

08007d30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d44:	2301      	movs	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	04da      	lsls	r2, r3, #19
 8007d4c:	4b15      	ldr	r3, [pc, #84]	; (8007da4 <USB_DoPing+0x74>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	0151      	lsls	r1, r2, #5
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	440a      	add	r2, r1
 8007d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	1ff80000 	.word	0x1ff80000

08007da8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff f95f 	bl	800707c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007dbe:	2110      	movs	r1, #16
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff f9b9 	bl	8007138 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff f9da 	bl	8007180 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	e01f      	b.n	8007e12 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007de8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007df0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007df8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e06:	461a      	mov	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b0f      	cmp	r3, #15
 8007e16:	d9dc      	bls.n	8007dd2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	613b      	str	r3, [r7, #16]
 8007e1c:	e034      	b.n	8007e88 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e34:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e3c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e44:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e52:	461a      	mov	r2, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e64:	d80c      	bhi.n	8007e80 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e7c:	d0ec      	beq.n	8007e58 <USB_StopHost+0xb0>
 8007e7e:	e000      	b.n	8007e82 <USB_StopHost+0xda>
        break;
 8007e80:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	3301      	adds	r3, #1
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	2b0f      	cmp	r3, #15
 8007e8c:	d9c7      	bls.n	8007e1e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e94:	461a      	mov	r2, r3
 8007e96:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff f8d8 	bl	800705a <USB_EnableGlobalInt>

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007eb4:	b590      	push	{r4, r7, lr}
 8007eb6:	b089      	sub	sp, #36	; 0x24
 8007eb8:	af04      	add	r7, sp, #16
 8007eba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fc66 	bl	8008794 <USBH_FindInterface>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	2bff      	cmp	r3, #255	; 0xff
 8007ed0:	d002      	beq.n	8007ed8 <USBH_CDC_InterfaceInit+0x24>
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d901      	bls.n	8007edc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e13d      	b.n	8008158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fc3b 	bl	800875c <USBH_SelectInterface>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e131      	b.n	8008158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007efa:	2050      	movs	r0, #80	; 0x50
 8007efc:	f001 fb1e 	bl	800953c <malloc>
 8007f00:	4603      	mov	r3, r0
 8007f02:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	e11f      	b.n	8008158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007f18:	2250      	movs	r2, #80	; 0x50
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	68b8      	ldr	r0, [r7, #8]
 8007f1e:	f001 fb1d 	bl	800955c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	211a      	movs	r1, #26
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	b25b      	sxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	da15      	bge.n	8007f66 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	211a      	movs	r1, #26
 8007f40:	fb01 f303 	mul.w	r3, r1, r3
 8007f44:	4413      	add	r3, r2
 8007f46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	211a      	movs	r1, #26
 8007f56:	fb01 f303 	mul.w	r3, r1, r3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f60:	881a      	ldrh	r2, [r3, #0]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 ff9c 	bl	8008eaa <USBH_AllocPipe>
 8007f72:	4603      	mov	r3, r0
 8007f74:	461a      	mov	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	7819      	ldrb	r1, [r3, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	7858      	ldrb	r0, [r3, #1]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	8952      	ldrh	r2, [r2, #10]
 8007f92:	9202      	str	r2, [sp, #8]
 8007f94:	2203      	movs	r2, #3
 8007f96:	9201      	str	r2, [sp, #4]
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 ff54 	bl	8008e4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 fa09 	bl	80093c4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	210a      	movs	r1, #10
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fbeb 	bl	8008794 <USBH_FindInterface>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	2bff      	cmp	r3, #255	; 0xff
 8007fc6:	d002      	beq.n	8007fce <USBH_CDC_InterfaceInit+0x11a>
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d901      	bls.n	8007fd2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e0c2      	b.n	8008158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	211a      	movs	r1, #26
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	4413      	add	r3, r2
 8007fde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	da16      	bge.n	8008018 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	211a      	movs	r1, #26
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	211a      	movs	r1, #26
 8008006:	fb01 f303 	mul.w	r3, r1, r3
 800800a:	4413      	add	r3, r2
 800800c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008010:	881a      	ldrh	r2, [r3, #0]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	835a      	strh	r2, [r3, #26]
 8008016:	e015      	b.n	8008044 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	211a      	movs	r1, #26
 800801e:	fb01 f303 	mul.w	r3, r1, r3
 8008022:	4413      	add	r3, r2
 8008024:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008028:	781a      	ldrb	r2, [r3, #0]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	211a      	movs	r1, #26
 8008034:	fb01 f303 	mul.w	r3, r1, r3
 8008038:	4413      	add	r3, r2
 800803a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800803e:	881a      	ldrh	r2, [r3, #0]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	211a      	movs	r1, #26
 800804a:	fb01 f303 	mul.w	r3, r1, r3
 800804e:	4413      	add	r3, r2
 8008050:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	b25b      	sxtb	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	da16      	bge.n	800808a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	211a      	movs	r1, #26
 8008062:	fb01 f303 	mul.w	r3, r1, r3
 8008066:	4413      	add	r3, r2
 8008068:	f203 3356 	addw	r3, r3, #854	; 0x356
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	211a      	movs	r1, #26
 8008078:	fb01 f303 	mul.w	r3, r1, r3
 800807c:	4413      	add	r3, r2
 800807e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008082:	881a      	ldrh	r2, [r3, #0]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	835a      	strh	r2, [r3, #26]
 8008088:	e015      	b.n	80080b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	211a      	movs	r1, #26
 8008090:	fb01 f303 	mul.w	r3, r1, r3
 8008094:	4413      	add	r3, r2
 8008096:	f203 3356 	addw	r3, r3, #854	; 0x356
 800809a:	781a      	ldrb	r2, [r3, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	211a      	movs	r1, #26
 80080a6:	fb01 f303 	mul.w	r3, r1, r3
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80080b0:	881a      	ldrh	r2, [r3, #0]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	7b9b      	ldrb	r3, [r3, #14]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fef4 	bl	8008eaa <USBH_AllocPipe>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461a      	mov	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	7bdb      	ldrb	r3, [r3, #15]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 feea 	bl	8008eaa <USBH_AllocPipe>
 80080d6:	4603      	mov	r3, r0
 80080d8:	461a      	mov	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	7b59      	ldrb	r1, [r3, #13]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	7b98      	ldrb	r0, [r3, #14]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	8b12      	ldrh	r2, [r2, #24]
 80080f6:	9202      	str	r2, [sp, #8]
 80080f8:	2202      	movs	r2, #2
 80080fa:	9201      	str	r2, [sp, #4]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	4623      	mov	r3, r4
 8008100:	4602      	mov	r2, r0
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fea2 	bl	8008e4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	7b19      	ldrb	r1, [r3, #12]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	7bd8      	ldrb	r0, [r3, #15]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	8b52      	ldrh	r2, [r2, #26]
 8008120:	9202      	str	r2, [sp, #8]
 8008122:	2202      	movs	r2, #2
 8008124:	9201      	str	r2, [sp, #4]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	4623      	mov	r3, r4
 800812a:	4602      	mov	r2, r0
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fe8d 	bl	8008e4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	7b5b      	ldrb	r3, [r3, #13]
 800813e:	2200      	movs	r2, #0
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 f93e 	bl	80093c4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	7b1b      	ldrb	r3, [r3, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 f937 	bl	80093c4 <USBH_LL_SetToggle>

  return USBH_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	bd90      	pop	{r4, r7, pc}

08008160 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00e      	beq.n	8008198 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fe82 	bl	8008e8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fead 	bl	8008eec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	7b1b      	ldrb	r3, [r3, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00e      	beq.n	80081be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	7b1b      	ldrb	r3, [r3, #12]
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fe6f 	bl	8008e8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	7b1b      	ldrb	r3, [r3, #12]
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fe9a 	bl	8008eec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	7b5b      	ldrb	r3, [r3, #13]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00e      	beq.n	80081e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	7b5b      	ldrb	r3, [r3, #13]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fe5c 	bl	8008e8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	7b5b      	ldrb	r3, [r3, #13]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fe87 	bl	8008eec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f001 f9a7 	bl	800954c <free>
    phost->pActiveClass->pData = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008204:	2200      	movs	r2, #0
 8008206:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3340      	adds	r3, #64	; 0x40
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f8b1 	bl	8008392 <GetLineCoding>
 8008230:	4603      	mov	r3, r0
 8008232:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008240:	2102      	movs	r1, #2
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008246:	7afb      	ldrb	r3, [r7, #11]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008270:	2b04      	cmp	r3, #4
 8008272:	d877      	bhi.n	8008364 <USBH_CDC_Process+0x114>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <USBH_CDC_Process+0x2c>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	08008291 	.word	0x08008291
 8008280:	08008297 	.word	0x08008297
 8008284:	080082c7 	.word	0x080082c7
 8008288:	0800833b 	.word	0x0800833b
 800828c:	08008349 	.word	0x08008349
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
      break;
 8008294:	e06d      	b.n	8008372 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f897 	bl	80083d0 <SetLineCoding>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082b4:	e058      	b.n	8008368 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d055      	beq.n	8008368 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2204      	movs	r2, #4
 80082c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80082c4:	e050      	b.n	8008368 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	3340      	adds	r3, #64	; 0x40
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f860 	bl	8008392 <GetLineCoding>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d126      	bne.n	800832a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ee:	791b      	ldrb	r3, [r3, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d13b      	bne.n	800836c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008300:	429a      	cmp	r2, r3
 8008302:	d133      	bne.n	800836c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800830e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008310:	429a      	cmp	r2, r3
 8008312:	d12b      	bne.n	800836c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800831c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800831e:	429a      	cmp	r2, r3
 8008320:	d124      	bne.n	800836c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f958 	bl	80085d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008328:	e020      	b.n	800836c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d01d      	beq.n	800836c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2204      	movs	r2, #4
 8008334:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008338:	e018      	b.n	800836c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f867 	bl	800840e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f8da 	bl	80084fa <CDC_ProcessReception>
      break;
 8008346:	e014      	b.n	8008372 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008348:	2100      	movs	r1, #0
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fb08 	bl	8008960 <USBH_ClrFeature>
 8008350:	4603      	mov	r3, r0
 8008352:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10a      	bne.n	8008370 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008362:	e005      	b.n	8008370 <USBH_CDC_Process+0x120>

    default:
      break;
 8008364:	bf00      	nop
 8008366:	e004      	b.n	8008372 <USBH_CDC_Process+0x122>
      break;
 8008368:	bf00      	nop
 800836a:	e002      	b.n	8008372 <USBH_CDC_Process+0x122>
      break;
 800836c:	bf00      	nop
 800836e:	e000      	b.n	8008372 <USBH_CDC_Process+0x122>
      break;
 8008370:	bf00      	nop

  }

  return status;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	22a1      	movs	r2, #161	; 0xa1
 80083a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2221      	movs	r2, #33	; 0x21
 80083a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2207      	movs	r2, #7
 80083b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2207      	movs	r2, #7
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 faf1 	bl	80089a8 <USBH_CtlReq>
 80083c6:	4603      	mov	r3, r0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2221      	movs	r2, #33	; 0x21
 80083de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2220      	movs	r2, #32
 80083e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2207      	movs	r2, #7
 80083f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2207      	movs	r2, #7
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fad2 	bl	80089a8 <USBH_CtlReq>
 8008404:	4603      	mov	r3, r0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b086      	sub	sp, #24
 8008412:	af02      	add	r7, sp, #8
 8008414:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008420:	2300      	movs	r3, #0
 8008422:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800842a:	2b01      	cmp	r3, #1
 800842c:	d002      	beq.n	8008434 <CDC_ProcessTransmission+0x26>
 800842e:	2b02      	cmp	r3, #2
 8008430:	d023      	beq.n	800847a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008432:	e05e      	b.n	80084f2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	8b12      	ldrh	r2, [r2, #24]
 800843c:	4293      	cmp	r3, r2
 800843e:	d90b      	bls.n	8008458 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	69d9      	ldr	r1, [r3, #28]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8b1a      	ldrh	r2, [r3, #24]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	7b5b      	ldrb	r3, [r3, #13]
 800844c:	2001      	movs	r0, #1
 800844e:	9000      	str	r0, [sp, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fcb8 	bl	8008dc6 <USBH_BulkSendData>
 8008456:	e00b      	b.n	8008470 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	7b5b      	ldrb	r3, [r3, #13]
 8008466:	2001      	movs	r0, #1
 8008468:	9000      	str	r0, [sp, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fcab 	bl	8008dc6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008478:	e03b      	b.n	80084f2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	7b5b      	ldrb	r3, [r3, #13]
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 ff75 	bl	8009370 <USBH_LL_GetURBState>
 8008486:	4603      	mov	r3, r0
 8008488:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d128      	bne.n	80084e2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	8b12      	ldrh	r2, [r2, #24]
 8008498:	4293      	cmp	r3, r2
 800849a:	d90e      	bls.n	80084ba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	8b12      	ldrh	r2, [r2, #24]
 80084a4:	1a9a      	subs	r2, r3, r2
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	8b12      	ldrh	r2, [r2, #24]
 80084b2:	441a      	add	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	61da      	str	r2, [r3, #28]
 80084b8:	e002      	b.n	80084c0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80084d0:	e00e      	b.n	80084f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f868 	bl	80085b0 <USBH_CDC_TransmitCallback>
      break;
 80084e0:	e006      	b.n	80084f0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80084e2:	7afb      	ldrb	r3, [r7, #11]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d103      	bne.n	80084f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80084f0:	bf00      	nop
  }
}
 80084f2:	bf00      	nop
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800850c:	2300      	movs	r3, #0
 800850e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008516:	2b03      	cmp	r3, #3
 8008518:	d002      	beq.n	8008520 <CDC_ProcessReception+0x26>
 800851a:	2b04      	cmp	r3, #4
 800851c:	d00e      	beq.n	800853c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800851e:	e043      	b.n	80085a8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	6a19      	ldr	r1, [r3, #32]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	8b5a      	ldrh	r2, [r3, #26]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	7b1b      	ldrb	r3, [r3, #12]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fc6f 	bl	8008e10 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2204      	movs	r2, #4
 8008536:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800853a:	e035      	b.n	80085a8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	7b1b      	ldrb	r3, [r3, #12]
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 ff14 	bl	8009370 <USBH_LL_GetURBState>
 8008548:	4603      	mov	r3, r0
 800854a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800854c:	7cfb      	ldrb	r3, [r7, #19]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d129      	bne.n	80085a6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	7b1b      	ldrb	r3, [r3, #12]
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fe77 	bl	800924c <USBH_LL_GetLastXferSize>
 800855e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	429a      	cmp	r2, r3
 8008568:	d016      	beq.n	8008598 <CDC_ProcessReception+0x9e>
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	8b5b      	ldrh	r3, [r3, #26]
 800856e:	461a      	mov	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4293      	cmp	r3, r2
 8008574:	d910      	bls.n	8008598 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1ad2      	subs	r2, r2, r3
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	6a1a      	ldr	r2, [r3, #32]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	441a      	add	r2, r3
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2203      	movs	r2, #3
 8008592:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008596:	e006      	b.n	80085a6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f80f 	bl	80085c4 <USBH_CDC_ReceiveCallback>
      break;
 80085a6:	bf00      	nop
  }
}
 80085a8:	bf00      	nop
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008600:	2302      	movs	r3, #2
 8008602:	e029      	b.n	8008658 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	79fa      	ldrb	r2, [r7, #7]
 8008608:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 f81f 	bl	8008660 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fd89 	bl	8009168 <USBH_LL_Init>

  return USBH_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e009      	b.n	8008686 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	33e0      	adds	r3, #224	; 0xe0
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	2200      	movs	r2, #0
 800867e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b0e      	cmp	r3, #14
 800868a:	d9f2      	bls.n	8008672 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800868c:	2300      	movs	r3, #0
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e009      	b.n	80086a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3301      	adds	r3, #1
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ac:	d3f1      	bcc.n	8008692 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2240      	movs	r2, #64	; 0x40
 80086d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d016      	beq.n	800874a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10e      	bne.n	8008744 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800872c:	1c59      	adds	r1, r3, #1
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	33de      	adds	r3, #222	; 0xde
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
 8008742:	e004      	b.n	800874e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008744:	2302      	movs	r3, #2
 8008746:	73fb      	strb	r3, [r7, #15]
 8008748:	e001      	b.n	800874e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800874a:	2302      	movs	r3, #2
 800874c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	429a      	cmp	r2, r3
 8008776:	d204      	bcs.n	8008782 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008780:	e001      	b.n	8008786 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008782:	2302      	movs	r3, #2
 8008784:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	4608      	mov	r0, r1
 800879e:	4611      	mov	r1, r2
 80087a0:	461a      	mov	r2, r3
 80087a2:	4603      	mov	r3, r0
 80087a4:	70fb      	strb	r3, [r7, #3]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70bb      	strb	r3, [r7, #2]
 80087aa:	4613      	mov	r3, r2
 80087ac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087bc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087be:	e025      	b.n	800880c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	221a      	movs	r2, #26
 80087c4:	fb02 f303 	mul.w	r3, r2, r3
 80087c8:	3308      	adds	r3, #8
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4413      	add	r3, r2
 80087ce:	3302      	adds	r3, #2
 80087d0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	795b      	ldrb	r3, [r3, #5]
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d002      	beq.n	80087e2 <USBH_FindInterface+0x4e>
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	2bff      	cmp	r3, #255	; 0xff
 80087e0:	d111      	bne.n	8008806 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087e6:	78ba      	ldrb	r2, [r7, #2]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d002      	beq.n	80087f2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087ec:	78bb      	ldrb	r3, [r7, #2]
 80087ee:	2bff      	cmp	r3, #255	; 0xff
 80087f0:	d109      	bne.n	8008806 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087f6:	787a      	ldrb	r2, [r7, #1]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d002      	beq.n	8008802 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087fc:	787b      	ldrb	r3, [r7, #1]
 80087fe:	2bff      	cmp	r3, #255	; 0xff
 8008800:	d101      	bne.n	8008806 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	e006      	b.n	8008814 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	3301      	adds	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d9d6      	bls.n	80087c0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008812:	23ff      	movs	r3, #255	; 0xff
}
 8008814:	4618      	mov	r0, r3
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fcd9 	bl	80091e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800882e:	2101      	movs	r1, #1
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fdb0 	bl	8009396 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f804 	bl	8008882 <USBH_HandleSof>
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b0b      	cmp	r3, #11
 8008892:	d10a      	bne.n	80088aa <USBH_HandleSof+0x28>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d005      	beq.n	80088aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
  }
}
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80088c2:	bf00      	nop
}
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80088de:	bf00      	nop
}
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fc6c 	bl	8009216 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	791b      	ldrb	r3, [r3, #4]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fad1 	bl	8008eec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	795b      	ldrb	r3, [r3, #5]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 facb 	bl	8008eec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	789b      	ldrb	r3, [r3, #2]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d10f      	bne.n	8008994 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	b29a      	uxth	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008994:	2200      	movs	r2, #0
 8008996:	2100      	movs	r1, #0
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f805 	bl	80089a8 <USBH_CtlReq>
 800899e:	4603      	mov	r3, r0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	4613      	mov	r3, r2
 80089b4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	789b      	ldrb	r3, [r3, #2]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d002      	beq.n	80089c8 <USBH_CtlReq+0x20>
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d00f      	beq.n	80089e6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80089c6:	e027      	b.n	8008a18 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	88fa      	ldrh	r2, [r7, #6]
 80089d2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2202      	movs	r2, #2
 80089de:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80089e0:	2301      	movs	r3, #1
 80089e2:	75fb      	strb	r3, [r7, #23]
      break;
 80089e4:	e018      	b.n	8008a18 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 f81c 	bl	8008a24 <USBH_HandleControl>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <USBH_CtlReq+0x54>
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d106      	bne.n	8008a0a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	761a      	strb	r2, [r3, #24]
      break;
 8008a08:	e005      	b.n	8008a16 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d102      	bne.n	8008a16 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	709a      	strb	r2, [r3, #2]
      break;
 8008a16:	bf00      	nop
  }
  return status;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7e1b      	ldrb	r3, [r3, #24]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	2b0a      	cmp	r3, #10
 8008a3c:	f200 8156 	bhi.w	8008cec <USBH_HandleControl+0x2c8>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <USBH_HandleControl+0x24>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a75 	.word	0x08008a75
 8008a4c:	08008a8f 	.word	0x08008a8f
 8008a50:	08008af9 	.word	0x08008af9
 8008a54:	08008b1f 	.word	0x08008b1f
 8008a58:	08008b57 	.word	0x08008b57
 8008a5c:	08008b81 	.word	0x08008b81
 8008a60:	08008bd3 	.word	0x08008bd3
 8008a64:	08008bf5 	.word	0x08008bf5
 8008a68:	08008c31 	.word	0x08008c31
 8008a6c:	08008c57 	.word	0x08008c57
 8008a70:	08008c95 	.word	0x08008c95
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f103 0110 	add.w	r1, r3, #16
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	795b      	ldrb	r3, [r3, #5]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f943 	bl	8008d0c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2202      	movs	r2, #2
 8008a8a:	761a      	strb	r2, [r3, #24]
      break;
 8008a8c:	e139      	b.n	8008d02 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	795b      	ldrb	r3, [r3, #5]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc6b 	bl	8009370 <USBH_LL_GetURBState>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d11e      	bne.n	8008ae2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	7c1b      	ldrb	r3, [r3, #16]
 8008aa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008aac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	8adb      	ldrh	r3, [r3, #22]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008ab6:	7b7b      	ldrb	r3, [r7, #13]
 8008ab8:	2b80      	cmp	r3, #128	; 0x80
 8008aba:	d103      	bne.n	8008ac4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2203      	movs	r2, #3
 8008ac0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ac2:	e115      	b.n	8008cf0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2205      	movs	r2, #5
 8008ac8:	761a      	strb	r2, [r3, #24]
      break;
 8008aca:	e111      	b.n	8008cf0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008acc:	7b7b      	ldrb	r3, [r7, #13]
 8008ace:	2b80      	cmp	r3, #128	; 0x80
 8008ad0:	d103      	bne.n	8008ada <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2209      	movs	r2, #9
 8008ad6:	761a      	strb	r2, [r3, #24]
      break;
 8008ad8:	e10a      	b.n	8008cf0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2207      	movs	r2, #7
 8008ade:	761a      	strb	r2, [r3, #24]
      break;
 8008ae0:	e106      	b.n	8008cf0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d003      	beq.n	8008af0 <USBH_HandleControl+0xcc>
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	f040 8100 	bne.w	8008cf0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	220b      	movs	r2, #11
 8008af4:	761a      	strb	r2, [r3, #24]
      break;
 8008af6:	e0fb      	b.n	8008cf0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6899      	ldr	r1, [r3, #8]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	899a      	ldrh	r2, [r3, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	791b      	ldrb	r3, [r3, #4]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f93a 	bl	8008d8a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2204      	movs	r2, #4
 8008b1a:	761a      	strb	r2, [r3, #24]
      break;
 8008b1c:	e0f1      	b.n	8008d02 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	791b      	ldrb	r3, [r3, #4]
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fc23 	bl	8009370 <USBH_LL_GetURBState>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d102      	bne.n	8008b3a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2209      	movs	r2, #9
 8008b38:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b05      	cmp	r3, #5
 8008b3e:	d102      	bne.n	8008b46 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008b40:	2303      	movs	r3, #3
 8008b42:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b44:	e0d6      	b.n	8008cf4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	f040 80d3 	bne.w	8008cf4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	220b      	movs	r2, #11
 8008b52:	761a      	strb	r2, [r3, #24]
      break;
 8008b54:	e0ce      	b.n	8008cf4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6899      	ldr	r1, [r3, #8]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	899a      	ldrh	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	795b      	ldrb	r3, [r3, #5]
 8008b62:	2001      	movs	r0, #1
 8008b64:	9000      	str	r0, [sp, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f8ea 	bl	8008d40 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2206      	movs	r2, #6
 8008b7c:	761a      	strb	r2, [r3, #24]
      break;
 8008b7e:	e0c0      	b.n	8008d02 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	795b      	ldrb	r3, [r3, #5]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fbf2 	bl	8009370 <USBH_LL_GetURBState>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d103      	bne.n	8008b9e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2207      	movs	r2, #7
 8008b9a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b9c:	e0ac      	b.n	8008cf8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	2b05      	cmp	r3, #5
 8008ba2:	d105      	bne.n	8008bb0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	220c      	movs	r2, #12
 8008ba8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008baa:	2303      	movs	r3, #3
 8008bac:	73fb      	strb	r3, [r7, #15]
      break;
 8008bae:	e0a3      	b.n	8008cf8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d103      	bne.n	8008bbe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2205      	movs	r2, #5
 8008bba:	761a      	strb	r2, [r3, #24]
      break;
 8008bbc:	e09c      	b.n	8008cf8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	f040 8099 	bne.w	8008cf8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	220b      	movs	r2, #11
 8008bca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd0:	e092      	b.n	8008cf8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	791b      	ldrb	r3, [r3, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2100      	movs	r1, #0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f8d5 	bl	8008d8a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2208      	movs	r2, #8
 8008bf0:	761a      	strb	r2, [r3, #24]

      break;
 8008bf2:	e086      	b.n	8008d02 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	791b      	ldrb	r3, [r3, #4]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fbb8 	bl	8009370 <USBH_LL_GetURBState>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d105      	bne.n	8008c16 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	220d      	movs	r2, #13
 8008c0e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008c14:	e072      	b.n	8008cfc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d103      	bne.n	8008c24 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	220b      	movs	r2, #11
 8008c20:	761a      	strb	r2, [r3, #24]
      break;
 8008c22:	e06b      	b.n	8008cfc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d168      	bne.n	8008cfc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2e:	e065      	b.n	8008cfc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	795b      	ldrb	r3, [r3, #5]
 8008c34:	2201      	movs	r2, #1
 8008c36:	9200      	str	r2, [sp, #0]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f87f 	bl	8008d40 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	220a      	movs	r2, #10
 8008c52:	761a      	strb	r2, [r3, #24]
      break;
 8008c54:	e055      	b.n	8008d02 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	795b      	ldrb	r3, [r3, #5]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fb87 	bl	8009370 <USBH_LL_GetURBState>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d105      	bne.n	8008c78 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	220d      	movs	r2, #13
 8008c74:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008c76:	e043      	b.n	8008d00 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d103      	bne.n	8008c86 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2209      	movs	r2, #9
 8008c82:	761a      	strb	r2, [r3, #24]
      break;
 8008c84:	e03c      	b.n	8008d00 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d139      	bne.n	8008d00 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	220b      	movs	r2, #11
 8008c90:	761a      	strb	r2, [r3, #24]
      break;
 8008c92:	e035      	b.n	8008d00 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7e5b      	ldrb	r3, [r3, #25]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	765a      	strb	r2, [r3, #25]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	7e5b      	ldrb	r3, [r3, #25]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d806      	bhi.n	8008cb6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008cb4:	e025      	b.n	8008d02 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cbc:	2106      	movs	r1, #6
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	795b      	ldrb	r3, [r3, #5]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f90c 	bl	8008eec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	791b      	ldrb	r3, [r3, #4]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f906 	bl	8008eec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cea:	e00a      	b.n	8008d02 <USBH_HandleControl+0x2de>

    default:
      break;
 8008cec:	bf00      	nop
 8008cee:	e008      	b.n	8008d02 <USBH_HandleControl+0x2de>
      break;
 8008cf0:	bf00      	nop
 8008cf2:	e006      	b.n	8008d02 <USBH_HandleControl+0x2de>
      break;
 8008cf4:	bf00      	nop
 8008cf6:	e004      	b.n	8008d02 <USBH_HandleControl+0x2de>
      break;
 8008cf8:	bf00      	nop
 8008cfa:	e002      	b.n	8008d02 <USBH_HandleControl+0x2de>
      break;
 8008cfc:	bf00      	nop
 8008cfe:	e000      	b.n	8008d02 <USBH_HandleControl+0x2de>
      break;
 8008d00:	bf00      	nop
  }

  return status;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af04      	add	r7, sp, #16
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008d1a:	79f9      	ldrb	r1, [r7, #7]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	2308      	movs	r3, #8
 8008d22:	9302      	str	r3, [sp, #8]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	2200      	movs	r2, #0
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 faec 	bl	800930e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af04      	add	r7, sp, #16
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	460b      	mov	r3, r1
 8008d50:	80fb      	strh	r3, [r7, #6]
 8008d52:	4613      	mov	r3, r2
 8008d54:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008d64:	7979      	ldrb	r1, [r7, #5]
 8008d66:	7e3b      	ldrb	r3, [r7, #24]
 8008d68:	9303      	str	r3, [sp, #12]
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	9302      	str	r3, [sp, #8]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	2301      	movs	r3, #1
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	2300      	movs	r3, #0
 8008d78:	2200      	movs	r2, #0
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fac7 	bl	800930e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b088      	sub	sp, #32
 8008d8e:	af04      	add	r7, sp, #16
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	4611      	mov	r1, r2
 8008d96:	461a      	mov	r2, r3
 8008d98:	460b      	mov	r3, r1
 8008d9a:	80fb      	strh	r3, [r7, #6]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008da0:	7979      	ldrb	r1, [r7, #5]
 8008da2:	2300      	movs	r3, #0
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	88fb      	ldrh	r3, [r7, #6]
 8008da8:	9302      	str	r3, [sp, #8]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	2301      	movs	r3, #1
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	2300      	movs	r3, #0
 8008db4:	2201      	movs	r2, #1
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 faa9 	bl	800930e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008dbc:	2300      	movs	r3, #0

}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b088      	sub	sp, #32
 8008dca:	af04      	add	r7, sp, #16
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	80fb      	strh	r3, [r7, #6]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008dea:	7979      	ldrb	r1, [r7, #5]
 8008dec:	7e3b      	ldrb	r3, [r7, #24]
 8008dee:	9303      	str	r3, [sp, #12]
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	9302      	str	r3, [sp, #8]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	2301      	movs	r3, #1
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	2200      	movs	r2, #0
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fa84 	bl	800930e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af04      	add	r7, sp, #16
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	460b      	mov	r3, r1
 8008e20:	80fb      	strh	r3, [r7, #6]
 8008e22:	4613      	mov	r3, r2
 8008e24:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008e26:	7979      	ldrb	r1, [r7, #5]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9303      	str	r3, [sp, #12]
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	2301      	movs	r3, #1
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	2302      	movs	r3, #2
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 fa66 	bl	800930e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af04      	add	r7, sp, #16
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	461a      	mov	r2, r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	70fb      	strb	r3, [r7, #3]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70bb      	strb	r3, [r7, #2]
 8008e62:	4613      	mov	r3, r2
 8008e64:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e66:	7878      	ldrb	r0, [r7, #1]
 8008e68:	78ba      	ldrb	r2, [r7, #2]
 8008e6a:	78f9      	ldrb	r1, [r7, #3]
 8008e6c:	8b3b      	ldrh	r3, [r7, #24]
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	7d3b      	ldrb	r3, [r7, #20]
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	7c3b      	ldrb	r3, [r7, #16]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	4603      	mov	r3, r0
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f9f9 	bl	8009272 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa18 	bl	80092d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f836 	bl	8008f28 <USBH_GetFreePipe>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ec0:	89fb      	ldrh	r3, [r7, #14]
 8008ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d00a      	beq.n	8008ee0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	89fb      	ldrh	r3, [r7, #14]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	33e0      	adds	r3, #224	; 0xe0
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ee0:	89fb      	ldrh	r3, [r7, #14]
 8008ee2:	b2db      	uxtb	r3, r3
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	2b0a      	cmp	r3, #10
 8008efc:	d80d      	bhi.n	8008f1a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	33e0      	adds	r3, #224	; 0xe0
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	33e0      	adds	r3, #224	; 0xe0
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
 8008f38:	e00f      	b.n	8008f5a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	33e0      	adds	r3, #224	; 0xe0
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	e007      	b.n	8008f64 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	3301      	adds	r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b0a      	cmp	r3, #10
 8008f5e:	d9ec      	bls.n	8008f3a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008f74:	2201      	movs	r2, #1
 8008f76:	490e      	ldr	r1, [pc, #56]	; (8008fb0 <MX_USB_HOST_Init+0x40>)
 8008f78:	480e      	ldr	r0, [pc, #56]	; (8008fb4 <MX_USB_HOST_Init+0x44>)
 8008f7a:	f7ff fb37 	bl	80085ec <USBH_Init>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008f84:	f7f8 fee4 	bl	8001d50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008f88:	490b      	ldr	r1, [pc, #44]	; (8008fb8 <MX_USB_HOST_Init+0x48>)
 8008f8a:	480a      	ldr	r0, [pc, #40]	; (8008fb4 <MX_USB_HOST_Init+0x44>)
 8008f8c:	f7ff fbbc 	bl	8008708 <USBH_RegisterClass>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008f96:	f7f8 fedb 	bl	8001d50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008f9a:	4806      	ldr	r0, [pc, #24]	; (8008fb4 <MX_USB_HOST_Init+0x44>)
 8008f9c:	f7ff fc40 	bl	8008820 <USBH_Start>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008fa6:	f7f8 fed3 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008faa:	bf00      	nop
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	08008fbd 	.word	0x08008fbd
 8008fb4:	20000314 	.word	0x20000314
 8008fb8:	20000020 	.word	0x20000020

08008fbc <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d819      	bhi.n	8009004 <USBH_UserProcess+0x48>
 8008fd0:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <USBH_UserProcess+0x1c>)
 8008fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd6:	bf00      	nop
 8008fd8:	08009005 	.word	0x08009005
 8008fdc:	08008ff5 	.word	0x08008ff5
 8008fe0:	08009005 	.word	0x08009005
 8008fe4:	08008ffd 	.word	0x08008ffd
 8008fe8:	08008fed 	.word	0x08008fed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008fec:	4b09      	ldr	r3, [pc, #36]	; (8009014 <USBH_UserProcess+0x58>)
 8008fee:	2203      	movs	r2, #3
 8008ff0:	701a      	strb	r2, [r3, #0]
  break;
 8008ff2:	e008      	b.n	8009006 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <USBH_UserProcess+0x58>)
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	701a      	strb	r2, [r3, #0]
  break;
 8008ffa:	e004      	b.n	8009006 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ffc:	4b05      	ldr	r3, [pc, #20]	; (8009014 <USBH_UserProcess+0x58>)
 8008ffe:	2201      	movs	r2, #1
 8009000:	701a      	strb	r2, [r3, #0]
  break;
 8009002:	e000      	b.n	8009006 <USBH_UserProcess+0x4a>

  default:
  break;
 8009004:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	200000f0 	.word	0x200000f0

08009018 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08a      	sub	sp, #40	; 0x28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009020:	f107 0314 	add.w	r3, r7, #20
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	605a      	str	r2, [r3, #4]
 800902a:	609a      	str	r2, [r3, #8]
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009038:	d13a      	bne.n	80090b0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800903a:	2300      	movs	r3, #0
 800903c:	613b      	str	r3, [r7, #16]
 800903e:	4b1e      	ldr	r3, [pc, #120]	; (80090b8 <HAL_HCD_MspInit+0xa0>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	4a1d      	ldr	r2, [pc, #116]	; (80090b8 <HAL_HCD_MspInit+0xa0>)
 8009044:	f043 0301 	orr.w	r3, r3, #1
 8009048:	6313      	str	r3, [r2, #48]	; 0x30
 800904a:	4b1b      	ldr	r3, [pc, #108]	; (80090b8 <HAL_HCD_MspInit+0xa0>)
 800904c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009056:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800905a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800905c:	2302      	movs	r3, #2
 800905e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009060:	2300      	movs	r3, #0
 8009062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009064:	2300      	movs	r3, #0
 8009066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009068:	230a      	movs	r3, #10
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800906c:	f107 0314 	add.w	r3, r7, #20
 8009070:	4619      	mov	r1, r3
 8009072:	4812      	ldr	r0, [pc, #72]	; (80090bc <HAL_HCD_MspInit+0xa4>)
 8009074:	f7f9 feba 	bl	8002dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009078:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <HAL_HCD_MspInit+0xa0>)
 800907a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907c:	4a0e      	ldr	r2, [pc, #56]	; (80090b8 <HAL_HCD_MspInit+0xa0>)
 800907e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009082:	6353      	str	r3, [r2, #52]	; 0x34
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <HAL_HCD_MspInit+0xa0>)
 800908a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908c:	4a0a      	ldr	r2, [pc, #40]	; (80090b8 <HAL_HCD_MspInit+0xa0>)
 800908e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009092:	6453      	str	r3, [r2, #68]	; 0x44
 8009094:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <HAL_HCD_MspInit+0xa0>)
 8009096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090a0:	2200      	movs	r2, #0
 80090a2:	2100      	movs	r1, #0
 80090a4:	2043      	movs	r0, #67	; 0x43
 80090a6:	f7f9 fe6a 	bl	8002d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090aa:	2043      	movs	r0, #67	; 0x43
 80090ac:	f7f9 fe83 	bl	8002db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090b0:	bf00      	nop
 80090b2:	3728      	adds	r7, #40	; 0x28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	40023800 	.word	0x40023800
 80090bc:	40020000 	.word	0x40020000

080090c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff fbc5 	bl	800885e <USBH_LL_IncTimer>
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff fbfd 	bl	80088ea <USBH_LL_Connect>
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fc06 	bl	8008918 <USBH_LL_Disconnect>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
 8009120:	4613      	mov	r3, r2
 8009122:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fbb7 	bl	80088b2 <USBH_LL_PortEnabled>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fbb7 	bl	80088ce <USBH_LL_PortDisabled>
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009176:	2b01      	cmp	r3, #1
 8009178:	d12a      	bne.n	80091d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800917a:	4a18      	ldr	r2, [pc, #96]	; (80091dc <USBH_LL_Init+0x74>)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a15      	ldr	r2, [pc, #84]	; (80091dc <USBH_LL_Init+0x74>)
 8009186:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800918a:	4b14      	ldr	r3, [pc, #80]	; (80091dc <USBH_LL_Init+0x74>)
 800918c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009190:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009192:	4b12      	ldr	r3, [pc, #72]	; (80091dc <USBH_LL_Init+0x74>)
 8009194:	2208      	movs	r2, #8
 8009196:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009198:	4b10      	ldr	r3, [pc, #64]	; (80091dc <USBH_LL_Init+0x74>)
 800919a:	2201      	movs	r2, #1
 800919c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800919e:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <USBH_LL_Init+0x74>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80091a4:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <USBH_LL_Init+0x74>)
 80091a6:	2202      	movs	r2, #2
 80091a8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091aa:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <USBH_LL_Init+0x74>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80091b0:	480a      	ldr	r0, [pc, #40]	; (80091dc <USBH_LL_Init+0x74>)
 80091b2:	f7fa f81b 	bl	80031ec <HAL_HCD_Init>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80091bc:	f7f8 fdc8 	bl	8001d50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80091c0:	4806      	ldr	r0, [pc, #24]	; (80091dc <USBH_LL_Init+0x74>)
 80091c2:	f7fa fbf0 	bl	80039a6 <HAL_HCD_GetCurrentFrame>
 80091c6:	4603      	mov	r3, r0
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff fb38 	bl	8008840 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	200006ec 	.word	0x200006ec

080091e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fa fb6d 	bl	80038d6 <HAL_HCD_Start>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f90e 	bl	8009424 <USBH_Get_USB_Status>
 8009208:	4603      	mov	r3, r0
 800920a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920c:	7bbb      	ldrb	r3, [r7, #14]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800922c:	4618      	mov	r0, r3
 800922e:	f7fa fb75 	bl	800391c <HAL_HCD_Stop>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	4618      	mov	r0, r3
 800923a:	f000 f8f3 	bl	8009424 <USBH_Get_USB_Status>
 800923e:	4603      	mov	r3, r0
 8009240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009242:	7bbb      	ldrb	r3, [r7, #14]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7fa fb8b 	bl	800397e <HAL_HCD_HC_GetXferCount>
 8009268:	4603      	mov	r3, r0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009272:	b590      	push	{r4, r7, lr}
 8009274:	b089      	sub	sp, #36	; 0x24
 8009276:	af04      	add	r7, sp, #16
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	461a      	mov	r2, r3
 8009280:	4603      	mov	r3, r0
 8009282:	70fb      	strb	r3, [r7, #3]
 8009284:	460b      	mov	r3, r1
 8009286:	70bb      	strb	r3, [r7, #2]
 8009288:	4613      	mov	r3, r2
 800928a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800929a:	787c      	ldrb	r4, [r7, #1]
 800929c:	78ba      	ldrb	r2, [r7, #2]
 800929e:	78f9      	ldrb	r1, [r7, #3]
 80092a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	4623      	mov	r3, r4
 80092b2:	f7f9 fffd 	bl	80032b0 <HAL_HCD_HC_Init>
 80092b6:	4603      	mov	r3, r0
 80092b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f8b1 	bl	8009424 <USBH_Get_USB_Status>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd90      	pop	{r4, r7, pc}

080092d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	4611      	mov	r1, r2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fa f86d 	bl	80033ce <HAL_HCD_HC_Halt>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f892 	bl	8009424 <USBH_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009304:	7bbb      	ldrb	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800930e:	b590      	push	{r4, r7, lr}
 8009310:	b089      	sub	sp, #36	; 0x24
 8009312:	af04      	add	r7, sp, #16
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	461a      	mov	r2, r3
 800931c:	4603      	mov	r3, r0
 800931e:	70fb      	strb	r3, [r7, #3]
 8009320:	460b      	mov	r3, r1
 8009322:	70bb      	strb	r3, [r7, #2]
 8009324:	4613      	mov	r3, r2
 8009326:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009336:	787c      	ldrb	r4, [r7, #1]
 8009338:	78ba      	ldrb	r2, [r7, #2]
 800933a:	78f9      	ldrb	r1, [r7, #3]
 800933c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009344:	9302      	str	r3, [sp, #8]
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	4623      	mov	r3, r4
 8009352:	f7fa f85f 	bl	8003414 <HAL_HCD_HC_SubmitRequest>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	4618      	mov	r0, r3
 800935e:	f000 f861 	bl	8009424 <USBH_Get_USB_Status>
 8009362:	4603      	mov	r3, r0
 8009364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009366:	7bbb      	ldrb	r3, [r7, #14]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	bd90      	pop	{r4, r7, pc}

08009370 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f7fa fae5 	bl	8003956 <HAL_HCD_HC_GetURBState>
 800938c:	4603      	mov	r3, r0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d103      	bne.n	80093b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f864 	bl	800947c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80093b4:	20c8      	movs	r0, #200	; 0xc8
 80093b6:	f7f9 f817 	bl	80023e8 <HAL_Delay>
  return USBH_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
 80093d0:	4613      	mov	r3, r2
 80093d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	212c      	movs	r1, #44	; 0x2c
 80093e2:	fb01 f303 	mul.w	r3, r1, r3
 80093e6:	4413      	add	r3, r2
 80093e8:	333b      	adds	r3, #59	; 0x3b
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	212c      	movs	r1, #44	; 0x2c
 80093f6:	fb01 f303 	mul.w	r3, r1, r3
 80093fa:	4413      	add	r3, r2
 80093fc:	3354      	adds	r3, #84	; 0x54
 80093fe:	78ba      	ldrb	r2, [r7, #2]
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	e008      	b.n	8009416 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	212c      	movs	r1, #44	; 0x2c
 800940a:	fb01 f303 	mul.w	r3, r1, r3
 800940e:	4413      	add	r3, r2
 8009410:	3355      	adds	r3, #85	; 0x55
 8009412:	78ba      	ldrb	r2, [r7, #2]
 8009414:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	2b03      	cmp	r3, #3
 8009436:	d817      	bhi.n	8009468 <USBH_Get_USB_Status+0x44>
 8009438:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <USBH_Get_USB_Status+0x1c>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	08009451 	.word	0x08009451
 8009444:	08009457 	.word	0x08009457
 8009448:	0800945d 	.word	0x0800945d
 800944c:	08009463 	.word	0x08009463
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]
    break;
 8009454:	e00b      	b.n	800946e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009456:	2302      	movs	r3, #2
 8009458:	73fb      	strb	r3, [r7, #15]
    break;
 800945a:	e008      	b.n	800946e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800945c:	2301      	movs	r3, #1
 800945e:	73fb      	strb	r3, [r7, #15]
    break;
 8009460:	e005      	b.n	800946e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009462:	2302      	movs	r3, #2
 8009464:	73fb      	strb	r3, [r7, #15]
    break;
 8009466:	e002      	b.n	800946e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009468:	2302      	movs	r3, #2
 800946a:	73fb      	strb	r3, [r7, #15]
    break;
 800946c:	bf00      	nop
  }
  return usb_status;
 800946e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800948a:	79fb      	ldrb	r3, [r7, #7]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009490:	2301      	movs	r3, #1
 8009492:	73fb      	strb	r3, [r7, #15]
 8009494:	e001      	b.n	800949a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	461a      	mov	r2, r3
 800949e:	2101      	movs	r1, #1
 80094a0:	4803      	ldr	r0, [pc, #12]	; (80094b0 <MX_DriverVbusFS+0x34>)
 80094a2:	f7f9 fe57 	bl	8003154 <HAL_GPIO_WritePin>
}
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40020800 	.word	0x40020800

080094b4 <__errno>:
 80094b4:	4b01      	ldr	r3, [pc, #4]	; (80094bc <__errno+0x8>)
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20000040 	.word	0x20000040

080094c0 <__libc_init_array>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	4d0d      	ldr	r5, [pc, #52]	; (80094f8 <__libc_init_array+0x38>)
 80094c4:	4c0d      	ldr	r4, [pc, #52]	; (80094fc <__libc_init_array+0x3c>)
 80094c6:	1b64      	subs	r4, r4, r5
 80094c8:	10a4      	asrs	r4, r4, #2
 80094ca:	2600      	movs	r6, #0
 80094cc:	42a6      	cmp	r6, r4
 80094ce:	d109      	bne.n	80094e4 <__libc_init_array+0x24>
 80094d0:	4d0b      	ldr	r5, [pc, #44]	; (8009500 <__libc_init_array+0x40>)
 80094d2:	4c0c      	ldr	r4, [pc, #48]	; (8009504 <__libc_init_array+0x44>)
 80094d4:	f000 f954 	bl	8009780 <_init>
 80094d8:	1b64      	subs	r4, r4, r5
 80094da:	10a4      	asrs	r4, r4, #2
 80094dc:	2600      	movs	r6, #0
 80094de:	42a6      	cmp	r6, r4
 80094e0:	d105      	bne.n	80094ee <__libc_init_array+0x2e>
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e8:	4798      	blx	r3
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7ee      	b.n	80094cc <__libc_init_array+0xc>
 80094ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f2:	4798      	blx	r3
 80094f4:	3601      	adds	r6, #1
 80094f6:	e7f2      	b.n	80094de <__libc_init_array+0x1e>
 80094f8:	08009884 	.word	0x08009884
 80094fc:	08009884 	.word	0x08009884
 8009500:	08009884 	.word	0x08009884
 8009504:	08009888 	.word	0x08009888

08009508 <__itoa>:
 8009508:	1e93      	subs	r3, r2, #2
 800950a:	2b22      	cmp	r3, #34	; 0x22
 800950c:	b510      	push	{r4, lr}
 800950e:	460c      	mov	r4, r1
 8009510:	d904      	bls.n	800951c <__itoa+0x14>
 8009512:	2300      	movs	r3, #0
 8009514:	700b      	strb	r3, [r1, #0]
 8009516:	461c      	mov	r4, r3
 8009518:	4620      	mov	r0, r4
 800951a:	bd10      	pop	{r4, pc}
 800951c:	2a0a      	cmp	r2, #10
 800951e:	d109      	bne.n	8009534 <__itoa+0x2c>
 8009520:	2800      	cmp	r0, #0
 8009522:	da07      	bge.n	8009534 <__itoa+0x2c>
 8009524:	232d      	movs	r3, #45	; 0x2d
 8009526:	700b      	strb	r3, [r1, #0]
 8009528:	4240      	negs	r0, r0
 800952a:	2101      	movs	r1, #1
 800952c:	4421      	add	r1, r4
 800952e:	f000 f8d7 	bl	80096e0 <__utoa>
 8009532:	e7f1      	b.n	8009518 <__itoa+0x10>
 8009534:	2100      	movs	r1, #0
 8009536:	e7f9      	b.n	800952c <__itoa+0x24>

08009538 <itoa>:
 8009538:	f7ff bfe6 	b.w	8009508 <__itoa>

0800953c <malloc>:
 800953c:	4b02      	ldr	r3, [pc, #8]	; (8009548 <malloc+0xc>)
 800953e:	4601      	mov	r1, r0
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f000 b863 	b.w	800960c <_malloc_r>
 8009546:	bf00      	nop
 8009548:	20000040 	.word	0x20000040

0800954c <free>:
 800954c:	4b02      	ldr	r3, [pc, #8]	; (8009558 <free+0xc>)
 800954e:	4601      	mov	r1, r0
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	f000 b80b 	b.w	800956c <_free_r>
 8009556:	bf00      	nop
 8009558:	20000040 	.word	0x20000040

0800955c <memset>:
 800955c:	4402      	add	r2, r0
 800955e:	4603      	mov	r3, r0
 8009560:	4293      	cmp	r3, r2
 8009562:	d100      	bne.n	8009566 <memset+0xa>
 8009564:	4770      	bx	lr
 8009566:	f803 1b01 	strb.w	r1, [r3], #1
 800956a:	e7f9      	b.n	8009560 <memset+0x4>

0800956c <_free_r>:
 800956c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800956e:	2900      	cmp	r1, #0
 8009570:	d048      	beq.n	8009604 <_free_r+0x98>
 8009572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009576:	9001      	str	r0, [sp, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	f1a1 0404 	sub.w	r4, r1, #4
 800957e:	bfb8      	it	lt
 8009580:	18e4      	addlt	r4, r4, r3
 8009582:	f000 f8ef 	bl	8009764 <__malloc_lock>
 8009586:	4a20      	ldr	r2, [pc, #128]	; (8009608 <_free_r+0x9c>)
 8009588:	9801      	ldr	r0, [sp, #4]
 800958a:	6813      	ldr	r3, [r2, #0]
 800958c:	4615      	mov	r5, r2
 800958e:	b933      	cbnz	r3, 800959e <_free_r+0x32>
 8009590:	6063      	str	r3, [r4, #4]
 8009592:	6014      	str	r4, [r2, #0]
 8009594:	b003      	add	sp, #12
 8009596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800959a:	f000 b8e9 	b.w	8009770 <__malloc_unlock>
 800959e:	42a3      	cmp	r3, r4
 80095a0:	d90b      	bls.n	80095ba <_free_r+0x4e>
 80095a2:	6821      	ldr	r1, [r4, #0]
 80095a4:	1862      	adds	r2, r4, r1
 80095a6:	4293      	cmp	r3, r2
 80095a8:	bf04      	itt	eq
 80095aa:	681a      	ldreq	r2, [r3, #0]
 80095ac:	685b      	ldreq	r3, [r3, #4]
 80095ae:	6063      	str	r3, [r4, #4]
 80095b0:	bf04      	itt	eq
 80095b2:	1852      	addeq	r2, r2, r1
 80095b4:	6022      	streq	r2, [r4, #0]
 80095b6:	602c      	str	r4, [r5, #0]
 80095b8:	e7ec      	b.n	8009594 <_free_r+0x28>
 80095ba:	461a      	mov	r2, r3
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	b10b      	cbz	r3, 80095c4 <_free_r+0x58>
 80095c0:	42a3      	cmp	r3, r4
 80095c2:	d9fa      	bls.n	80095ba <_free_r+0x4e>
 80095c4:	6811      	ldr	r1, [r2, #0]
 80095c6:	1855      	adds	r5, r2, r1
 80095c8:	42a5      	cmp	r5, r4
 80095ca:	d10b      	bne.n	80095e4 <_free_r+0x78>
 80095cc:	6824      	ldr	r4, [r4, #0]
 80095ce:	4421      	add	r1, r4
 80095d0:	1854      	adds	r4, r2, r1
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	6011      	str	r1, [r2, #0]
 80095d6:	d1dd      	bne.n	8009594 <_free_r+0x28>
 80095d8:	681c      	ldr	r4, [r3, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	6053      	str	r3, [r2, #4]
 80095de:	4421      	add	r1, r4
 80095e0:	6011      	str	r1, [r2, #0]
 80095e2:	e7d7      	b.n	8009594 <_free_r+0x28>
 80095e4:	d902      	bls.n	80095ec <_free_r+0x80>
 80095e6:	230c      	movs	r3, #12
 80095e8:	6003      	str	r3, [r0, #0]
 80095ea:	e7d3      	b.n	8009594 <_free_r+0x28>
 80095ec:	6825      	ldr	r5, [r4, #0]
 80095ee:	1961      	adds	r1, r4, r5
 80095f0:	428b      	cmp	r3, r1
 80095f2:	bf04      	itt	eq
 80095f4:	6819      	ldreq	r1, [r3, #0]
 80095f6:	685b      	ldreq	r3, [r3, #4]
 80095f8:	6063      	str	r3, [r4, #4]
 80095fa:	bf04      	itt	eq
 80095fc:	1949      	addeq	r1, r1, r5
 80095fe:	6021      	streq	r1, [r4, #0]
 8009600:	6054      	str	r4, [r2, #4]
 8009602:	e7c7      	b.n	8009594 <_free_r+0x28>
 8009604:	b003      	add	sp, #12
 8009606:	bd30      	pop	{r4, r5, pc}
 8009608:	200000f4 	.word	0x200000f4

0800960c <_malloc_r>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	1ccd      	adds	r5, r1, #3
 8009610:	f025 0503 	bic.w	r5, r5, #3
 8009614:	3508      	adds	r5, #8
 8009616:	2d0c      	cmp	r5, #12
 8009618:	bf38      	it	cc
 800961a:	250c      	movcc	r5, #12
 800961c:	2d00      	cmp	r5, #0
 800961e:	4606      	mov	r6, r0
 8009620:	db01      	blt.n	8009626 <_malloc_r+0x1a>
 8009622:	42a9      	cmp	r1, r5
 8009624:	d903      	bls.n	800962e <_malloc_r+0x22>
 8009626:	230c      	movs	r3, #12
 8009628:	6033      	str	r3, [r6, #0]
 800962a:	2000      	movs	r0, #0
 800962c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962e:	f000 f899 	bl	8009764 <__malloc_lock>
 8009632:	4921      	ldr	r1, [pc, #132]	; (80096b8 <_malloc_r+0xac>)
 8009634:	680a      	ldr	r2, [r1, #0]
 8009636:	4614      	mov	r4, r2
 8009638:	b99c      	cbnz	r4, 8009662 <_malloc_r+0x56>
 800963a:	4f20      	ldr	r7, [pc, #128]	; (80096bc <_malloc_r+0xb0>)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	b923      	cbnz	r3, 800964a <_malloc_r+0x3e>
 8009640:	4621      	mov	r1, r4
 8009642:	4630      	mov	r0, r6
 8009644:	f000 f83c 	bl	80096c0 <_sbrk_r>
 8009648:	6038      	str	r0, [r7, #0]
 800964a:	4629      	mov	r1, r5
 800964c:	4630      	mov	r0, r6
 800964e:	f000 f837 	bl	80096c0 <_sbrk_r>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	d123      	bne.n	800969e <_malloc_r+0x92>
 8009656:	230c      	movs	r3, #12
 8009658:	6033      	str	r3, [r6, #0]
 800965a:	4630      	mov	r0, r6
 800965c:	f000 f888 	bl	8009770 <__malloc_unlock>
 8009660:	e7e3      	b.n	800962a <_malloc_r+0x1e>
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	1b5b      	subs	r3, r3, r5
 8009666:	d417      	bmi.n	8009698 <_malloc_r+0x8c>
 8009668:	2b0b      	cmp	r3, #11
 800966a:	d903      	bls.n	8009674 <_malloc_r+0x68>
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	441c      	add	r4, r3
 8009670:	6025      	str	r5, [r4, #0]
 8009672:	e004      	b.n	800967e <_malloc_r+0x72>
 8009674:	6863      	ldr	r3, [r4, #4]
 8009676:	42a2      	cmp	r2, r4
 8009678:	bf0c      	ite	eq
 800967a:	600b      	streq	r3, [r1, #0]
 800967c:	6053      	strne	r3, [r2, #4]
 800967e:	4630      	mov	r0, r6
 8009680:	f000 f876 	bl	8009770 <__malloc_unlock>
 8009684:	f104 000b 	add.w	r0, r4, #11
 8009688:	1d23      	adds	r3, r4, #4
 800968a:	f020 0007 	bic.w	r0, r0, #7
 800968e:	1ac2      	subs	r2, r0, r3
 8009690:	d0cc      	beq.n	800962c <_malloc_r+0x20>
 8009692:	1a1b      	subs	r3, r3, r0
 8009694:	50a3      	str	r3, [r4, r2]
 8009696:	e7c9      	b.n	800962c <_malloc_r+0x20>
 8009698:	4622      	mov	r2, r4
 800969a:	6864      	ldr	r4, [r4, #4]
 800969c:	e7cc      	b.n	8009638 <_malloc_r+0x2c>
 800969e:	1cc4      	adds	r4, r0, #3
 80096a0:	f024 0403 	bic.w	r4, r4, #3
 80096a4:	42a0      	cmp	r0, r4
 80096a6:	d0e3      	beq.n	8009670 <_malloc_r+0x64>
 80096a8:	1a21      	subs	r1, r4, r0
 80096aa:	4630      	mov	r0, r6
 80096ac:	f000 f808 	bl	80096c0 <_sbrk_r>
 80096b0:	3001      	adds	r0, #1
 80096b2:	d1dd      	bne.n	8009670 <_malloc_r+0x64>
 80096b4:	e7cf      	b.n	8009656 <_malloc_r+0x4a>
 80096b6:	bf00      	nop
 80096b8:	200000f4 	.word	0x200000f4
 80096bc:	200000f8 	.word	0x200000f8

080096c0 <_sbrk_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d06      	ldr	r5, [pc, #24]	; (80096dc <_sbrk_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f8 fda8 	bl	8002220 <_sbrk>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_sbrk_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_sbrk_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	200009f0 	.word	0x200009f0

080096e0 <__utoa>:
 80096e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e2:	4c1f      	ldr	r4, [pc, #124]	; (8009760 <__utoa+0x80>)
 80096e4:	b08b      	sub	sp, #44	; 0x2c
 80096e6:	4605      	mov	r5, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	466e      	mov	r6, sp
 80096ec:	f104 0c20 	add.w	ip, r4, #32
 80096f0:	6820      	ldr	r0, [r4, #0]
 80096f2:	6861      	ldr	r1, [r4, #4]
 80096f4:	4637      	mov	r7, r6
 80096f6:	c703      	stmia	r7!, {r0, r1}
 80096f8:	3408      	adds	r4, #8
 80096fa:	4564      	cmp	r4, ip
 80096fc:	463e      	mov	r6, r7
 80096fe:	d1f7      	bne.n	80096f0 <__utoa+0x10>
 8009700:	7921      	ldrb	r1, [r4, #4]
 8009702:	7139      	strb	r1, [r7, #4]
 8009704:	1e91      	subs	r1, r2, #2
 8009706:	6820      	ldr	r0, [r4, #0]
 8009708:	6038      	str	r0, [r7, #0]
 800970a:	2922      	cmp	r1, #34	; 0x22
 800970c:	f04f 0100 	mov.w	r1, #0
 8009710:	d904      	bls.n	800971c <__utoa+0x3c>
 8009712:	7019      	strb	r1, [r3, #0]
 8009714:	460b      	mov	r3, r1
 8009716:	4618      	mov	r0, r3
 8009718:	b00b      	add	sp, #44	; 0x2c
 800971a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971c:	1e58      	subs	r0, r3, #1
 800971e:	4684      	mov	ip, r0
 8009720:	fbb5 f7f2 	udiv	r7, r5, r2
 8009724:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8009728:	fb02 5617 	mls	r6, r2, r7, r5
 800972c:	4476      	add	r6, lr
 800972e:	460c      	mov	r4, r1
 8009730:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009734:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009738:	462e      	mov	r6, r5
 800973a:	42b2      	cmp	r2, r6
 800973c:	f101 0101 	add.w	r1, r1, #1
 8009740:	463d      	mov	r5, r7
 8009742:	d9ed      	bls.n	8009720 <__utoa+0x40>
 8009744:	2200      	movs	r2, #0
 8009746:	545a      	strb	r2, [r3, r1]
 8009748:	1919      	adds	r1, r3, r4
 800974a:	1aa5      	subs	r5, r4, r2
 800974c:	42aa      	cmp	r2, r5
 800974e:	dae2      	bge.n	8009716 <__utoa+0x36>
 8009750:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009754:	780e      	ldrb	r6, [r1, #0]
 8009756:	7006      	strb	r6, [r0, #0]
 8009758:	3201      	adds	r2, #1
 800975a:	f801 5901 	strb.w	r5, [r1], #-1
 800975e:	e7f4      	b.n	800974a <__utoa+0x6a>
 8009760:	08009854 	.word	0x08009854

08009764 <__malloc_lock>:
 8009764:	4801      	ldr	r0, [pc, #4]	; (800976c <__malloc_lock+0x8>)
 8009766:	f000 b809 	b.w	800977c <__retarget_lock_acquire_recursive>
 800976a:	bf00      	nop
 800976c:	200009f8 	.word	0x200009f8

08009770 <__malloc_unlock>:
 8009770:	4801      	ldr	r0, [pc, #4]	; (8009778 <__malloc_unlock+0x8>)
 8009772:	f000 b804 	b.w	800977e <__retarget_lock_release_recursive>
 8009776:	bf00      	nop
 8009778:	200009f8 	.word	0x200009f8

0800977c <__retarget_lock_acquire_recursive>:
 800977c:	4770      	bx	lr

0800977e <__retarget_lock_release_recursive>:
 800977e:	4770      	bx	lr

08009780 <_init>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr

0800978c <_fini>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr
