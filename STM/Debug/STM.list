
STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c98  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f04  08009f04  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f0c  08009f0c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f0c  08009f0c  00019f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f10  08009f10  00019f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08009f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000994  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a30  20000a30  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000211f3  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041d8  00000000  00000000  000412bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00045498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001508  00000000  00000000  00046b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026622  00000000  00000000  00048038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb12  00000000  00000000  0006e65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de930  00000000  00000000  0008b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00169a9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000632c  00000000  00000000  00169af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e08 	.word	0x08009e08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	08009e08 	.word	0x08009e08

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b96e 	b.w	8000d38 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8083 	bne.w	8000b8a <__udivmoddi4+0x116>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d947      	bls.n	8000b1a <__udivmoddi4+0xa6>
 8000a8a:	fab2 f282 	clz	r2, r2
 8000a8e:	b142      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	f1c2 0020 	rsb	r0, r2, #32
 8000a94:	fa24 f000 	lsr.w	r0, r4, r0
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	4097      	lsls	r7, r2
 8000a9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbbc f6f8 	udiv	r6, ip, r8
 8000aac:	fa1f fe87 	uxth.w	lr, r7
 8000ab0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb06 f10e 	mul.w	r1, r6, lr
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ac6:	f080 8119 	bcs.w	8000cfc <__udivmoddi4+0x288>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8116 	bls.w	8000cfc <__udivmoddi4+0x288>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	443b      	add	r3, r7
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	45a6      	cmp	lr, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8105 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000af6:	45a6      	cmp	lr, r4
 8000af8:	f240 8102 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000afc:	3802      	subs	r0, #2
 8000afe:	443c      	add	r4, r7
 8000b00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b04:	eba4 040e 	sub.w	r4, r4, lr
 8000b08:	2600      	movs	r6, #0
 8000b0a:	b11d      	cbz	r5, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c5 4300 	strd	r4, r3, [r5]
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	b902      	cbnz	r2, 8000b1e <__udivmoddi4+0xaa>
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d150      	bne.n	8000bc8 <__udivmoddi4+0x154>
 8000b26:	1bcb      	subs	r3, r1, r7
 8000b28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b2c:	fa1f f887 	uxth.w	r8, r7
 8000b30:	2601      	movs	r6, #1
 8000b32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b36:	0c21      	lsrs	r1, r4, #16
 8000b38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b40:	fb08 f30c 	mul.w	r3, r8, ip
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000b48:	1879      	adds	r1, r7, r1
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0xe2>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	f200 80e9 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x10c>
 8000b70:	193c      	adds	r4, r7, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x10a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80d9 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e7bf      	b.n	8000b0a <__udivmoddi4+0x96>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x12e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80b1 	beq.w	8000cf6 <__udivmoddi4+0x282>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x1cc>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0x140>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80b8 	bhi.w	8000d24 <__udivmoddi4+0x2b0>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	468c      	mov	ip, r1
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0a8      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000bc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f603 	lsr.w	r6, r0, r3
 8000bd0:	4097      	lsls	r7, r2
 8000bd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bda:	40d9      	lsrs	r1, r3
 8000bdc:	4330      	orrs	r0, r6
 8000bde:	0c03      	lsrs	r3, r0, #16
 8000be0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f108 	mul.w	r1, r6, r8
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x19c>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c02:	f080 808d 	bcs.w	8000d20 <__udivmoddi4+0x2ac>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 808a 	bls.w	8000d20 <__udivmoddi4+0x2ac>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b281      	uxth	r1, r0
 8000c14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c20:	fb00 f308 	mul.w	r3, r0, r8
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x1c4>
 8000c28:	1879      	adds	r1, r7, r1
 8000c2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c2e:	d273      	bcs.n	8000d18 <__udivmoddi4+0x2a4>
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d971      	bls.n	8000d18 <__udivmoddi4+0x2a4>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4439      	add	r1, r7
 8000c38:	1acb      	subs	r3, r1, r3
 8000c3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c3e:	e778      	b.n	8000b32 <__udivmoddi4+0xbe>
 8000c40:	f1c6 0c20 	rsb	ip, r6, #32
 8000c44:	fa03 f406 	lsl.w	r4, r3, r6
 8000c48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	0c3b      	lsrs	r3, r7, #16
 8000c62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c66:	fa1f f884 	uxth.w	r8, r4
 8000c6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c72:	fb09 fa08 	mul.w	sl, r9, r8
 8000c76:	458a      	cmp	sl, r1
 8000c78:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x220>
 8000c82:	1861      	adds	r1, r4, r1
 8000c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c88:	d248      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8a:	458a      	cmp	sl, r1
 8000c8c:	d946      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c92:	4421      	add	r1, r4
 8000c94:	eba1 010a 	sub.w	r1, r1, sl
 8000c98:	b2bf      	uxth	r7, r7
 8000c9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ca6:	fb00 f808 	mul.w	r8, r0, r8
 8000caa:	45b8      	cmp	r8, r7
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x24a>
 8000cae:	19e7      	adds	r7, r4, r7
 8000cb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb4:	d22e      	bcs.n	8000d14 <__udivmoddi4+0x2a0>
 8000cb6:	45b8      	cmp	r8, r7
 8000cb8:	d92c      	bls.n	8000d14 <__udivmoddi4+0x2a0>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4427      	add	r7, r4
 8000cbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc2:	eba7 0708 	sub.w	r7, r7, r8
 8000cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cca:	454f      	cmp	r7, r9
 8000ccc:	46c6      	mov	lr, r8
 8000cce:	4649      	mov	r1, r9
 8000cd0:	d31a      	bcc.n	8000d08 <__udivmoddi4+0x294>
 8000cd2:	d017      	beq.n	8000d04 <__udivmoddi4+0x290>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x27a>
 8000cd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cda:	eb67 0701 	sbc.w	r7, r7, r1
 8000cde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ce2:	40f2      	lsrs	r2, r6
 8000ce4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce8:	40f7      	lsrs	r7, r6
 8000cea:	e9c5 2700 	strd	r2, r7, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	462e      	mov	r6, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e70b      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6fd      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d04:	4543      	cmp	r3, r8
 8000d06:	d2e5      	bcs.n	8000cd4 <__udivmoddi4+0x260>
 8000d08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7df      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e7d2      	b.n	8000cbe <__udivmoddi4+0x24a>
 8000d18:	4660      	mov	r0, ip
 8000d1a:	e78d      	b.n	8000c38 <__udivmoddi4+0x1c4>
 8000d1c:	4681      	mov	r9, r0
 8000d1e:	e7b9      	b.n	8000c94 <__udivmoddi4+0x220>
 8000d20:	4666      	mov	r6, ip
 8000d22:	e775      	b.n	8000c10 <__udivmoddi4+0x19c>
 8000d24:	4630      	mov	r0, r6
 8000d26:	e74a      	b.n	8000bbe <__udivmoddi4+0x14a>
 8000d28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d2c:	4439      	add	r1, r7
 8000d2e:	e713      	b.n	8000b58 <__udivmoddi4+0xe4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	e724      	b.n	8000b80 <__udivmoddi4+0x10c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <delayT1>:
#define DHT11_PIN GPIO_PIN_9

TIM_HandleTypeDef htim1;
uint32_t pMillis, cMillis;

void delayT1 (uint16_t delay){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <delayT1+0x30>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d4e:	bf00      	nop
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <delayT1+0x30>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3f9      	bcc.n	8000d50 <delayT1+0x14>
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200000fc 	.word	0x200000fc

08000d70 <DHT11_Start>:


uint8_t DHT11_Start (void){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	482d      	ldr	r0, [pc, #180]	; (8000e54 <DHT11_Start+0xe4>)
 8000da0:	f002 faf2 	bl	8003388 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	482a      	ldr	r0, [pc, #168]	; (8000e54 <DHT11_Start+0xe4>)
 8000dac:	f002 fca0 	bl	80036f0 <HAL_GPIO_WritePin>
  delayT1(20);   // wait for 20ms
 8000db0:	2014      	movs	r0, #20
 8000db2:	f7ff ffc3 	bl	8000d3c <delayT1>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <DHT11_Start+0xe4>)
 8000dbe:	f002 fc97 	bl	80036f0 <HAL_GPIO_WritePin>
  delayT1 (30);   // wait for 30us
 8000dc2:	201e      	movs	r0, #30
 8000dc4:	f7ff ffba 	bl	8000d3c <delayT1>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481f      	ldr	r0, [pc, #124]	; (8000e54 <DHT11_Start+0xe4>)
 8000dd6:	f002 fad7 	bl	8003388 <HAL_GPIO_Init>
  delayT1 (40);
 8000dda:	2028      	movs	r0, #40	; 0x28
 8000ddc:	f7ff ffae 	bl	8000d3c <delayT1>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de4:	481b      	ldr	r0, [pc, #108]	; (8000e54 <DHT11_Start+0xe4>)
 8000de6:	f002 fc6b 	bl	80036c0 <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10c      	bne.n	8000e0a <DHT11_Start+0x9a>
  {
	  delayT1 (80);
 8000df0:	2050      	movs	r0, #80	; 0x50
 8000df2:	f7ff ffa3 	bl	8000d3c <delayT1>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfa:	4816      	ldr	r0, [pc, #88]	; (8000e54 <DHT11_Start+0xe4>)
 8000dfc:	f002 fc60 	bl	80036c0 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <DHT11_Start+0x9a>
 8000e06:	2301      	movs	r3, #1
 8000e08:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000e0a:	f001 fdaf 	bl	800296c <HAL_GetTick>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <DHT11_Start+0xe8>)
 8000e12:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000e14:	f001 fdaa 	bl	800296c <HAL_GetTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <DHT11_Start+0xec>)
 8000e1c:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e1e:	e004      	b.n	8000e2a <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 8000e20:	f001 fda4 	bl	800296c <HAL_GetTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <DHT11_Start+0xec>)
 8000e28:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2e:	4809      	ldr	r0, [pc, #36]	; (8000e54 <DHT11_Start+0xe4>)
 8000e30:	f002 fc46 	bl	80036c0 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <DHT11_Start+0xd8>
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <DHT11_Start+0xe8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	1c9a      	adds	r2, r3, #2
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <DHT11_Start+0xec>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8eb      	bhi.n	8000e20 <DHT11_Start+0xb0>
  }
  return Response;
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	200000f8 	.word	0x200000f8
 8000e5c:	200000f4 	.word	0x200000f4

08000e60 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e066      	b.n	8000f3a <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000e6c:	f001 fd7e 	bl	800296c <HAL_GetTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a36      	ldr	r2, [pc, #216]	; (8000f4c <DHT11_Read+0xec>)
 8000e74:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000e76:	f001 fd79 	bl	800296c <HAL_GetTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a34      	ldr	r2, [pc, #208]	; (8000f50 <DHT11_Read+0xf0>)
 8000e7e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e80:	e004      	b.n	8000e8c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000e82:	f001 fd73 	bl	800296c <HAL_GetTick>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a31      	ldr	r2, [pc, #196]	; (8000f50 <DHT11_Read+0xf0>)
 8000e8a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	4830      	ldr	r0, [pc, #192]	; (8000f54 <DHT11_Read+0xf4>)
 8000e92:	f002 fc15 	bl	80036c0 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <DHT11_Read+0x4a>
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <DHT11_Read+0xec>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	1c9a      	adds	r2, r3, #2
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <DHT11_Read+0xf0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d8eb      	bhi.n	8000e82 <DHT11_Read+0x22>
    }
    delayT1 (40);   // wait for 40 us
 8000eaa:	2028      	movs	r0, #40	; 0x28
 8000eac:	f7ff ff46 	bl	8000d3c <delayT1>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <DHT11_Read+0xf4>)
 8000eb6:	f002 fc03 	bl	80036c0 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10e      	bne.n	8000ede <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	b25a      	sxtb	r2, r3
 8000ed2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	71bb      	strb	r3, [r7, #6]
 8000edc:	e00b      	b.n	8000ef6 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f1c3 0307 	rsb	r3, r3, #7
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000ef6:	f001 fd39 	bl	800296c <HAL_GetTick>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <DHT11_Read+0xec>)
 8000efe:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000f00:	f001 fd34 	bl	800296c <HAL_GetTick>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <DHT11_Read+0xf0>)
 8000f08:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f0a:	e004      	b.n	8000f16 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000f0c:	f001 fd2e 	bl	800296c <HAL_GetTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <DHT11_Read+0xf0>)
 8000f14:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <DHT11_Read+0xf4>)
 8000f1c:	f002 fbd0 	bl	80036c0 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <DHT11_Read+0xd4>
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <DHT11_Read+0xec>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1c9a      	adds	r2, r3, #2
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <DHT11_Read+0xf0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8eb      	bhi.n	8000f0c <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	3301      	adds	r3, #1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	d995      	bls.n	8000e6c <DHT11_Read+0xc>
    }
  }
  return b;
 8000f40:	79bb      	ldrb	r3, [r7, #6]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000f8 	.word	0x200000f8
 8000f50:	200000f4 	.word	0x200000f4
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <delayT2>:

#define TRIG_PIN GPIO_PIN_13
#define TRIG_PORT GPIOA


void delayT2 (uint16_t delay){
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <delayT2+0x30>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim2) < delay);
 8000f6a:	bf00      	nop
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <delayT2+0x30>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3f9      	bcc.n	8000f6c <delayT2+0x14>
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000144 	.word	0x20000144

08000f8c <HCSR04_Read>:
	htim2 = Usound;
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
}


void HCSR04_Read (void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <HCSR04_Read+0x38>)
 8000f98:	f002 fbaa 	bl	80036f0 <HAL_GPIO_WritePin>
	delayT2(10);  // wait for 10 us
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f7ff ffdb 	bl	8000f58 <delayT2>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <HCSR04_Read+0x38>)
 8000faa:	f002 fba1 	bl	80036f0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HCSR04_Read+0x3c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HCSR04_Read+0x3c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f042 0202 	orr.w	r2, r2, #2
 8000fbc:	60da      	str	r2, [r3, #12]

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	20000144 	.word	0x20000144

08000fcc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f023 030f 	bic.w	r3, r3, #15
 8000fdc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 030c 	orr.w	r3, r3, #12
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	f043 030c 	orr.w	r3, r3, #12
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	b2db      	uxtb	r3, r3
 800100a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800100c:	f107 0208 	add.w	r2, r7, #8
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2304      	movs	r3, #4
 8001016:	214e      	movs	r1, #78	; 0x4e
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <lcd_send_cmd+0x5c>)
 800101a:	f004 fa4d 	bl	80054b8 <HAL_I2C_Master_Transmit>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001e0 	.word	0x200001e0

0800102c <lcd_send_data>:

void lcd_send_data (char data)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f043 030d 	orr.w	r3, r3, #13
 800104a:	b2db      	uxtb	r3, r3
 800104c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	f043 0309 	orr.w	r3, r3, #9
 8001054:	b2db      	uxtb	r3, r3
 8001056:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	f043 030d 	orr.w	r3, r3, #13
 800105e:	b2db      	uxtb	r3, r3
 8001060:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	f043 0309 	orr.w	r3, r3, #9
 8001068:	b2db      	uxtb	r3, r3
 800106a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2304      	movs	r3, #4
 8001076:	214e      	movs	r1, #78	; 0x4e
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <lcd_send_data+0x5c>)
 800107a:	f004 fa1d 	bl	80054b8 <HAL_I2C_Master_Transmit>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001e0 	.word	0x200001e0

0800108c <lcd_clear>:

void lcd_clear (void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001092:	2080      	movs	r0, #128	; 0x80
 8001094:	f7ff ff9a 	bl	8000fcc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	e005      	b.n	80010aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800109e:	2020      	movs	r0, #32
 80010a0:	f7ff ffc4 	bl	800102c <lcd_send_data>
	for (int i=0; i<70; i++)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b45      	cmp	r3, #69	; 0x45
 80010ae:	ddf6      	ble.n	800109e <lcd_clear+0x12>
	}
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
    switch (row)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <lcd_put_cur+0x18>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d005      	beq.n	80010dc <lcd_put_cur+0x22>
 80010d0:	e009      	b.n	80010e6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	603b      	str	r3, [r7, #0]
            break;
 80010da:	e004      	b.n	80010e6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010e2:	603b      	str	r3, [r7, #0]
            break;
 80010e4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff6e 	bl	8000fcc <lcd_send_cmd>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcd_init>:


void lcd_init (void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80010fc:	2032      	movs	r0, #50	; 0x32
 80010fe:	f001 fc41 	bl	8002984 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001102:	2030      	movs	r0, #48	; 0x30
 8001104:	f7ff ff62 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001108:	2005      	movs	r0, #5
 800110a:	f001 fc3b 	bl	8002984 <HAL_Delay>
	lcd_send_cmd (0x30);
 800110e:	2030      	movs	r0, #48	; 0x30
 8001110:	f7ff ff5c 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001114:	2001      	movs	r0, #1
 8001116:	f001 fc35 	bl	8002984 <HAL_Delay>
	lcd_send_cmd (0x30);
 800111a:	2030      	movs	r0, #48	; 0x30
 800111c:	f7ff ff56 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(10);
 8001120:	200a      	movs	r0, #10
 8001122:	f001 fc2f 	bl	8002984 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001126:	2020      	movs	r0, #32
 8001128:	f7ff ff50 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(10);
 800112c:	200a      	movs	r0, #10
 800112e:	f001 fc29 	bl	8002984 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001132:	2028      	movs	r0, #40	; 0x28
 8001134:	f7ff ff4a 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f001 fc23 	bl	8002984 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800113e:	2008      	movs	r0, #8
 8001140:	f7ff ff44 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f001 fc1d 	bl	8002984 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff ff3e 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f001 fc17 	bl	8002984 <HAL_Delay>
	HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f001 fc14 	bl	8002984 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800115c:	2006      	movs	r0, #6
 800115e:	f7ff ff35 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f001 fc0e 	bl	8002984 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001168:	200c      	movs	r0, #12
 800116a:	f7ff ff2f 	bl	8000fcc <lcd_send_cmd>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}

08001172 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800117a:	e006      	b.n	800118a <lcd_send_string+0x18>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff51 	bl	800102c <lcd_send_data>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f4      	bne.n	800117c <lcd_send_string+0xa>
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_GPIO_EXTI_Callback>:



// Indicador de interrupcion

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
	ctime = HAL_GetTick();
 80011a6:	f001 fbe1 	bl	800296c <HAL_GetTick>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x44>)
 80011ae:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin==GPIO_PIN_0 ) interrupt = 1;
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d103      	bne.n	80011be <HAL_GPIO_EXTI_Callback+0x22>
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x48>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
	else if (GPIO_Pin==GPIO_PIN_3 ) interrupt = 2;
	else if (GPIO_Pin==GPIO_PIN_0 ) interrupt = 3;
}
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_EXTI_Callback+0x3c>
	else if (GPIO_Pin==GPIO_PIN_3 ) interrupt = 2;
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d103      	bne.n	80011cc <HAL_GPIO_EXTI_Callback+0x30>
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x48>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	e005      	b.n	80011d8 <HAL_GPIO_EXTI_Callback+0x3c>
	else if (GPIO_Pin==GPIO_PIN_0 ) interrupt = 3;
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d102      	bne.n	80011d8 <HAL_GPIO_EXTI_Callback+0x3c>
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x48>)
 80011d4:	2203      	movs	r2, #3
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000cc 	.word	0x200000cc
 80011e4:	200000c4 	.word	0x200000c4

080011e8 <debouncer>:


// Debouncer

int debouncer(volatile int* interrupt, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*interrupt != 0){
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d038      	beq.n	8001270 <debouncer+0x88>
		if (button_count == 0) {
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <debouncer+0x94>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10b      	bne.n	800121e <debouncer+0x36>
			counter=HAL_GetTick();
 8001206:	f001 fbb1 	bl	800296c <HAL_GetTick>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <debouncer+0x98>)
 8001210:	601a      	str	r2, [r3, #0]
			button_count++;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <debouncer+0x94>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <debouncer+0x94>)
 800121c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=10){
 800121e:	f001 fba5 	bl	800296c <HAL_GetTick>
 8001222:	4603      	mov	r3, r0
 8001224:	4a16      	ldr	r2, [pc, #88]	; (8001280 <debouncer+0x98>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	2b09      	cmp	r3, #9
 800122c:	d920      	bls.n	8001270 <debouncer+0x88>
			counter=HAL_GetTick();
 800122e:	f001 fb9d 	bl	800296c <HAL_GetTick>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <debouncer+0x98>)
 8001238:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1){
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4619      	mov	r1, r3
 800123e:	68b8      	ldr	r0, [r7, #8]
 8001240:	f002 fa3e 	bl	80036c0 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d003      	beq.n	8001252 <debouncer+0x6a>
				button_count=1;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <debouncer+0x94>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e005      	b.n	800125e <debouncer+0x76>
			}
			else{
				button_count++;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <debouncer+0x94>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <debouncer+0x94>)
 800125c:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 3){ //Periodo antirebotes
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <debouncer+0x94>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d104      	bne.n	8001270 <debouncer+0x88>
				button_count = 0;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <debouncer+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
				return 1;
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <debouncer+0x8a>
			}
		}
	}
	return 0;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000dc 	.word	0x200000dc
 8001280:	200000e0 	.word	0x200000e0
 8001284:	00000000 	.word	0x00000000

08001288 <HAL_TIM_IC_CaptureCallback>:


// Funcion de interrupcion del ultrasonidos

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7f1b      	ldrb	r3, [r3, #28]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8083 	bne.w	80013a0 <HAL_TIM_IC_CaptureCallback+0x118>
		{
		if (FCapture==0) // if the first value is not captured
 800129a:	4b45      	ldr	r3, [pc, #276]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11a      	bne.n	80012d8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			US1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80012a2:	2100      	movs	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f005 fe31 	bl	8006f0c <HAL_TIM_ReadCapturedValue>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a41      	ldr	r2, [pc, #260]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012ae:	6013      	str	r3, [r2, #0]
			FCapture = 1;  // set the first captured as true
 80012b0:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6a1a      	ldr	r2, [r3, #32]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 020a 	bic.w	r2, r2, #10
 80012c4:	621a      	str	r2, [r3, #32]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a1a      	ldr	r2, [r3, #32]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0202 	orr.w	r2, r2, #2
 80012d4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 80012d6:	e063      	b.n	80013a0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (FCapture==1)   // if the first is already captured
 80012d8:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d15f      	bne.n	80013a0 <HAL_TIM_IC_CaptureCallback+0x118>
			US2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80012e0:	2100      	movs	r1, #0
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f005 fe12 	bl	8006f0c <HAL_TIM_ReadCapturedValue>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012ec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
			if (US2 > US1)
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d907      	bls.n	8001312 <HAL_TIM_IC_CaptureCallback+0x8a>
				USdiff = US2 - US1;
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x134>)
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e00f      	b.n	8001332 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (US1 > US2)
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d909      	bls.n	8001332 <HAL_TIM_IC_CaptureCallback+0xaa>
				USdiff = (0xffff - US1) + US2;
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800132c:	33ff      	adds	r3, #255	; 0xff
 800132e:	4a23      	ldr	r2, [pc, #140]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001330:	6013      	str	r3, [r2, #0]
			Distance = USdiff * .034/2;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f888 	bl	800044c <__aeabi_ui2d>
 800133c:	a31a      	add	r3, pc, #104	; (adr r3, 80013a8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f8fd 	bl	8000540 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001356:	f7ff fa1d 	bl	8000794 <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff faff 	bl	8000964 <__aeabi_d2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800136c:	701a      	strb	r2, [r3, #0]
			FCapture = 0; // set it back to false
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 020a 	bic.w	r2, r2, #10
 8001382:	621a      	str	r2, [r3, #32]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a12      	ldr	r2, [r2, #32]
 800138e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0202 	bic.w	r2, r2, #2
 800139e:	60da      	str	r2, [r3, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	b020c49c 	.word	0xb020c49c
 80013ac:	3fa16872 	.word	0x3fa16872
 80013b0:	200002da 	.word	0x200002da
 80013b4:	20000190 	.word	0x20000190
 80013b8:	2000033c 	.word	0x2000033c
 80013bc:	20000334 	.word	0x20000334
 80013c0:	20000196 	.word	0x20000196
 80013c4:	20000144 	.word	0x20000144

080013c8 <HAL_TIM_PeriodElapsedCallback>:


	// Refresh de la pantalla y callback para vaciado

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) refresh = 1;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d102      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0x16>
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
	if (htim == &htim4){
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d113      	bne.n	800140e <HAL_TIM_PeriodElapsedCallback+0x46>
		vaciado++;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013ee:	6013      	str	r3, [r2, #0]
		if (vaciado == t_vaciado){
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d108      	bne.n	800140e <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_TIM_Base_Stop_IT(&htim4);
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013fe:	f005 f973 	bl	80066e8 <HAL_TIM_Base_Stop_IT>
			vaciado = 0;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
			cState = 0;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000238 	.word	0x20000238
 800141c:	200000c8 	.word	0x200000c8
 8001420:	20000198 	.word	0x20000198
 8001424:	200000bc 	.word	0x200000bc
 8001428:	20000004 	.word	0x20000004
 800142c:	200000b8 	.word	0x200000b8

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	ed2d 8b02 	vpush	{d8}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f001 fa31 	bl	80028a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 fb4d 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f000 fdef 	bl	8002024 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001446:	f000 fc03 	bl	8001c50 <MX_I2C1_Init>
  MX_SPI1_Init();
 800144a:	f000 fc2f 	bl	8001cac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800144e:	f008 f8c5 	bl	80095dc <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8001452:	f000 fbab 	bl	8001bac <MX_ADC1_Init>
  MX_TIM1_Init();
 8001456:	f000 fc5f 	bl	8001d18 <MX_TIM1_Init>
  MX_TIM2_Init();
 800145a:	f000 fcad 	bl	8001db8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800145e:	f000 fd1b 	bl	8001e98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001462:	f000 fd8b 	bl	8001f7c <MX_TIM4_Init>


  // EL microcontrolador resetea el pull a NOPULL cuando se reinicia el proyecto
  // Aquí se fuerza el modo PULLDOWN de los pines de interrupcion, ya que si entran en Z
  // a veces generan conflicto en las variables que modifican
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001474:	2319      	movs	r3, #25
 8001476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001478:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800147e:	2302      	movs	r3, #2
 8001480:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	48a6      	ldr	r0, [pc, #664]	; (8001720 <main+0x2f0>)
 8001488:	f001 ff7e 	bl	8003388 <HAL_GPIO_Init>


  lcd_init();
 800148c:	f7ff fe34 	bl	80010f8 <lcd_init>
  lcd_put_cur(0,0);
 8001490:	2100      	movs	r1, #0
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fe11 	bl	80010ba <lcd_put_cur>
  lcd_send_string("Test");
 8001498:	48a2      	ldr	r0, [pc, #648]	; (8001724 <main+0x2f4>)
 800149a:	f7ff fe6a 	bl	8001172 <lcd_send_string>
  lcd_clear();
 800149e:	f7ff fdf5 	bl	800108c <lcd_clear>
  HAL_ADC_Start(&hadc1);
 80014a2:	48a1      	ldr	r0, [pc, #644]	; (8001728 <main+0x2f8>)
 80014a4:	f001 fad6 	bl	8002a54 <HAL_ADC_Start>
  HAL_TIM_Base_Start(&htim1);
 80014a8:	48a0      	ldr	r0, [pc, #640]	; (800172c <main+0x2fc>)
 80014aa:	f005 f845 	bl	8006538 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80014ae:	2100      	movs	r1, #0
 80014b0:	489f      	ldr	r0, [pc, #636]	; (8001730 <main+0x300>)
 80014b2:	f005 f997 	bl	80067e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80014b6:	489f      	ldr	r0, [pc, #636]	; (8001734 <main+0x304>)
 80014b8:	f005 f8a6 	bl	8006608 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);
 80014bc:	489a      	ldr	r0, [pc, #616]	; (8001728 <main+0x2f8>)
 80014be:	f001 fac9 	bl	8002a54 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80014c2:	2101      	movs	r1, #1
 80014c4:	4898      	ldr	r0, [pc, #608]	; (8001728 <main+0x2f8>)
 80014c6:	f001 fb97 	bl	8002bf8 <HAL_ADC_PollForConversion>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Lectura y ajuste del LDR
      HAL_ADC_Start(&hadc1);
 80014ca:	4897      	ldr	r0, [pc, #604]	; (8001728 <main+0x2f8>)
 80014cc:	f001 fac2 	bl	8002a54 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1);
 80014d0:	2101      	movs	r1, #1
 80014d2:	4895      	ldr	r0, [pc, #596]	; (8001728 <main+0x2f8>)
 80014d4:	f001 fb90 	bl	8002bf8 <HAL_ADC_PollForConversion>
      Lumen = HAL_ADC_GetValue(&hadc1);
 80014d8:	4893      	ldr	r0, [pc, #588]	; (8001728 <main+0x2f8>)
 80014da:	f001 fc18 	bl	8002d0e <HAL_ADC_GetValue>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b95      	ldr	r3, [pc, #596]	; (8001738 <main+0x308>)
 80014e4:	801a      	strh	r2, [r3, #0]
      if (Lumen > Lmax) Lmax = Lumen;
 80014e6:	4b94      	ldr	r3, [pc, #592]	; (8001738 <main+0x308>)
 80014e8:	881a      	ldrh	r2, [r3, #0]
 80014ea:	4b94      	ldr	r3, [pc, #592]	; (800173c <main+0x30c>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d903      	bls.n	80014fa <main+0xca>
 80014f2:	4b91      	ldr	r3, [pc, #580]	; (8001738 <main+0x308>)
 80014f4:	881a      	ldrh	r2, [r3, #0]
 80014f6:	4b91      	ldr	r3, [pc, #580]	; (800173c <main+0x30c>)
 80014f8:	801a      	strh	r2, [r3, #0]
      if (Lumen < Lmin) Lmin = Lumen;
 80014fa:	4b8f      	ldr	r3, [pc, #572]	; (8001738 <main+0x308>)
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	4b90      	ldr	r3, [pc, #576]	; (8001740 <main+0x310>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d203      	bcs.n	800150e <main+0xde>
 8001506:	4b8c      	ldr	r3, [pc, #560]	; (8001738 <main+0x308>)
 8001508:	881a      	ldrh	r2, [r3, #0]
 800150a:	4b8d      	ldr	r3, [pc, #564]	; (8001740 <main+0x310>)
 800150c:	801a      	strh	r2, [r3, #0]



	  // Lectura del ultrasonidos

	  HCSR04_Read();
 800150e:	f7ff fd3d 	bl	8000f8c <HCSR04_Read>
	  if(abs(Distance-aux1)>15) Distance=(aux1+Distance)/2;
 8001512:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <main+0x314>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <main+0x318>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	bfb8      	it	lt
 8001522:	425b      	neglt	r3, r3
 8001524:	2b0f      	cmp	r3, #15
 8001526:	dd0b      	ble.n	8001540 <main+0x110>
 8001528:	4b86      	ldr	r3, [pc, #536]	; (8001744 <main+0x314>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b86      	ldr	r3, [pc, #536]	; (8001748 <main+0x318>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	0fda      	lsrs	r2, r3, #31
 8001536:	4413      	add	r3, r2
 8001538:	105b      	asrs	r3, r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b81      	ldr	r3, [pc, #516]	; (8001744 <main+0x314>)
 800153e:	701a      	strb	r2, [r3, #0]
	  aux1 = Distance;
 8001540:	4b80      	ldr	r3, [pc, #512]	; (8001744 <main+0x314>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <main+0x318>)
 8001548:	601a      	str	r2, [r3, #0]
	  Volume = Distance * 3.1415 * 1; //Altura del liquido * pi * radio(1)
 800154a:	4b7e      	ldr	r3, [pc, #504]	; (8001744 <main+0x314>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff8c 	bl	800046c <__aeabi_i2d>
 8001554:	a370      	add	r3, pc, #448	; (adr r3, 8001718 <main+0x2e8>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe fff1 	bl	8000540 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff f9fd 	bl	8000964 <__aeabi_d2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b77      	ldr	r3, [pc, #476]	; (800174c <main+0x31c>)
 8001570:	701a      	strb	r2, [r3, #0]



	  // Lectura de la temperatura y humedad

	  if(DHT11_Start()){
 8001572:	f7ff fbfd 	bl	8000d70 <DHT11_Start>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d067      	beq.n	800164c <main+0x21c>
	        RHI = DHT11_Read(); // Relative humidity integral
 800157c:	f7ff fc70 	bl	8000e60 <DHT11_Read>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b72      	ldr	r3, [pc, #456]	; (8001750 <main+0x320>)
 8001586:	701a      	strb	r2, [r3, #0]
	        RHD = DHT11_Read(); // Relative humidity decimal
 8001588:	f7ff fc6a 	bl	8000e60 <DHT11_Read>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b70      	ldr	r3, [pc, #448]	; (8001754 <main+0x324>)
 8001592:	701a      	strb	r2, [r3, #0]
	        TCI = DHT11_Read(); // Celsius integral
 8001594:	f7ff fc64 	bl	8000e60 <DHT11_Read>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b6e      	ldr	r3, [pc, #440]	; (8001758 <main+0x328>)
 800159e:	701a      	strb	r2, [r3, #0]
	        TCD = DHT11_Read(); // Celsius decimal
 80015a0:	f7ff fc5e 	bl	8000e60 <DHT11_Read>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b6c      	ldr	r3, [pc, #432]	; (800175c <main+0x32c>)
 80015aa:	701a      	strb	r2, [r3, #0]
	        SUM = DHT11_Read(); // Check sum
 80015ac:	f7ff fc58 	bl	8000e60 <DHT11_Read>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <main+0x330>)
 80015b6:	701a      	strb	r2, [r3, #0]
	        if (RHI + RHD + TCI + TCD == SUM){
 80015b8:	4b65      	ldr	r3, [pc, #404]	; (8001750 <main+0x320>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b65      	ldr	r3, [pc, #404]	; (8001754 <main+0x324>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a64      	ldr	r2, [pc, #400]	; (8001758 <main+0x328>)
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a64      	ldr	r2, [pc, #400]	; (800175c <main+0x32c>)
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a63      	ldr	r2, [pc, #396]	; (8001760 <main+0x330>)
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d139      	bne.n	800164c <main+0x21c>
	          Temp = (float)TCI + (float)(TCD/10.0);
 80015d8:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <main+0x328>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80015e4:	4b5d      	ldr	r3, [pc, #372]	; (800175c <main+0x32c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff3f 	bl	800046c <__aeabi_i2d>
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <main+0x334>)
 80015f4:	f7ff f8ce 	bl	8000794 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff f9d0 	bl	80009a4 <__aeabi_d2f>
 8001604:	ee07 0a90 	vmov	s15, r0
 8001608:	ee78 7a27 	vadd.f32	s15, s16, s15
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <main+0x338>)
 800160e:	edc3 7a00 	vstr	s15, [r3]
	          RH = (float)RHI + (float)(RHD/10.0);
 8001612:	4b4f      	ldr	r3, [pc, #316]	; (8001750 <main+0x320>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800161e:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <main+0x324>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff22 	bl	800046c <__aeabi_i2d>
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <main+0x334>)
 800162e:	f7ff f8b1 	bl	8000794 <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f9b3 	bl	80009a4 <__aeabi_d2f>
 800163e:	ee07 0a90 	vmov	s15, r0
 8001642:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <main+0x33c>)
 8001648:	edc3 7a00 	vstr	s15, [r3]


	  // Control de los estados


	  if (interrupt == 1){
 800164c:	4b48      	ldr	r3, [pc, #288]	; (8001770 <main+0x340>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d119      	bne.n	8001688 <main+0x258>
		  if(debouncer(&interrupt, GPIOA, GPIO_PIN_0)){
 8001654:	2201      	movs	r2, #1
 8001656:	4932      	ldr	r1, [pc, #200]	; (8001720 <main+0x2f0>)
 8001658:	4845      	ldr	r0, [pc, #276]	; (8001770 <main+0x340>)
 800165a:	f7ff fdc5 	bl	80011e8 <debouncer>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d011      	beq.n	8001688 <main+0x258>
			  if (cState == 0){
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <main+0x344>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <main+0x258>
			  	  		pState = cState;
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <main+0x344>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a41      	ldr	r2, [pc, #260]	; (8001778 <main+0x348>)
 8001672:	6013      	str	r3, [r2, #0]
			  	  		cState = 1;
 8001674:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <main+0x344>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
			  	  		ptime = ctime;
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <main+0x34c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a40      	ldr	r2, [pc, #256]	; (8001780 <main+0x350>)
 8001680:	6013      	str	r3, [r2, #0]
			  	  		interrupt = 0;
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <main+0x340>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
		  	  }
		  }
	  }

	  if (interrupt == 2){
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <main+0x340>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b02      	cmp	r3, #2
 800168e:	f040 808b 	bne.w	80017a8 <main+0x378>
		  if(debouncer(&interrupt, GPIOA, GPIO_PIN_3)){
 8001692:	2208      	movs	r2, #8
 8001694:	4922      	ldr	r1, [pc, #136]	; (8001720 <main+0x2f0>)
 8001696:	4836      	ldr	r0, [pc, #216]	; (8001770 <main+0x340>)
 8001698:	f7ff fda6 	bl	80011e8 <debouncer>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8082 	beq.w	80017a8 <main+0x378>
			   if(cState == 1){				// Temp -> Humedad
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <main+0x344>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d10e      	bne.n	80016ca <main+0x29a>
			  	  	pState = cState;
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <main+0x344>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a31      	ldr	r2, [pc, #196]	; (8001778 <main+0x348>)
 80016b2:	6013      	str	r3, [r2, #0]
			  	  	cState = 2;
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <main+0x344>)
 80016b6:	2202      	movs	r2, #2
 80016b8:	601a      	str	r2, [r3, #0]
			  	  	ptime = ctime;
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <main+0x34c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a30      	ldr	r2, [pc, #192]	; (8001780 <main+0x350>)
 80016c0:	6013      	str	r3, [r2, #0]
			  	  	interrupt = 0;
 80016c2:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <main+0x340>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e06e      	b.n	80017a8 <main+0x378>
			   }
			   else if (cState == 2){		// Humedad -> Volumen
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <main+0x344>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d10e      	bne.n	80016f0 <main+0x2c0>
			  	  	pState = cState;
 80016d2:	4b28      	ldr	r3, [pc, #160]	; (8001774 <main+0x344>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a28      	ldr	r2, [pc, #160]	; (8001778 <main+0x348>)
 80016d8:	6013      	str	r3, [r2, #0]
			  	  	cState = 3;
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <main+0x344>)
 80016dc:	2203      	movs	r2, #3
 80016de:	601a      	str	r2, [r3, #0]
			  	  	ptime = ctime;
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <main+0x34c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a26      	ldr	r2, [pc, #152]	; (8001780 <main+0x350>)
 80016e6:	6013      	str	r3, [r2, #0]
			  	  	interrupt = 0;
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <main+0x340>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e05b      	b.n	80017a8 <main+0x378>
			   }
			   else if(cState == 3){			// Volumen -> Lumin
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <main+0x344>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d145      	bne.n	8001784 <main+0x354>
			  	  	pState = cState;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <main+0x344>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <main+0x348>)
 80016fe:	6013      	str	r3, [r2, #0]
			  	  	cState = 4;
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <main+0x344>)
 8001702:	2204      	movs	r2, #4
 8001704:	601a      	str	r2, [r3, #0]
			  	  	ptime = ctime;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <main+0x34c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <main+0x350>)
 800170c:	6013      	str	r3, [r2, #0]
			  	  	interrupt = 0;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <main+0x340>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e048      	b.n	80017a8 <main+0x378>
 8001716:	bf00      	nop
 8001718:	c083126f 	.word	0xc083126f
 800171c:	400921ca 	.word	0x400921ca
 8001720:	40020000 	.word	0x40020000
 8001724:	08009e20 	.word	0x08009e20
 8001728:	20000290 	.word	0x20000290
 800172c:	200000fc 	.word	0x200000fc
 8001730:	20000144 	.word	0x20000144
 8001734:	20000238 	.word	0x20000238
 8001738:	20000236 	.word	0x20000236
 800173c:	2000000a 	.word	0x2000000a
 8001740:	20000008 	.word	0x20000008
 8001744:	20000196 	.word	0x20000196
 8001748:	200000c0 	.word	0x200000c0
 800174c:	200002d9 	.word	0x200002d9
 8001750:	20000234 	.word	0x20000234
 8001754:	200002d8 	.word	0x200002d8
 8001758:	2000033b 	.word	0x2000033b
 800175c:	2000018e 	.word	0x2000018e
 8001760:	2000033a 	.word	0x2000033a
 8001764:	40240000 	.word	0x40240000
 8001768:	200000d4 	.word	0x200000d4
 800176c:	200000d8 	.word	0x200000d8
 8001770:	200000c4 	.word	0x200000c4
 8001774:	200000b8 	.word	0x200000b8
 8001778:	20000000 	.word	0x20000000
 800177c:	200000cc 	.word	0x200000cc
 8001780:	200000d0 	.word	0x200000d0
			   }
			   else if(cState == 4 ){		// Lumin -> Temp
 8001784:	4bb5      	ldr	r3, [pc, #724]	; (8001a5c <main+0x62c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d10d      	bne.n	80017a8 <main+0x378>
			  	  	pState = cState;
 800178c:	4bb3      	ldr	r3, [pc, #716]	; (8001a5c <main+0x62c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4ab3      	ldr	r2, [pc, #716]	; (8001a60 <main+0x630>)
 8001792:	6013      	str	r3, [r2, #0]
			  	  	cState =1;
 8001794:	4bb1      	ldr	r3, [pc, #708]	; (8001a5c <main+0x62c>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
			  	  	ptime = ctime;
 800179a:	4bb2      	ldr	r3, [pc, #712]	; (8001a64 <main+0x634>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4ab2      	ldr	r2, [pc, #712]	; (8001a68 <main+0x638>)
 80017a0:	6013      	str	r3, [r2, #0]
			  	  	interrupt = 0;
 80017a2:	4bb2      	ldr	r3, [pc, #712]	; (8001a6c <main+0x63c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
			   }
		  }
	  }
	  if (interrupt == 3){
 80017a8:	4bb0      	ldr	r3, [pc, #704]	; (8001a6c <main+0x63c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d11c      	bne.n	80017ea <main+0x3ba>
		   if(debouncer(&interrupt, GPIOA, GPIO_PIN_4)){
 80017b0:	2210      	movs	r2, #16
 80017b2:	49af      	ldr	r1, [pc, #700]	; (8001a70 <main+0x640>)
 80017b4:	48ad      	ldr	r0, [pc, #692]	; (8001a6c <main+0x63c>)
 80017b6:	f7ff fd17 	bl	80011e8 <debouncer>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d014      	beq.n	80017ea <main+0x3ba>
			  	  if (cState != 6){
 80017c0:	4ba6      	ldr	r3, [pc, #664]	; (8001a5c <main+0x62c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b06      	cmp	r3, #6
 80017c6:	d010      	beq.n	80017ea <main+0x3ba>
			  	  		pState = cState;
 80017c8:	4ba4      	ldr	r3, [pc, #656]	; (8001a5c <main+0x62c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4aa4      	ldr	r2, [pc, #656]	; (8001a60 <main+0x630>)
 80017ce:	6013      	str	r3, [r2, #0]
			  	  		cState = 6;
 80017d0:	4ba2      	ldr	r3, [pc, #648]	; (8001a5c <main+0x62c>)
 80017d2:	2206      	movs	r2, #6
 80017d4:	601a      	str	r2, [r3, #0]
			  	  		ptime = ctime;
 80017d6:	4ba3      	ldr	r3, [pc, #652]	; (8001a64 <main+0x634>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4aa3      	ldr	r2, [pc, #652]	; (8001a68 <main+0x638>)
 80017dc:	6013      	str	r3, [r2, #0]
  	  					interrupt = 0;
 80017de:	4ba3      	ldr	r3, [pc, #652]	; (8001a6c <main+0x63c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
			  	  		HAL_TIM_Base_Start_IT(&htim4);
 80017e4:	48a3      	ldr	r0, [pc, #652]	; (8001a74 <main+0x644>)
 80017e6:	f004 ff0f 	bl	8006608 <HAL_TIM_Base_Start_IT>




	  // Salida por pantalla
	  if (pState != cState || refresh != 0){
 80017ea:	4b9d      	ldr	r3, [pc, #628]	; (8001a60 <main+0x630>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b9b      	ldr	r3, [pc, #620]	; (8001a5c <main+0x62c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d104      	bne.n	8001800 <main+0x3d0>
 80017f6:	4ba0      	ldr	r3, [pc, #640]	; (8001a78 <main+0x648>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 810f 	beq.w	8001a1e <main+0x5ee>
		  if (pState != cState){
 8001800:	4b97      	ldr	r3, [pc, #604]	; (8001a60 <main+0x630>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b95      	ldr	r3, [pc, #596]	; (8001a5c <main+0x62c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d005      	beq.n	8001818 <main+0x3e8>
			  lcd_clear();
 800180c:	f7ff fc3e 	bl	800108c <lcd_clear>
			  pState = cState;
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <main+0x62c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a92      	ldr	r2, [pc, #584]	; (8001a60 <main+0x630>)
 8001816:	6013      	str	r3, [r2, #0]
		  }
		  if (cState == 5 || cState == 6) HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8001818:	4b90      	ldr	r3, [pc, #576]	; (8001a5c <main+0x62c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d003      	beq.n	8001828 <main+0x3f8>
 8001820:	4b8e      	ldr	r3, [pc, #568]	; (8001a5c <main+0x62c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b06      	cmp	r3, #6
 8001826:	d103      	bne.n	8001830 <main+0x400>
 8001828:	2104      	movs	r1, #4
 800182a:	4894      	ldr	r0, [pc, #592]	; (8001a7c <main+0x64c>)
 800182c:	f001 ff79 	bl	8003722 <HAL_GPIO_TogglePin>

		  refresh = 0;
 8001830:	4b91      	ldr	r3, [pc, #580]	; (8001a78 <main+0x648>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	4891      	ldr	r0, [pc, #580]	; (8001a80 <main+0x650>)
 800183c:	f001 ff71 	bl	8003722 <HAL_GPIO_TogglePin>

		  if (cState == 0){
 8001840:	4b86      	ldr	r3, [pc, #536]	; (8001a5c <main+0x62c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d113      	bne.n	8001870 <main+0x440>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2104      	movs	r1, #4
 800184c:	488b      	ldr	r0, [pc, #556]	; (8001a7c <main+0x64c>)
 800184e:	f001 ff4f 	bl	80036f0 <HAL_GPIO_WritePin>
			  lcd_put_cur(0,0);
 8001852:	2100      	movs	r1, #0
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fc30 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("Planta sin");
 800185a:	488a      	ldr	r0, [pc, #552]	; (8001a84 <main+0x654>)
 800185c:	f7ff fc89 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001860:	2100      	movs	r1, #0
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fc29 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("inicializar");
 8001868:	4887      	ldr	r0, [pc, #540]	; (8001a88 <main+0x658>)
 800186a:	f7ff fc82 	bl	8001172 <lcd_send_string>
 800186e:	e0d6      	b.n	8001a1e <main+0x5ee>
		  }
		  else if (cState == 1){
 8001870:	4b7a      	ldr	r3, [pc, #488]	; (8001a5c <main+0x62c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d123      	bne.n	80018c0 <main+0x490>
			  lcd_put_cur(0,0);
 8001878:	2100      	movs	r1, #0
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fc1d 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("Temperatura:");
 8001880:	4882      	ldr	r0, [pc, #520]	; (8001a8c <main+0x65c>)
 8001882:	f7ff fc76 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001886:	2100      	movs	r1, #0
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff fc16 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("            ");
 800188e:	4880      	ldr	r0, [pc, #512]	; (8001a90 <main+0x660>)
 8001890:	f7ff fc6f 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001894:	2100      	movs	r1, #0
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fc0f 	bl	80010ba <lcd_put_cur>
			  itoa(Temp, pantalla, 10);
 800189c:	4b7d      	ldr	r3, [pc, #500]	; (8001a94 <main+0x664>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	220a      	movs	r2, #10
 80018a8:	497b      	ldr	r1, [pc, #492]	; (8001a98 <main+0x668>)
 80018aa:	ee17 0a90 	vmov	r0, s15
 80018ae:	f008 f987 	bl	8009bc0 <itoa>
			  lcd_send_string(pantalla);
 80018b2:	4879      	ldr	r0, [pc, #484]	; (8001a98 <main+0x668>)
 80018b4:	f7ff fc5d 	bl	8001172 <lcd_send_string>
			  lcd_send_string(" C");
 80018b8:	4878      	ldr	r0, [pc, #480]	; (8001a9c <main+0x66c>)
 80018ba:	f7ff fc5a 	bl	8001172 <lcd_send_string>
 80018be:	e0ae      	b.n	8001a1e <main+0x5ee>
		  }
		  else if (cState == 2){
 80018c0:	4b66      	ldr	r3, [pc, #408]	; (8001a5c <main+0x62c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d123      	bne.n	8001910 <main+0x4e0>
			  lcd_put_cur(0,0);
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fbf5 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("Humedad:");
 80018d0:	4873      	ldr	r0, [pc, #460]	; (8001aa0 <main+0x670>)
 80018d2:	f7ff fc4e 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 80018d6:	2100      	movs	r1, #0
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff fbee 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("            ");
 80018de:	486c      	ldr	r0, [pc, #432]	; (8001a90 <main+0x660>)
 80018e0:	f7ff fc47 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff fbe7 	bl	80010ba <lcd_put_cur>
			  itoa(RH, pantalla, 10);
 80018ec:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <main+0x674>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f6:	220a      	movs	r2, #10
 80018f8:	4967      	ldr	r1, [pc, #412]	; (8001a98 <main+0x668>)
 80018fa:	ee17 0a90 	vmov	r0, s15
 80018fe:	f008 f95f 	bl	8009bc0 <itoa>
			  lcd_send_string(pantalla);
 8001902:	4865      	ldr	r0, [pc, #404]	; (8001a98 <main+0x668>)
 8001904:	f7ff fc35 	bl	8001172 <lcd_send_string>
			  lcd_send_string(" %");
 8001908:	4867      	ldr	r0, [pc, #412]	; (8001aa8 <main+0x678>)
 800190a:	f7ff fc32 	bl	8001172 <lcd_send_string>
 800190e:	e086      	b.n	8001a1e <main+0x5ee>
		  }
		  else if(cState == 3){
 8001910:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <main+0x62c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d11f      	bne.n	8001958 <main+0x528>
			  lcd_put_cur(0,0);
 8001918:	2100      	movs	r1, #0
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fbcd 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("Volumen:");
 8001920:	4862      	ldr	r0, [pc, #392]	; (8001aac <main+0x67c>)
 8001922:	f7ff fc26 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001926:	2100      	movs	r1, #0
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff fbc6 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("            ");
 800192e:	4858      	ldr	r0, [pc, #352]	; (8001a90 <main+0x660>)
 8001930:	f7ff fc1f 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001934:	2100      	movs	r1, #0
 8001936:	2001      	movs	r0, #1
 8001938:	f7ff fbbf 	bl	80010ba <lcd_put_cur>
			  itoa(Volume, pantalla, 10);
 800193c:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <main+0x680>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	220a      	movs	r2, #10
 8001942:	4955      	ldr	r1, [pc, #340]	; (8001a98 <main+0x668>)
 8001944:	4618      	mov	r0, r3
 8001946:	f008 f93b 	bl	8009bc0 <itoa>
			  lcd_send_string(pantalla);
 800194a:	4853      	ldr	r0, [pc, #332]	; (8001a98 <main+0x668>)
 800194c:	f7ff fc11 	bl	8001172 <lcd_send_string>
			  lcd_send_string(" cm3");
 8001950:	4858      	ldr	r0, [pc, #352]	; (8001ab4 <main+0x684>)
 8001952:	f7ff fc0e 	bl	8001172 <lcd_send_string>
 8001956:	e062      	b.n	8001a1e <main+0x5ee>
		  }
		  else if(cState == 4){
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <main+0x62c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d139      	bne.n	80019d4 <main+0x5a4>
			  lcd_put_cur(0,0);
 8001960:	2100      	movs	r1, #0
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fba9 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("Luminosidad:");
 8001968:	4853      	ldr	r0, [pc, #332]	; (8001ab8 <main+0x688>)
 800196a:	f7ff fc02 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 800196e:	2100      	movs	r1, #0
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff fba2 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("            ");
 8001976:	4846      	ldr	r0, [pc, #280]	; (8001a90 <main+0x660>)
 8001978:	f7ff fbfb 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 800197c:	2100      	movs	r1, #0
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff fb9b 	bl	80010ba <lcd_put_cur>
			  Ldisplay = (((Lumen-Lmin)*20)/(Lmax-Lmin))*5;
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <main+0x68c>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <main+0x690>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	1ad2      	subs	r2, r2, r3
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	461a      	mov	r2, r3
 800199a:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <main+0x694>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <main+0x690>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	1acb      	subs	r3, r1, r3
 80019a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <main+0x698>)
 80019b6:	801a      	strh	r2, [r3, #0]
			  itoa(Ldisplay, pantalla, 10);
 80019b8:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <main+0x698>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	220a      	movs	r2, #10
 80019be:	4936      	ldr	r1, [pc, #216]	; (8001a98 <main+0x668>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f008 f8fd 	bl	8009bc0 <itoa>
			  lcd_send_string(pantalla);
 80019c6:	4834      	ldr	r0, [pc, #208]	; (8001a98 <main+0x668>)
 80019c8:	f7ff fbd3 	bl	8001172 <lcd_send_string>
			  lcd_send_string(" %");
 80019cc:	4836      	ldr	r0, [pc, #216]	; (8001aa8 <main+0x678>)
 80019ce:	f7ff fbd0 	bl	8001172 <lcd_send_string>
 80019d2:	e024      	b.n	8001a1e <main+0x5ee>

		  }
		  else if (cState == 5){
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <main+0x62c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d10e      	bne.n	80019fa <main+0x5ca>
			  lcd_put_cur(0,0);
 80019dc:	2100      	movs	r1, #0
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff fb6b 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("Vaciado");
 80019e4:	4839      	ldr	r0, [pc, #228]	; (8001acc <main+0x69c>)
 80019e6:	f7ff fbc4 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 80019ea:	2100      	movs	r1, #0
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff fb64 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("necesario");
 80019f2:	4837      	ldr	r0, [pc, #220]	; (8001ad0 <main+0x6a0>)
 80019f4:	f7ff fbbd 	bl	8001172 <lcd_send_string>
 80019f8:	e011      	b.n	8001a1e <main+0x5ee>
		  }
		  else if (cState == 6){
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <main+0x62c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d10d      	bne.n	8001a1e <main+0x5ee>
			  lcd_put_cur(0,0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb58 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("Vaciando");
 8001a0a:	4832      	ldr	r0, [pc, #200]	; (8001ad4 <main+0x6a4>)
 8001a0c:	f7ff fbb1 	bl	8001172 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001a10:	2100      	movs	r1, #0
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff fb51 	bl	80010ba <lcd_put_cur>
			  lcd_send_string("tanque");
 8001a18:	482f      	ldr	r0, [pc, #188]	; (8001ad8 <main+0x6a8>)
 8001a1a:	f7ff fbaa 	bl	8001172 <lcd_send_string>
	  }



	  // Testing DHT11
	  if (Temp != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <main+0x664>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	d005      	beq.n	8001a3a <main+0x60a>
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <main+0x650>)
 8001a36:	f001 fe5b 	bl	80036f0 <HAL_GPIO_WritePin>
	  if (RH != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <main+0x674>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	f43f ad3f 	beq.w	80014ca <main+0x9a>
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	480b      	ldr	r0, [pc, #44]	; (8001a80 <main+0x650>)
 8001a54:	f001 fe4c 	bl	80036f0 <HAL_GPIO_WritePin>
      HAL_ADC_Start(&hadc1);
 8001a58:	e537      	b.n	80014ca <main+0x9a>
 8001a5a:	bf00      	nop
 8001a5c:	200000b8 	.word	0x200000b8
 8001a60:	20000000 	.word	0x20000000
 8001a64:	200000cc 	.word	0x200000cc
 8001a68:	200000d0 	.word	0x200000d0
 8001a6c:	200000c4 	.word	0x200000c4
 8001a70:	40020000 	.word	0x40020000
 8001a74:	20000198 	.word	0x20000198
 8001a78:	200000c8 	.word	0x200000c8
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	08009e28 	.word	0x08009e28
 8001a88:	08009e34 	.word	0x08009e34
 8001a8c:	08009e40 	.word	0x08009e40
 8001a90:	08009e50 	.word	0x08009e50
 8001a94:	200000d4 	.word	0x200000d4
 8001a98:	20000280 	.word	0x20000280
 8001a9c:	08009e60 	.word	0x08009e60
 8001aa0:	08009e64 	.word	0x08009e64
 8001aa4:	200000d8 	.word	0x200000d8
 8001aa8:	08009e70 	.word	0x08009e70
 8001aac:	08009e74 	.word	0x08009e74
 8001ab0:	200002d9 	.word	0x200002d9
 8001ab4:	08009e80 	.word	0x08009e80
 8001ab8:	08009e88 	.word	0x08009e88
 8001abc:	20000236 	.word	0x20000236
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	2000000a 	.word	0x2000000a
 8001ac8:	2000018c 	.word	0x2000018c
 8001acc:	08009e98 	.word	0x08009e98
 8001ad0:	08009ea0 	.word	0x08009ea0
 8001ad4:	08009eac 	.word	0x08009eac
 8001ad8:	08009eb8 	.word	0x08009eb8

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f008 f87a 	bl	8009be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <SystemClock_Config+0xc8>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <SystemClock_Config+0xc8>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <SystemClock_Config+0xc8>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b42:	2302      	movs	r3, #2
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b50:	2348      	movs	r3, #72	; 0x48
 8001b52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 ffb1 	bl	8005ac8 <HAL_RCC_OscConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b6c:	f000 fb96 	bl	800229c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b70:	230f      	movs	r3, #15
 8001b72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 fa13 	bl	8005fb8 <HAL_RCC_ClockConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b98:	f000 fb80 	bl	800229c <Error_Handler>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3750      	adds	r7, #80	; 0x50
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40007000 	.word	0x40007000

08001bac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <MX_ADC1_Init+0x9c>)
 8001bc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <MX_ADC1_Init+0xa0>)
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001c0c:	f000 fede 	bl	80029cc <HAL_ADC_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001c16:	f000 fb41 	bl	800229c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_ADC1_Init+0x98>)
 8001c2c:	f001 f87c 	bl	8002d28 <HAL_ADC_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c36:	f000 fb31 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000290 	.word	0x20000290
 8001c48:	40012000 	.word	0x40012000
 8001c4c:	0f000001 	.word	0x0f000001

08001c50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c56:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <MX_I2C1_Init+0x54>)
 8001c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <MX_I2C1_Init+0x58>)
 8001c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_I2C1_Init+0x50>)
 8001c8e:	f003 facf 	bl	8005230 <HAL_I2C_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c98:	f000 fb00 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200001e0 	.word	0x200001e0
 8001ca4:	40005400 	.word	0x40005400
 8001ca8:	000186a0 	.word	0x000186a0

08001cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <MX_SPI1_Init+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cf8:	220a      	movs	r2, #10
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cfe:	f004 fb43 	bl	8006388 <HAL_SPI_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d08:	f000 fac8 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200002dc 	.word	0x200002dc
 8001d14:	40013000 	.word	0x40013000

08001d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <MX_TIM1_Init+0x9c>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d3c:	2247      	movs	r2, #71	; 0x47
 8001d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d48:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d60:	4813      	ldr	r0, [pc, #76]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d62:	f004 fb9a 	bl	800649a <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d6c:	f000 fa96 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d7e:	f004 fffd 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d88:	f000 fa88 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM1_Init+0x98>)
 8001d9a:	f005 fba3 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001da4:	f000 fa7a 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200000fc 	.word	0x200000fc
 8001db4:	40010000 	.word	0x40010000

08001db8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001dec:	2247      	movs	r2, #71	; 0x47
 8001dee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16777215;
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001df8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001dfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e0a:	4822      	ldr	r0, [pc, #136]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001e0c:	f004 fb45 	bl	800649a <HAL_TIM_Base_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001e16:	f000 fa41 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e20:	f107 0318 	add.w	r3, r7, #24
 8001e24:	4619      	mov	r1, r3
 8001e26:	481b      	ldr	r0, [pc, #108]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001e28:	f004 ffa8 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e32:	f000 fa33 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e36:	4817      	ldr	r0, [pc, #92]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001e38:	f004 fc85 	bl	8006746 <HAL_TIM_IC_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e42:	f000 fa2b 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480f      	ldr	r0, [pc, #60]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001e56:	f005 fb45 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001e60:	f000 fa1c 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e64:	2300      	movs	r3, #0
 8001e66:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e74:	463b      	mov	r3, r7
 8001e76:	2200      	movs	r2, #0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <MX_TIM2_Init+0xdc>)
 8001e7c:	f004 fee2 	bl	8006c44 <HAL_TIM_IC_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001e86:	f000 fa09 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	; 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000144 	.word	0x20000144

08001e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0318 	add.w	r3, r7, #24
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001ec4:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <MX_TIM3_Init+0xe0>)
 8001ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001eca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ece:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001ed6:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001ed8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001edc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ede:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eea:	4822      	ldr	r0, [pc, #136]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001eec:	f004 fad5 	bl	800649a <HAL_TIM_Base_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001ef6:	f000 f9d1 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f00:	f107 0318 	add.w	r3, r7, #24
 8001f04:	4619      	mov	r1, r3
 8001f06:	481b      	ldr	r0, [pc, #108]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001f08:	f004 ff38 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001f12:	f000 f9c3 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f16:	4817      	ldr	r0, [pc, #92]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001f18:	f004 fc15 	bl	8006746 <HAL_TIM_IC_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001f22:	f000 f9bb 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4619      	mov	r1, r3
 8001f34:	480f      	ldr	r0, [pc, #60]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001f36:	f005 fad5 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001f40:	f000 f9ac 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f54:	463b      	mov	r3, r7
 8001f56:	2208      	movs	r2, #8
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <MX_TIM3_Init+0xdc>)
 8001f5c:	f004 fe72 	bl	8006c44 <HAL_TIM_IC_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001f66:	f000 f999 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000238 	.word	0x20000238
 8001f78:	40000400 	.word	0x40000400

08001f7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <MX_TIM4_Init+0xa0>)
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <MX_TIM4_Init+0xa4>)
 8001f9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fa0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001fa4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fae:	f242 7210 	movw	r2, #10000	; 0x2710
 8001fb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001fc0:	4816      	ldr	r0, [pc, #88]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fc2:	f004 fbc0 	bl	8006746 <HAL_TIM_IC_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001fcc:	f000 f966 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480f      	ldr	r0, [pc, #60]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fe0:	f005 fa80 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001fea:	f000 f957 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ffe:	463b      	mov	r3, r7
 8002000:	220c      	movs	r2, #12
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_TIM4_Init+0xa0>)
 8002006:	f004 fe1d 	bl	8006c44 <HAL_TIM_IC_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002010:	f000 f944 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000198 	.word	0x20000198
 8002020:	40000800 	.word	0x40000800

08002024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	; 0x30
 8002028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	4b91      	ldr	r3, [pc, #580]	; (8002284 <MX_GPIO_Init+0x260>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a90      	ldr	r2, [pc, #576]	; (8002284 <MX_GPIO_Init+0x260>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b8e      	ldr	r3, [pc, #568]	; (8002284 <MX_GPIO_Init+0x260>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	4b8a      	ldr	r3, [pc, #552]	; (8002284 <MX_GPIO_Init+0x260>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a89      	ldr	r2, [pc, #548]	; (8002284 <MX_GPIO_Init+0x260>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b87      	ldr	r3, [pc, #540]	; (8002284 <MX_GPIO_Init+0x260>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b83      	ldr	r3, [pc, #524]	; (8002284 <MX_GPIO_Init+0x260>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a82      	ldr	r2, [pc, #520]	; (8002284 <MX_GPIO_Init+0x260>)
 800207c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b80      	ldr	r3, [pc, #512]	; (8002284 <MX_GPIO_Init+0x260>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b7c      	ldr	r3, [pc, #496]	; (8002284 <MX_GPIO_Init+0x260>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a7b      	ldr	r2, [pc, #492]	; (8002284 <MX_GPIO_Init+0x260>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b79      	ldr	r3, [pc, #484]	; (8002284 <MX_GPIO_Init+0x260>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b75      	ldr	r3, [pc, #468]	; (8002284 <MX_GPIO_Init+0x260>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a74      	ldr	r2, [pc, #464]	; (8002284 <MX_GPIO_Init+0x260>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b72      	ldr	r3, [pc, #456]	; (8002284 <MX_GPIO_Init+0x260>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b6e      	ldr	r3, [pc, #440]	; (8002284 <MX_GPIO_Init+0x260>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a6d      	ldr	r2, [pc, #436]	; (8002284 <MX_GPIO_Init+0x260>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <MX_GPIO_Init+0x260>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	210c      	movs	r1, #12
 80020e6:	4868      	ldr	r0, [pc, #416]	; (8002288 <MX_GPIO_Init+0x264>)
 80020e8:	f001 fb02 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	2101      	movs	r1, #1
 80020f0:	4866      	ldr	r0, [pc, #408]	; (800228c <MX_GPIO_Init+0x268>)
 80020f2:	f001 fafd 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 80020f6:	2200      	movs	r2, #0
 80020f8:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 80020fc:	4864      	ldr	r0, [pc, #400]	; (8002290 <MX_GPIO_Init+0x26c>)
 80020fe:	f001 faf7 	bl	80036f0 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002108:	4862      	ldr	r0, [pc, #392]	; (8002294 <MX_GPIO_Init+0x270>)
 800210a:	f001 faf1 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CS_I2C_SPI_Pin;
 800210e:	230c      	movs	r3, #12
 8002110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4858      	ldr	r0, [pc, #352]	; (8002288 <MX_GPIO_Init+0x264>)
 8002126:	f001 f92f 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800212a:	2301      	movs	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	4852      	ldr	r0, [pc, #328]	; (800228c <MX_GPIO_Init+0x268>)
 8002142:	f001 f921 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002146:	2308      	movs	r3, #8
 8002148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002156:	2305      	movs	r3, #5
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4619      	mov	r1, r3
 8002160:	484a      	ldr	r0, [pc, #296]	; (800228c <MX_GPIO_Init+0x268>)
 8002162:	f001 f911 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8002166:	2319      	movs	r3, #25
 8002168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800216a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800216e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002170:	2302      	movs	r3, #2
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	4846      	ldr	r0, [pc, #280]	; (8002294 <MX_GPIO_Init+0x270>)
 800217c:	f001 f904 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002180:	2304      	movs	r3, #4
 8002182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4619      	mov	r1, r3
 8002192:	4841      	ldr	r0, [pc, #260]	; (8002298 <MX_GPIO_Init+0x274>)
 8002194:	f001 f8f8 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021aa:	2305      	movs	r3, #5
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4838      	ldr	r0, [pc, #224]	; (8002298 <MX_GPIO_Init+0x274>)
 80021b6:	f001 f8e7 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 80021ba:	f44f 4372 	mov.w	r3, #61952	; 0xf200
 80021be:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	482f      	ldr	r0, [pc, #188]	; (8002290 <MX_GPIO_Init+0x26c>)
 80021d4:	f001 f8d8 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80021d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80021dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021ea:	2306      	movs	r3, #6
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	4619      	mov	r1, r3
 80021f4:	4825      	ldr	r0, [pc, #148]	; (800228c <MX_GPIO_Init+0x268>)
 80021f6:	f001 f8c7 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	4820      	ldr	r0, [pc, #128]	; (8002294 <MX_GPIO_Init+0x270>)
 8002214:	f001 f8b8 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002218:	2320      	movs	r3, #32
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	4619      	mov	r1, r3
 800222a:	4819      	ldr	r0, [pc, #100]	; (8002290 <MX_GPIO_Init+0x26c>)
 800222c:	f001 f8ac 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002230:	2302      	movs	r3, #2
 8002232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002234:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4619      	mov	r1, r3
 8002244:	4810      	ldr	r0, [pc, #64]	; (8002288 <MX_GPIO_Init+0x264>)
 8002246:	f001 f89f 	bl	8003388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2006      	movs	r0, #6
 8002250:	f001 f863 	bl	800331a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002254:	2006      	movs	r0, #6
 8002256:	f001 f87c 	bl	8003352 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2009      	movs	r0, #9
 8002260:	f001 f85b 	bl	800331a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002264:	2009      	movs	r0, #9
 8002266:	f001 f874 	bl	8003352 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	200a      	movs	r0, #10
 8002270:	f001 f853 	bl	800331a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002274:	200a      	movs	r0, #10
 8002276:	f001 f86c 	bl	8003352 <HAL_NVIC_EnableIRQ>

}
 800227a:	bf00      	nop
 800227c:	3730      	adds	r7, #48	; 0x30
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40021000 	.word	0x40021000
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400

0800229c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i
}
 80022a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <Error_Handler+0x8>
	...

080022a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_MspInit+0x4c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <HAL_MspInit+0x4c>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_MspInit+0x4c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_MspInit+0x4c>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022e6:	2007      	movs	r0, #7
 80022e8:	f001 f80c 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_ADC_MspInit+0x7c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d127      	bne.n	800236a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_ADC_MspInit+0x80>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a15      	ldr	r2, [pc, #84]	; (8002378 <HAL_ADC_MspInit+0x80>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_ADC_MspInit+0x80>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_ADC_MspInit+0x80>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_ADC_MspInit+0x80>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_ADC_MspInit+0x80>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002352:	2302      	movs	r3, #2
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002356:	2303      	movs	r3, #3
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <HAL_ADC_MspInit+0x84>)
 8002366:	f001 f80f 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40012000 	.word	0x40012000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000

08002380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_I2C_MspInit+0x84>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12b      	bne.n	80023fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c2:	2312      	movs	r3, #18
 80023c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ce:	2304      	movs	r3, #4
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <HAL_I2C_MspInit+0x8c>)
 80023da:	f000 ffd5 	bl	8003388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40005400 	.word	0x40005400
 8002408:	40023800 	.word	0x40023800
 800240c:	40020400 	.word	0x40020400

08002410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a19      	ldr	r2, [pc, #100]	; (8002494 <HAL_SPI_MspInit+0x84>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d12b      	bne.n	800248a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_SPI_MspInit+0x88>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a17      	ldr	r2, [pc, #92]	; (8002498 <HAL_SPI_MspInit+0x88>)
 800243c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <HAL_SPI_MspInit+0x88>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_SPI_MspInit+0x88>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_SPI_MspInit+0x88>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_SPI_MspInit+0x88>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800246a:	23e0      	movs	r3, #224	; 0xe0
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800247a:	2305      	movs	r3, #5
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_SPI_MspInit+0x8c>)
 8002486:	f000 ff7f 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800248a:	bf00      	nop
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40013000 	.word	0x40013000
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000

080024a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_TIM_Base_MspInit+0x180>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d116      	bne.n	80024f0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b54      	ldr	r3, [pc, #336]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	201b      	movs	r0, #27
 80024e4:	f000 ff19 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024e8:	201b      	movs	r0, #27
 80024ea:	f000 ff32 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024ee:	e092      	b.n	8002616 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d135      	bne.n	8002566 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	4b49      	ldr	r3, [pc, #292]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a48      	ldr	r2, [pc, #288]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	4b42      	ldr	r3, [pc, #264]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a41      	ldr	r2, [pc, #260]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002544:	2301      	movs	r3, #1
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254c:	4619      	mov	r1, r3
 800254e:	4836      	ldr	r0, [pc, #216]	; (8002628 <HAL_TIM_Base_MspInit+0x188>)
 8002550:	f000 ff1a 	bl	8003388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	201c      	movs	r0, #28
 800255a:	f000 fede 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800255e:	201c      	movs	r0, #28
 8002560:	f000 fef7 	bl	8003352 <HAL_NVIC_EnableIRQ>
}
 8002564:	e057      	b.n	8002616 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a30      	ldr	r2, [pc, #192]	; (800262c <HAL_TIM_Base_MspInit+0x18c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d152      	bne.n	8002616 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	6413      	str	r3, [r2, #64]	; 0x40
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 8002596:	f043 0302 	orr.w	r3, r3, #2
 800259a:	6313      	str	r3, [r2, #48]	; 0x30
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6313      	str	r3, [r2, #48]	; 0x30
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_TIM_Base_MspInit+0x184>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025c4:	2301      	movs	r3, #1
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025d4:	2302      	movs	r3, #2
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025dc:	4619      	mov	r1, r3
 80025de:	4814      	ldr	r0, [pc, #80]	; (8002630 <HAL_TIM_Base_MspInit+0x190>)
 80025e0:	f000 fed2 	bl	8003388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025f6:	2302      	movs	r3, #2
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fe:	4619      	mov	r1, r3
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <HAL_TIM_Base_MspInit+0x194>)
 8002602:	f000 fec1 	bl	8003388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	201d      	movs	r0, #29
 800260c:	f000 fe85 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002610:	201d      	movs	r0, #29
 8002612:	f000 fe9e 	bl	8003352 <HAL_NVIC_EnableIRQ>
}
 8002616:	bf00      	nop
 8002618:	3738      	adds	r7, #56	; 0x38
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	40023800 	.word	0x40023800
 8002628:	40020000 	.word	0x40020000
 800262c:	40000400 	.word	0x40000400
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800

08002638 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_TIM_IC_MspInit+0x94>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d134      	bne.n	80026c4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_TIM_IC_MspInit+0x98>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_TIM_IC_MspInit+0x98>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_TIM_IC_MspInit+0x98>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_TIM_IC_MspInit+0x98>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <HAL_TIM_IC_MspInit+0x98>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_TIM_IC_MspInit+0x98>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026a4:	2302      	movs	r3, #2
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	4809      	ldr	r0, [pc, #36]	; (80026d4 <HAL_TIM_IC_MspInit+0x9c>)
 80026b0:	f000 fe6a 	bl	8003388 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	201e      	movs	r0, #30
 80026ba:	f000 fe2e 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026be:	201e      	movs	r0, #30
 80026c0:	f000 fe47 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026c4:	bf00      	nop
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020400 	.word	0x40020400

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <NMI_Handler+0x4>

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <MemManage_Handler+0x4>

080026ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002724:	f000 f90e 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002730:	2001      	movs	r0, #1
 8002732:	f001 f811 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800273e:	2008      	movs	r0, #8
 8002740:	f001 f80a 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}

08002748 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800274c:	2010      	movs	r0, #16
 800274e:	f001 f803 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <TIM1_CC_IRQHandler+0x10>)
 800275e:	f004 f969 	bl	8006a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200000fc 	.word	0x200000fc

0800276c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <TIM2_IRQHandler+0x10>)
 8002772:	f004 f95f 	bl	8006a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000144 	.word	0x20000144

08002780 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TIM3_IRQHandler+0x10>)
 8002786:	f004 f955 	bl	8006a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000238 	.word	0x20000238

08002794 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <TIM4_IRQHandler+0x10>)
 800279a:	f004 f94b 	bl	8006a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000198 	.word	0x20000198

080027a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <OTG_FS_IRQHandler+0x10>)
 80027ae:	f001 fa55 	bl	8003c5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2000071c 	.word	0x2000071c

080027bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <_sbrk+0x5c>)
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <_sbrk+0x60>)
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <_sbrk+0x64>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <_sbrk+0x64>)
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <_sbrk+0x68>)
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d207      	bcs.n	80027fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ec:	f007 f9a6 	bl	8009b3c <__errno>
 80027f0:	4603      	mov	r3, r0
 80027f2:	220c      	movs	r2, #12
 80027f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	e009      	b.n	8002810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <_sbrk+0x64>)
 800280c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20020000 	.word	0x20020000
 800281c:	00000400 	.word	0x00000400
 8002820:	200000e4 	.word	0x200000e4
 8002824:	20000a30 	.word	0x20000a30

08002828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <SystemInit+0x20>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <SystemInit+0x20>)
 8002834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002884 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002850:	480d      	ldr	r0, [pc, #52]	; (8002888 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002852:	490e      	ldr	r1, [pc, #56]	; (800288c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002868:	4c0b      	ldr	r4, [pc, #44]	; (8002898 <LoopFillZerobss+0x26>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002876:	f7ff ffd7 	bl	8002828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800287a:	f007 f965 	bl	8009b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287e:	f7fe fdd7 	bl	8001430 <main>
  bx  lr    
 8002882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800288c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002890:	08009f14 	.word	0x08009f14
  ldr r2, =_sbss
 8002894:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002898:	20000a30 	.word	0x20000a30

0800289c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC_IRQHandler>
	...

080028a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_Init+0x40>)
 80028aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_Init+0x40>)
 80028b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_Init+0x40>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f000 fd1b 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f000 f808 	bl	80028e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7ff fce8 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fd33 	bl	800336e <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f000 fcfb 	bl	800331a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2000000c 	.word	0x2000000c
 800293c:	20000014 	.word	0x20000014
 8002940:	20000010 	.word	0x20000010

08002944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x20>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x24>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_IncTick+0x24>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000014 	.word	0x20000014
 8002968:	20000340 	.word	0x20000340

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000340 	.word	0x20000340

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_Delay+0x44>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffde 	bl	800296c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000014 	.word	0x20000014

080029cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e033      	b.n	8002a4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fc84 	bl	80022f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d118      	bne.n	8002a3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a12:	f023 0302 	bic.w	r3, r3, #2
 8002a16:	f043 0202 	orr.w	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 faa4 	bl	8002f6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f023 0303 	bic.w	r3, r3, #3
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
 8002a3a:	e001      	b.n	8002a40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Start+0x1a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e0b2      	b.n	8002bd4 <HAL_ADC_Start+0x180>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d018      	beq.n	8002ab6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a94:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <HAL_ADC_Start+0x18c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_ADC_Start+0x190>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9a      	lsrs	r2, r3, #18
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002aa8:	e002      	b.n	8002ab0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f9      	bne.n	8002aaa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d17a      	bne.n	8002bba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b02:	d106      	bne.n	8002b12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f023 0206 	bic.w	r2, r3, #6
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b10:	e002      	b.n	8002b18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_ADC_Start+0x194>)
 8002b22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d12a      	bne.n	8002b90 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <HAL_ADC_Start+0x198>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d015      	beq.n	8002b70 <HAL_ADC_Start+0x11c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <HAL_ADC_Start+0x19c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d105      	bne.n	8002b5a <HAL_ADC_Start+0x106>
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_ADC_Start+0x194>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <HAL_ADC_Start+0x1a0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d136      	bne.n	8002bd2 <HAL_ADC_Start+0x17e>
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_ADC_Start+0x194>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d130      	bne.n	8002bd2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d129      	bne.n	8002bd2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	e020      	b.n	8002bd2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <HAL_ADC_Start+0x198>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d11b      	bne.n	8002bd2 <HAL_ADC_Start+0x17e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d114      	bne.n	8002bd2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e00b      	b.n	8002bd2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	2000000c 	.word	0x2000000c
 8002be4:	431bde83 	.word	0x431bde83
 8002be8:	40012300 	.word	0x40012300
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	40012100 	.word	0x40012100
 8002bf4:	40012200 	.word	0x40012200

08002bf8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c14:	d113      	bne.n	8002c3e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c24:	d10b      	bne.n	8002c3e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f043 0220 	orr.w	r2, r3, #32
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e063      	b.n	8002d06 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c3e:	f7ff fe95 	bl	800296c <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c44:	e021      	b.n	8002c8a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d01d      	beq.n	8002c8a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_ADC_PollForConversion+0x6c>
 8002c54:	f7ff fe8a 	bl	800296c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d212      	bcs.n	8002c8a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d00b      	beq.n	8002c8a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f043 0204 	orr.w	r2, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e03d      	b.n	8002d06 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d1d6      	bne.n	8002c46 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0212 	mvn.w	r2, #18
 8002ca0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d123      	bne.n	8002d04 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11f      	bne.n	8002d04 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d006      	beq.n	8002ce0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d111      	bne.n	8002d04 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x1c>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e105      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x228>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b09      	cmp	r3, #9
 8002d52:	d925      	bls.n	8002da0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68d9      	ldr	r1, [r3, #12]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	3b1e      	subs	r3, #30
 8002d6a:	2207      	movs	r2, #7
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43da      	mvns	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	400a      	ands	r2, r1
 8002d78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68d9      	ldr	r1, [r3, #12]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4403      	add	r3, r0
 8002d92:	3b1e      	subs	r3, #30
 8002d94:	409a      	lsls	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	e022      	b.n	8002de6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6919      	ldr	r1, [r3, #16]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	2207      	movs	r2, #7
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6919      	ldr	r1, [r3, #16]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4403      	add	r3, r0
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d824      	bhi.n	8002e38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3b05      	subs	r3, #5
 8002e00:	221f      	movs	r2, #31
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	3b05      	subs	r3, #5
 8002e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34
 8002e36:	e04c      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	d824      	bhi.n	8002e8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b23      	subs	r3, #35	; 0x23
 8002e52:	221f      	movs	r2, #31
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	400a      	ands	r2, r1
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b23      	subs	r3, #35	; 0x23
 8002e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
 8002e88:	e023      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	3b41      	subs	r3, #65	; 0x41
 8002e9c:	221f      	movs	r2, #31
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3b41      	subs	r3, #65	; 0x41
 8002ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed2:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <HAL_ADC_ConfigChannel+0x234>)
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <HAL_ADC_ConfigChannel+0x238>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d109      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1cc>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b12      	cmp	r3, #18
 8002ee6:	d105      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <HAL_ADC_ConfigChannel+0x238>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d123      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x21e>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d003      	beq.n	8002f0e <HAL_ADC_ConfigChannel+0x1e6>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b11      	cmp	r3, #17
 8002f0c:	d11b      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d111      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_ADC_ConfigChannel+0x23c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_ADC_ConfigChannel+0x240>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	0c9a      	lsrs	r2, r3, #18
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f38:	e002      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f9      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40012300 	.word	0x40012300
 8002f60:	40012000 	.word	0x40012000
 8002f64:	2000000c 	.word	0x2000000c
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f74:	4b79      	ldr	r3, [pc, #484]	; (800315c <ADC_Init+0x1f0>)
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	021a      	lsls	r2, r3, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	4a58      	ldr	r2, [pc, #352]	; (8003160 <ADC_Init+0x1f4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003012:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6899      	ldr	r1, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	e00f      	b.n	800306a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003058:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003068:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0202 	bic.w	r2, r2, #2
 8003078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	7e1b      	ldrb	r3, [r3, #24]
 8003084:	005a      	lsls	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	3b01      	subs	r3, #1
 80030c4:	035a      	lsls	r2, r3, #13
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	e007      	b.n	80030e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	051a      	lsls	r2, r3, #20
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003114:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003122:	025a      	lsls	r2, r3, #9
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6899      	ldr	r1, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	029a      	lsls	r2, r3, #10
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012300 	.word	0x40012300
 8003160:	0f000001 	.word	0x0f000001

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800318c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0b      	blt.n	80031f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <__NVIC_EnableIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f7ff ff8e 	bl	8003204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff29 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff3e 	bl	80031ac <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff8e 	bl	8003258 <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5d 	bl	8003204 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff31 	bl	80031c8 <__NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffa2 	bl	80032c0 <SysTick_Config>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e16b      	b.n	800367c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 815a 	bne.w	8003676 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d005      	beq.n	80033da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b03      	cmp	r3, #3
 8003446:	d017      	beq.n	8003478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d123      	bne.n	80034cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80b4 	beq.w	8003676 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b60      	ldr	r3, [pc, #384]	; (8003694 <HAL_GPIO_Init+0x30c>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <HAL_GPIO_Init+0x30c>)
 8003518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	4b5d      	ldr	r3, [pc, #372]	; (8003694 <HAL_GPIO_Init+0x30c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352a:	4a5b      	ldr	r2, [pc, #364]	; (8003698 <HAL_GPIO_Init+0x310>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_GPIO_Init+0x314>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <HAL_GPIO_Init+0x226>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_GPIO_Init+0x318>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d025      	beq.n	80035aa <HAL_GPIO_Init+0x222>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a50      	ldr	r2, [pc, #320]	; (80036a4 <HAL_GPIO_Init+0x31c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <HAL_GPIO_Init+0x21e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4f      	ldr	r2, [pc, #316]	; (80036a8 <HAL_GPIO_Init+0x320>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d019      	beq.n	80035a2 <HAL_GPIO_Init+0x21a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4e      	ldr	r2, [pc, #312]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_Init+0x216>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4d      	ldr	r2, [pc, #308]	; (80036b0 <HAL_GPIO_Init+0x328>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_GPIO_Init+0x212>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_GPIO_Init+0x32c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_Init+0x20e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4b      	ldr	r2, [pc, #300]	; (80036b8 <HAL_GPIO_Init+0x330>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_GPIO_Init+0x20a>
 800358e:	2307      	movs	r3, #7
 8003590:	e00e      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 8003592:	2308      	movs	r3, #8
 8003594:	e00c      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 8003596:	2306      	movs	r3, #6
 8003598:	e00a      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 800359a:	2305      	movs	r3, #5
 800359c:	e008      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 800359e:	2304      	movs	r3, #4
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 80035a2:	2303      	movs	r3, #3
 80035a4:	e004      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e002      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 80035ae:	2300      	movs	r3, #0
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	f002 0203 	and.w	r2, r2, #3
 80035b6:	0092      	lsls	r2, r2, #2
 80035b8:	4093      	lsls	r3, r2
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c0:	4935      	ldr	r1, [pc, #212]	; (8003698 <HAL_GPIO_Init+0x310>)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ce:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_GPIO_Init+0x334>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f2:	4a32      	ldr	r2, [pc, #200]	; (80036bc <HAL_GPIO_Init+0x334>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035f8:	4b30      	ldr	r3, [pc, #192]	; (80036bc <HAL_GPIO_Init+0x334>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800361c:	4a27      	ldr	r2, [pc, #156]	; (80036bc <HAL_GPIO_Init+0x334>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_GPIO_Init+0x334>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <HAL_GPIO_Init+0x334>)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_GPIO_Init+0x334>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003670:	4a12      	ldr	r2, [pc, #72]	; (80036bc <HAL_GPIO_Init+0x334>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3301      	adds	r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b0f      	cmp	r3, #15
 8003680:	f67f ae90 	bls.w	80033a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3724      	adds	r7, #36	; 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	40013800 	.word	0x40013800
 800369c:	40020000 	.word	0x40020000
 80036a0:	40020400 	.word	0x40020400
 80036a4:	40020800 	.word	0x40020800
 80036a8:	40020c00 	.word	0x40020c00
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40021400 	.word	0x40021400
 80036b4:	40021800 	.word	0x40021800
 80036b8:	40021c00 	.word	0x40021c00
 80036bc:	40013c00 	.word	0x40013c00

080036c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e001      	b.n	80036e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800370c:	e003      	b.n	8003716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	041a      	lsls	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	619a      	str	r2, [r3, #24]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	041a      	lsls	r2, r3, #16
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	43d9      	mvns	r1, r3
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	400b      	ands	r3, r1
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800376e:	4a05      	ldr	r2, [pc, #20]	; (8003784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fd10 	bl	800119c <HAL_GPIO_EXTI_Callback>
  }
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40013c00 	.word	0x40013c00

08003788 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b08f      	sub	sp, #60	; 0x3c
 800378c:	af0a      	add	r7, sp, #40	; 0x28
 800378e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e054      	b.n	8003844 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f005 ff65 	bl	8009684 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2203      	movs	r2, #3
 80037be:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 ff85 	bl	80076e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	687e      	ldr	r6, [r7, #4]
 80037e6:	466d      	mov	r5, sp
 80037e8:	f106 0410 	add.w	r4, r6, #16
 80037ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037fc:	1d33      	adds	r3, r6, #4
 80037fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003800:	6838      	ldr	r0, [r7, #0]
 8003802:	f003 feff 	bl	8007604 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f003 ff7c 	bl	800770a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	687e      	ldr	r6, [r7, #4]
 800381a:	466d      	mov	r5, sp
 800381c:	f106 0410 	add.w	r4, r6, #16
 8003820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003828:	e894 0003 	ldmia.w	r4, {r0, r1}
 800382c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003830:	1d33      	adds	r3, r6, #4
 8003832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003834:	6838      	ldr	r0, [r7, #0]
 8003836:	f004 f8e3 	bl	8007a00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800384c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af04      	add	r7, sp, #16
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	70fb      	strb	r3, [r7, #3]
 800385e:	460b      	mov	r3, r1
 8003860:	70bb      	strb	r3, [r7, #2]
 8003862:	4613      	mov	r3, r2
 8003864:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_HCD_HC_Init+0x28>
 8003870:	2302      	movs	r3, #2
 8003872:	e076      	b.n	8003962 <HAL_HCD_HC_Init+0x116>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	333d      	adds	r3, #61	; 0x3d
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	3338      	adds	r3, #56	; 0x38
 800389c:	787a      	ldrb	r2, [r7, #1]
 800389e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	3340      	adds	r3, #64	; 0x40
 80038ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038b0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	3339      	adds	r3, #57	; 0x39
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	333f      	adds	r3, #63	; 0x3f
 80038d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80038d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	78ba      	ldrb	r2, [r7, #2]
 80038dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038e0:	b2d0      	uxtb	r0, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	333a      	adds	r3, #58	; 0x3a
 80038ee:	4602      	mov	r2, r0
 80038f0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80038f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da09      	bge.n	800390e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	333b      	adds	r3, #59	; 0x3b
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e008      	b.n	8003920 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	333b      	adds	r3, #59	; 0x3b
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	333c      	adds	r3, #60	; 0x3c
 800392e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003932:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	787c      	ldrb	r4, [r7, #1]
 800393a:	78ba      	ldrb	r2, [r7, #2]
 800393c:	78f9      	ldrb	r1, [r7, #3]
 800393e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	f897 3020 	ldrb.w	r3, [r7, #32]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	4623      	mov	r3, r4
 8003950:	f004 f9a6 	bl	8007ca0 <USB_HC_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bd90      	pop	{r4, r7, pc}

0800396a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_HCD_HC_Halt+0x1e>
 8003984:	2302      	movs	r3, #2
 8003986:	e00f      	b.n	80039a8 <HAL_HCD_HC_Halt+0x3e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f004 fbe2 	bl	8008162 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	70fb      	strb	r3, [r7, #3]
 80039c2:	460b      	mov	r3, r1
 80039c4:	70bb      	strb	r3, [r7, #2]
 80039c6:	4613      	mov	r3, r2
 80039c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	333b      	adds	r3, #59	; 0x3b
 80039d8:	78ba      	ldrb	r2, [r7, #2]
 80039da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	333f      	adds	r3, #63	; 0x3f
 80039ea:	787a      	ldrb	r2, [r7, #1]
 80039ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80039ee:	7c3b      	ldrb	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d112      	bne.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3342      	adds	r3, #66	; 0x42
 8003a02:	2203      	movs	r2, #3
 8003a04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	333d      	adds	r3, #61	; 0x3d
 8003a14:	7f3a      	ldrb	r2, [r7, #28]
 8003a16:	701a      	strb	r2, [r3, #0]
 8003a18:	e008      	b.n	8003a2c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3342      	adds	r3, #66	; 0x42
 8003a28:	2202      	movs	r2, #2
 8003a2a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	f200 80c6 	bhi.w	8003bc0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003bad 	.word	0x08003bad
 8003a44:	08003ab1 	.word	0x08003ab1
 8003a48:	08003b2f 	.word	0x08003b2f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003a4c:	7c3b      	ldrb	r3, [r7, #16]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	f040 80b8 	bne.w	8003bc4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003a54:	78bb      	ldrb	r3, [r7, #2]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 80b4 	bne.w	8003bc4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003a5c:	8b3b      	ldrh	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	212c      	movs	r1, #44	; 0x2c
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3355      	adds	r3, #85	; 0x55
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3355      	adds	r3, #85	; 0x55
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	212c      	movs	r1, #44	; 0x2c
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	3342      	adds	r3, #66	; 0x42
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a9a:	e093      	b.n	8003bc4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3342      	adds	r3, #66	; 0x42
 8003aaa:	2202      	movs	r2, #2
 8003aac:	701a      	strb	r2, [r3, #0]
      break;
 8003aae:	e089      	b.n	8003bc4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ab0:	78bb      	ldrb	r3, [r7, #2]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11d      	bne.n	8003af2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3355      	adds	r3, #85	; 0x55
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3342      	adds	r3, #66	; 0x42
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003adc:	e073      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3342      	adds	r3, #66	; 0x42
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]
      break;
 8003af0:	e069      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	3354      	adds	r3, #84	; 0x54
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	212c      	movs	r1, #44	; 0x2c
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	3342      	adds	r3, #66	; 0x42
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
      break;
 8003b18:	e055      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3342      	adds	r3, #66	; 0x42
 8003b28:	2202      	movs	r2, #2
 8003b2a:	701a      	strb	r2, [r3, #0]
      break;
 8003b2c:	e04b      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b2e:	78bb      	ldrb	r3, [r7, #2]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d11d      	bne.n	8003b70 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3355      	adds	r3, #85	; 0x55
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	3342      	adds	r3, #66	; 0x42
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b5a:	e034      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	3342      	adds	r3, #66	; 0x42
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	701a      	strb	r2, [r3, #0]
      break;
 8003b6e:	e02a      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	212c      	movs	r1, #44	; 0x2c
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3354      	adds	r3, #84	; 0x54
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3342      	adds	r3, #66	; 0x42
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
      break;
 8003b96:	e016      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3342      	adds	r3, #66	; 0x42
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	701a      	strb	r2, [r3, #0]
      break;
 8003baa:	e00c      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3342      	adds	r3, #66	; 0x42
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003bc4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3344      	adds	r3, #68	; 0x44
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	8b3a      	ldrh	r2, [r7, #24]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	202c      	movs	r0, #44	; 0x2c
 8003be0:	fb00 f303 	mul.w	r3, r0, r3
 8003be4:	440b      	add	r3, r1
 8003be6:	334c      	adds	r3, #76	; 0x4c
 8003be8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3360      	adds	r3, #96	; 0x60
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	3350      	adds	r3, #80	; 0x50
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3339      	adds	r3, #57	; 0x39
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3361      	adds	r3, #97	; 0x61
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	222c      	movs	r2, #44	; 0x2c
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	3338      	adds	r3, #56	; 0x38
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	18d1      	adds	r1, r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f004 f936 	bl	8007ebc <USB_HC_StartXfer>
 8003c50:	4603      	mov	r3, r0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 fe83 	bl	800797e <USB_GetMode>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	f040 80f6 	bne.w	8003e6c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f003 fe67 	bl	8007958 <USB_ReadInterrupts>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80ec 	beq.w	8003e6a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 fe5e 	bl	8007958 <USB_ReadInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ca6:	d104      	bne.n	8003cb2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003cb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 fe4e 	bl	8007958 <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc6:	d104      	bne.n	8003cd2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f003 fe3e 	bl	8007958 <USB_ReadInterrupts>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ce2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ce6:	d104      	bne.n	8003cf2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cf0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f003 fe2e 	bl	8007958 <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d103      	bne.n	8003d0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f003 fe20 	bl	8007958 <USB_ReadInterrupts>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d22:	d11c      	bne.n	8003d5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d3e:	2110      	movs	r1, #16
 8003d40:	6938      	ldr	r0, [r7, #16]
 8003d42:	f003 fd2f 	bl	80077a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d46:	6938      	ldr	r0, [r7, #16]
 8003d48:	f003 fd50 	bl	80077ec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f003 ff08 	bl	8007b68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f005 fd11 	bl	8009780 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f003 fdf8 	bl	8007958 <USB_ReadInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d72:	d102      	bne.n	8003d7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f001 f9e7 	bl	8005148 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f003 fdea 	bl	8007958 <USB_ReadInterrupts>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d106      	bne.n	8003d9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f005 fcda 	bl	8009748 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f003 fdd9 	bl	8007958 <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d101      	bne.n	8003db4 <HAL_HCD_IRQHandler+0x158>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <HAL_HCD_IRQHandler+0x15a>
 8003db4:	2300      	movs	r3, #0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d012      	beq.n	8003de0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0210 	bic.w	r2, r2, #16
 8003dc8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f001 f8ea 	bl	8004fa4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0210 	orr.w	r2, r2, #16
 8003dde:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 fdb7 	bl	8007958 <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003df4:	d13a      	bne.n	8003e6c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f004 f9a0 	bl	8008140 <USB_HC_ReadInterrupt>
 8003e00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e025      	b.n	8003e54 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d018      	beq.n	8003e4e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e32:	d106      	bne.n	8003e42 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f88f 	bl	8003f5e <HCD_HC_IN_IRQHandler>
 8003e40:	e005      	b.n	8003e4e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fcaa 	bl	80047a2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3301      	adds	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3d4      	bcc.n	8003e08 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e66:	615a      	str	r2, [r3, #20]
 8003e68:	e000      	b.n	8003e6c <HAL_HCD_IRQHandler+0x210>
      return;
 8003e6a:	bf00      	nop
    }
  }
}
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_HCD_Start+0x16>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e013      	b.n	8003eb0 <HAL_HCD_Start+0x3e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f003 fea0 	bl	8007bdc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f003 fc10 	bl	80076c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_HCD_Stop+0x16>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e00d      	b.n	8003eea <HAL_HCD_Stop+0x32>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f004 fa9a 	bl	8008414 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	3360      	adds	r3, #96	; 0x60
 8003f0c:	781b      	ldrb	r3, [r3, #0]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	3350      	adds	r3, #80	; 0x50
 8003f34:	681b      	ldr	r3, [r3, #0]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f003 fe94 	bl	8007c7c <USB_GetCurrentFrame>
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d119      	bne.n	8003fc2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	60d3      	str	r3, [r2, #12]
 8003fc0:	e101      	b.n	80041c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd8:	d12b      	bne.n	8004032 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3361      	adds	r3, #97	; 0x61
 8003ffc:	2207      	movs	r2, #7
 8003ffe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	440a      	add	r2, r1
 8004016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f004 f899 	bl	8008162 <USB_HC_Halt>
 8004030:	e0c9      	b.n	80041c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b20      	cmp	r3, #32
 8004046:	d109      	bne.n	800405c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	461a      	mov	r2, r3
 8004056:	2320      	movs	r3, #32
 8004058:	6093      	str	r3, [r2, #8]
 800405a:	e0b4      	b.n	80041c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b08      	cmp	r3, #8
 8004070:	d133      	bne.n	80040da <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	440a      	add	r2, r1
 8004088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	3361      	adds	r3, #97	; 0x61
 80040a0:	2205      	movs	r2, #5
 80040a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	461a      	mov	r2, r3
 80040b2:	2310      	movs	r3, #16
 80040b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c2:	461a      	mov	r2, r3
 80040c4:	2308      	movs	r3, #8
 80040c6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f004 f845 	bl	8008162 <USB_HC_Halt>
 80040d8:	e075      	b.n	80041c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f0:	d134      	bne.n	800415c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	440a      	add	r2, r1
 8004108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	3361      	adds	r3, #97	; 0x61
 8004120:	2208      	movs	r2, #8
 8004122:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	2310      	movs	r3, #16
 8004134:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	461a      	mov	r2, r3
 8004144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004148:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f004 f804 	bl	8008162 <USB_HC_Halt>
 800415a:	e034      	b.n	80041c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d129      	bne.n	80041c6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	440a      	add	r2, r1
 8004188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800418c:	f043 0302 	orr.w	r3, r3, #2
 8004190:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3361      	adds	r3, #97	; 0x61
 80041a0:	2206      	movs	r2, #6
 80041a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 ffd7 	bl	8008162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	461a      	mov	r2, r3
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d122      	bne.n	8004224 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f003 ffaa 	bl	8008162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421a:	461a      	mov	r2, r3
 800421c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004220:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004222:	e2ba      	b.n	800479a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	f040 811b 	bne.w	8004472 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d019      	beq.n	8004278 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3348      	adds	r3, #72	; 0x48
 8004252:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	0159      	lsls	r1, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	440b      	add	r3, r1
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	202c      	movs	r0, #44	; 0x2c
 800426e:	fb00 f303 	mul.w	r3, r0, r3
 8004272:	440b      	add	r3, r1
 8004274:	3350      	adds	r3, #80	; 0x50
 8004276:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3361      	adds	r3, #97	; 0x61
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	212c      	movs	r1, #44	; 0x2c
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	4413      	add	r3, r2
 8004296:	335c      	adds	r3, #92	; 0x5c
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	461a      	mov	r2, r3
 80042aa:	2301      	movs	r3, #1
 80042ac:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	333f      	adds	r3, #63	; 0x3f
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	333f      	adds	r3, #63	; 0x3f
 80042d0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d121      	bne.n	800431a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f0:	f043 0302 	orr.w	r3, r3, #2
 80042f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f003 ff2e 	bl	8008162 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004312:	461a      	mov	r2, r3
 8004314:	2310      	movs	r3, #16
 8004316:	6093      	str	r3, [r2, #8]
 8004318:	e066      	b.n	80043e8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	333f      	adds	r3, #63	; 0x3f
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d127      	bne.n	800437e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	0151      	lsls	r1, r2, #5
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	440a      	add	r2, r1
 8004344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800434c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	3360      	adds	r3, #96	; 0x60
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	b2d9      	uxtb	r1, r3
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	202c      	movs	r0, #44	; 0x2c
 800436a:	fb00 f303 	mul.w	r3, r0, r3
 800436e:	4413      	add	r3, r2
 8004370:	3360      	adds	r3, #96	; 0x60
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f005 fa10 	bl	800979c <HAL_HCD_HC_NotifyURBChange_Callback>
 800437c:	e034      	b.n	80043e8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	212c      	movs	r1, #44	; 0x2c
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	333f      	adds	r3, #63	; 0x3f
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d12a      	bne.n	80043e8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	3360      	adds	r3, #96	; 0x60
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	3354      	adds	r3, #84	; 0x54
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f083 0301 	eor.w	r3, r3, #1
 80043b8:	b2d8      	uxtb	r0, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3354      	adds	r3, #84	; 0x54
 80043c8:	4602      	mov	r2, r0
 80043ca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	b2d9      	uxtb	r1, r3
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	202c      	movs	r0, #44	; 0x2c
 80043d6:	fb00 f303 	mul.w	r3, r0, r3
 80043da:	4413      	add	r3, r2
 80043dc:	3360      	adds	r3, #96	; 0x60
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f005 f9da 	bl	800979c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d12b      	bne.n	8004448 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	3348      	adds	r3, #72	; 0x48
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	202c      	movs	r0, #44	; 0x2c
 8004406:	fb00 f202 	mul.w	r2, r0, r2
 800440a:	440a      	add	r2, r1
 800440c:	3240      	adds	r2, #64	; 0x40
 800440e:	8812      	ldrh	r2, [r2, #0]
 8004410:	fbb3 f3f2 	udiv	r3, r3, r2
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 81be 	beq.w	800479a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3354      	adds	r3, #84	; 0x54
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	f083 0301 	eor.w	r3, r3, #1
 8004432:	b2d8      	uxtb	r0, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3354      	adds	r3, #84	; 0x54
 8004442:	4602      	mov	r2, r0
 8004444:	701a      	strb	r2, [r3, #0]
}
 8004446:	e1a8      	b.n	800479a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	212c      	movs	r1, #44	; 0x2c
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	3354      	adds	r3, #84	; 0x54
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f083 0301 	eor.w	r3, r3, #1
 800445c:	b2d8      	uxtb	r0, r3
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	212c      	movs	r1, #44	; 0x2c
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	4413      	add	r3, r2
 800446a:	3354      	adds	r3, #84	; 0x54
 800446c:	4602      	mov	r2, r0
 800446e:	701a      	strb	r2, [r3, #0]
}
 8004470:	e193      	b.n	800479a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	f040 8106 	bne.w	8004696 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044a4:	f023 0302 	bic.w	r3, r3, #2
 80044a8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3361      	adds	r3, #97	; 0x61
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d109      	bne.n	80044d2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	3360      	adds	r3, #96	; 0x60
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e0c9      	b.n	8004666 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	3361      	adds	r3, #97	; 0x61
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d109      	bne.n	80044fa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	3360      	adds	r3, #96	; 0x60
 80044f4:	2205      	movs	r2, #5
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e0b5      	b.n	8004666 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	3361      	adds	r3, #97	; 0x61
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d009      	beq.n	8004522 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	3361      	adds	r3, #97	; 0x61
 800451c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800451e:	2b08      	cmp	r3, #8
 8004520:	d150      	bne.n	80045c4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	212c      	movs	r1, #44	; 0x2c
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	4413      	add	r3, r2
 800452e:	335c      	adds	r3, #92	; 0x5c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	202c      	movs	r0, #44	; 0x2c
 800453a:	fb00 f303 	mul.w	r3, r0, r3
 800453e:	440b      	add	r3, r1
 8004540:	335c      	adds	r3, #92	; 0x5c
 8004542:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	212c      	movs	r1, #44	; 0x2c
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	4413      	add	r3, r2
 8004550:	335c      	adds	r3, #92	; 0x5c
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d912      	bls.n	800457e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	212c      	movs	r1, #44	; 0x2c
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	335c      	adds	r3, #92	; 0x5c
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	212c      	movs	r1, #44	; 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	3360      	adds	r3, #96	; 0x60
 8004578:	2204      	movs	r2, #4
 800457a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800457c:	e073      	b.n	8004666 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	212c      	movs	r1, #44	; 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	3360      	adds	r3, #96	; 0x60
 800458c:	2202      	movs	r2, #2
 800458e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ae:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	461a      	mov	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045c2:	e050      	b.n	8004666 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3361      	adds	r3, #97	; 0x61
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d122      	bne.n	800461e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3360      	adds	r3, #96	; 0x60
 80045e6:	2202      	movs	r2, #2
 80045e8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004600:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004608:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4413      	add	r3, r2
 8004612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004616:	461a      	mov	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e023      	b.n	8004666 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	3361      	adds	r3, #97	; 0x61
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b07      	cmp	r3, #7
 8004630:	d119      	bne.n	8004666 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	212c      	movs	r1, #44	; 0x2c
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	4413      	add	r3, r2
 800463e:	335c      	adds	r3, #92	; 0x5c
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	202c      	movs	r0, #44	; 0x2c
 800464a:	fb00 f303 	mul.w	r3, r0, r3
 800464e:	440b      	add	r3, r1
 8004650:	335c      	adds	r3, #92	; 0x5c
 8004652:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	3360      	adds	r3, #96	; 0x60
 8004662:	2204      	movs	r2, #4
 8004664:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004672:	461a      	mov	r2, r3
 8004674:	2302      	movs	r3, #2
 8004676:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	b2d9      	uxtb	r1, r3
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	202c      	movs	r0, #44	; 0x2c
 8004682:	fb00 f303 	mul.w	r3, r0, r3
 8004686:	4413      	add	r3, r2
 8004688:	3360      	adds	r3, #96	; 0x60
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f005 f884 	bl	800979c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004694:	e081      	b.n	800479a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d176      	bne.n	800479a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	333f      	adds	r3, #63	; 0x3f
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d121      	bne.n	8004704 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	335c      	adds	r3, #92	; 0x5c
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f003 fd30 	bl	8008162 <USB_HC_Halt>
 8004702:	e041      	b.n	8004788 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	212c      	movs	r1, #44	; 0x2c
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	4413      	add	r3, r2
 8004710:	333f      	adds	r3, #63	; 0x3f
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	212c      	movs	r1, #44	; 0x2c
 800471e:	fb01 f303 	mul.w	r3, r1, r3
 8004722:	4413      	add	r3, r2
 8004724:	333f      	adds	r3, #63	; 0x3f
 8004726:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004728:	2b02      	cmp	r3, #2
 800472a:	d12d      	bne.n	8004788 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	335c      	adds	r3, #92	; 0x5c
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d120      	bne.n	8004788 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	212c      	movs	r1, #44	; 0x2c
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	4413      	add	r3, r2
 8004752:	3361      	adds	r3, #97	; 0x61
 8004754:	2203      	movs	r2, #3
 8004756:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	440a      	add	r2, r1
 800476e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fced 	bl	8008162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	461a      	mov	r2, r3
 8004796:	2310      	movs	r3, #16
 8004798:	6093      	str	r3, [r2, #8]
}
 800479a:	bf00      	nop
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b088      	sub	sp, #32
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d119      	bne.n	8004806 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047de:	461a      	mov	r2, r3
 80047e0:	2304      	movs	r3, #4
 80047e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047fe:	f043 0302 	orr.w	r3, r3, #2
 8004802:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004804:	e3ca      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	4413      	add	r3, r2
 800480e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b20      	cmp	r3, #32
 800481a:	d13e      	bne.n	800489a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	4413      	add	r3, r2
 8004824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004828:	461a      	mov	r2, r3
 800482a:	2320      	movs	r3, #32
 800482c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	212c      	movs	r1, #44	; 0x2c
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	4413      	add	r3, r2
 800483a:	333d      	adds	r3, #61	; 0x3d
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	f040 83ac 	bne.w	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	212c      	movs	r1, #44	; 0x2c
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	333d      	adds	r3, #61	; 0x3d
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	3360      	adds	r3, #96	; 0x60
 8004864:	2202      	movs	r2, #2
 8004866:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	440a      	add	r2, r1
 800487e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004882:	f043 0302 	orr.w	r3, r3, #2
 8004886:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f003 fc65 	bl	8008162 <USB_HC_Halt>
}
 8004898:	e380      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b0:	d122      	bne.n	80048f8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	0151      	lsls	r1, r2, #5
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	440a      	add	r2, r1
 80048c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f003 fc40 	bl	8008162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	461a      	mov	r2, r3
 80048f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f4:	6093      	str	r3, [r2, #8]
}
 80048f6:	e351      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d150      	bne.n	80049b0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	212c      	movs	r1, #44	; 0x2c
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	335c      	adds	r3, #92	; 0x5c
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d111      	bne.n	800495a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	212c      	movs	r1, #44	; 0x2c
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	333d      	adds	r3, #61	; 0x3d
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004954:	461a      	mov	r2, r3
 8004956:	2340      	movs	r3, #64	; 0x40
 8004958:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	4413      	add	r3, r2
 8004962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	440a      	add	r2, r1
 8004970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f003 fbec 	bl	8008162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	461a      	mov	r2, r3
 8004998:	2301      	movs	r3, #1
 800499a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3361      	adds	r3, #97	; 0x61
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
}
 80049ae:	e2f5      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d13c      	bne.n	8004a40 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	3361      	adds	r3, #97	; 0x61
 80049d4:	2204      	movs	r2, #4
 80049d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	333d      	adds	r3, #61	; 0x3d
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	212c      	movs	r1, #44	; 0x2c
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	335c      	adds	r3, #92	; 0x5c
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a16:	f043 0302 	orr.w	r3, r3, #2
 8004a1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f003 fb9b 	bl	8008162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2340      	movs	r3, #64	; 0x40
 8004a3c:	6093      	str	r3, [r2, #8]
}
 8004a3e:	e2ad      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d12a      	bne.n	8004aac <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a62:	461a      	mov	r2, r3
 8004a64:	2308      	movs	r3, #8
 8004a66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a82:	f043 0302 	orr.w	r3, r3, #2
 8004a86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f003 fb65 	bl	8008162 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3361      	adds	r3, #97	; 0x61
 8004aa6:	2205      	movs	r2, #5
 8004aa8:	701a      	strb	r2, [r3, #0]
}
 8004aaa:	e277      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d150      	bne.n	8004b64 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	335c      	adds	r3, #92	; 0x5c
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	212c      	movs	r1, #44	; 0x2c
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	3361      	adds	r3, #97	; 0x61
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	333d      	adds	r3, #61	; 0x3d
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d112      	bne.n	8004b20 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	333c      	adds	r3, #60	; 0x3c
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d108      	bne.n	8004b20 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	333d      	adds	r3, #61	; 0x3d
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b3a:	f043 0302 	orr.w	r3, r3, #2
 8004b3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f003 fb09 	bl	8008162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2310      	movs	r3, #16
 8004b60:	6093      	str	r3, [r2, #8]
}
 8004b62:	e21b      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d174      	bne.n	8004c64 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d121      	bne.n	8004bc6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3361      	adds	r3, #97	; 0x61
 8004b90:	2206      	movs	r2, #6
 8004b92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bae:	f043 0302 	orr.w	r3, r3, #2
 8004bb2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f003 facf 	bl	8008162 <USB_HC_Halt>
 8004bc4:	e044      	b.n	8004c50 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	212c      	movs	r1, #44	; 0x2c
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	335c      	adds	r3, #92	; 0x5c
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	202c      	movs	r0, #44	; 0x2c
 8004bde:	fb00 f303 	mul.w	r3, r0, r3
 8004be2:	440b      	add	r3, r1
 8004be4:	335c      	adds	r3, #92	; 0x5c
 8004be6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	335c      	adds	r3, #92	; 0x5c
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d920      	bls.n	8004c3e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	212c      	movs	r1, #44	; 0x2c
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	335c      	adds	r3, #92	; 0x5c
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	3360      	adds	r3, #96	; 0x60
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	b2d9      	uxtb	r1, r3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	202c      	movs	r0, #44	; 0x2c
 8004c2a:	fb00 f303 	mul.w	r3, r0, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	3360      	adds	r3, #96	; 0x60
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f004 fdb0 	bl	800979c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c3c:	e008      	b.n	8004c50 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	212c      	movs	r1, #44	; 0x2c
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	3360      	adds	r3, #96	; 0x60
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	6093      	str	r3, [r2, #8]
}
 8004c62:	e19b      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7a:	d134      	bne.n	8004ce6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c96:	f043 0302 	orr.w	r3, r3, #2
 8004c9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f003 fa5b 	bl	8008162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2310      	movs	r3, #16
 8004cbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	212c      	movs	r1, #44	; 0x2c
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	3361      	adds	r3, #97	; 0x61
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	701a      	strb	r2, [r3, #0]
}
 8004ce4:	e15a      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	f040 814f 	bne.w	8004f9c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d18:	f023 0302 	bic.w	r3, r3, #2
 8004d1c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	3361      	adds	r3, #97	; 0x61
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d17d      	bne.n	8004e2e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	212c      	movs	r1, #44	; 0x2c
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3360      	adds	r3, #96	; 0x60
 8004d40:	2201      	movs	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	212c      	movs	r1, #44	; 0x2c
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	4413      	add	r3, r2
 8004d50:	333f      	adds	r3, #63	; 0x3f
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d00a      	beq.n	8004d6e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	212c      	movs	r1, #44	; 0x2c
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	333f      	adds	r3, #63	; 0x3f
 8004d66:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	f040 8100 	bne.w	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d113      	bne.n	8004d9e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	212c      	movs	r1, #44	; 0x2c
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	3355      	adds	r3, #85	; 0x55
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	f083 0301 	eor.w	r3, r3, #1
 8004d8a:	b2d8      	uxtb	r0, r3
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	212c      	movs	r1, #44	; 0x2c
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	3355      	adds	r3, #85	; 0x55
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	f040 80e3 	bne.w	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	212c      	movs	r1, #44	; 0x2c
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	334c      	adds	r3, #76	; 0x4c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80d8 	beq.w	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	212c      	movs	r1, #44	; 0x2c
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	4413      	add	r3, r2
 8004dca:	334c      	adds	r3, #76	; 0x4c
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	202c      	movs	r0, #44	; 0x2c
 8004dd4:	fb00 f202 	mul.w	r2, r0, r2
 8004dd8:	440a      	add	r2, r1
 8004dda:	3240      	adds	r2, #64	; 0x40
 8004ddc:	8812      	ldrh	r2, [r2, #0]
 8004dde:	4413      	add	r3, r2
 8004de0:	3b01      	subs	r3, #1
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	202c      	movs	r0, #44	; 0x2c
 8004de8:	fb00 f202 	mul.w	r2, r0, r2
 8004dec:	440a      	add	r2, r1
 8004dee:	3240      	adds	r2, #64	; 0x40
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80b5 	beq.w	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	212c      	movs	r1, #44	; 0x2c
 8004e0a:	fb01 f303 	mul.w	r3, r1, r3
 8004e0e:	4413      	add	r3, r2
 8004e10:	3355      	adds	r3, #85	; 0x55
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	f083 0301 	eor.w	r3, r3, #1
 8004e18:	b2d8      	uxtb	r0, r3
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	212c      	movs	r1, #44	; 0x2c
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	3355      	adds	r3, #85	; 0x55
 8004e28:	4602      	mov	r2, r0
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e09f      	b.n	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	212c      	movs	r1, #44	; 0x2c
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3361      	adds	r3, #97	; 0x61
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d109      	bne.n	8004e56 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	212c      	movs	r1, #44	; 0x2c
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3360      	adds	r3, #96	; 0x60
 8004e50:	2202      	movs	r2, #2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e08b      	b.n	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	3361      	adds	r3, #97	; 0x61
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d109      	bne.n	8004e7e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	212c      	movs	r1, #44	; 0x2c
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	3360      	adds	r3, #96	; 0x60
 8004e78:	2202      	movs	r2, #2
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e077      	b.n	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	3361      	adds	r3, #97	; 0x61
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d109      	bne.n	8004ea6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	212c      	movs	r1, #44	; 0x2c
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3360      	adds	r3, #96	; 0x60
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	e063      	b.n	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3361      	adds	r3, #97	; 0x61
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d009      	beq.n	8004ece <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	212c      	movs	r1, #44	; 0x2c
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3361      	adds	r3, #97	; 0x61
 8004ec8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d14f      	bne.n	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	212c      	movs	r1, #44	; 0x2c
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	335c      	adds	r3, #92	; 0x5c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	202c      	movs	r0, #44	; 0x2c
 8004ee6:	fb00 f303 	mul.w	r3, r0, r3
 8004eea:	440b      	add	r3, r1
 8004eec:	335c      	adds	r3, #92	; 0x5c
 8004eee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	335c      	adds	r3, #92	; 0x5c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d912      	bls.n	8004f2a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	212c      	movs	r1, #44	; 0x2c
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	335c      	adds	r3, #92	; 0x5c
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	3360      	adds	r3, #96	; 0x60
 8004f24:	2204      	movs	r2, #4
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e021      	b.n	8004f6e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	212c      	movs	r1, #44	; 0x2c
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	4413      	add	r3, r2
 8004f36:	3360      	adds	r3, #96	; 0x60
 8004f38:	2202      	movs	r2, #2
 8004f3a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f52:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f68:	461a      	mov	r2, r3
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	b2d9      	uxtb	r1, r3
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	202c      	movs	r0, #44	; 0x2c
 8004f8a:	fb00 f303 	mul.w	r3, r0, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	3360      	adds	r3, #96	; 0x60
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f004 fc00 	bl	800979c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f9c:	bf00      	nop
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	0c5b      	lsrs	r3, r3, #17
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fd8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d004      	beq.n	8004fea <HCD_RXQLVL_IRQHandler+0x46>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	f000 80a9 	beq.w	800513a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004fe8:	e0aa      	b.n	8005140 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80a6 	beq.w	800513e <HCD_RXQLVL_IRQHandler+0x19a>
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	212c      	movs	r1, #44	; 0x2c
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3344      	adds	r3, #68	; 0x44
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 809b 	beq.w	800513e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	212c      	movs	r1, #44	; 0x2c
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	3350      	adds	r3, #80	; 0x50
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	441a      	add	r2, r3
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	202c      	movs	r0, #44	; 0x2c
 8005022:	fb00 f303 	mul.w	r3, r0, r3
 8005026:	440b      	add	r3, r1
 8005028:	334c      	adds	r3, #76	; 0x4c
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d87a      	bhi.n	8005126 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	212c      	movs	r1, #44	; 0x2c
 800503a:	fb01 f303 	mul.w	r3, r1, r3
 800503e:	4413      	add	r3, r2
 8005040:	3344      	adds	r3, #68	; 0x44
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	b292      	uxth	r2, r2
 8005048:	4619      	mov	r1, r3
 800504a:	f002 fc2d 	bl	80078a8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	212c      	movs	r1, #44	; 0x2c
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	4413      	add	r3, r2
 800505a:	3344      	adds	r3, #68	; 0x44
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	441a      	add	r2, r3
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	202c      	movs	r0, #44	; 0x2c
 8005068:	fb00 f303 	mul.w	r3, r0, r3
 800506c:	440b      	add	r3, r1
 800506e:	3344      	adds	r3, #68	; 0x44
 8005070:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	212c      	movs	r1, #44	; 0x2c
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	3350      	adds	r3, #80	; 0x50
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	441a      	add	r2, r3
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	202c      	movs	r0, #44	; 0x2c
 800508c:	fb00 f303 	mul.w	r3, r0, r3
 8005090:	440b      	add	r3, r1
 8005092:	3350      	adds	r3, #80	; 0x50
 8005094:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	0cdb      	lsrs	r3, r3, #19
 80050a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050aa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3340      	adds	r3, #64	; 0x40
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d13c      	bne.n	800513e <HCD_RXQLVL_IRQHandler+0x19a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d039      	beq.n	800513e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050e0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050e8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f6:	461a      	mov	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	212c      	movs	r1, #44	; 0x2c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	3354      	adds	r3, #84	; 0x54
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	f083 0301 	eor.w	r3, r3, #1
 8005110:	b2d8      	uxtb	r0, r3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	212c      	movs	r1, #44	; 0x2c
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	4413      	add	r3, r2
 800511e:	3354      	adds	r3, #84	; 0x54
 8005120:	4602      	mov	r2, r0
 8005122:	701a      	strb	r2, [r3, #0]
      break;
 8005124:	e00b      	b.n	800513e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	212c      	movs	r1, #44	; 0x2c
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	4413      	add	r3, r2
 8005132:	3360      	adds	r3, #96	; 0x60
 8005134:	2204      	movs	r2, #4
 8005136:	701a      	strb	r2, [r3, #0]
      break;
 8005138:	e001      	b.n	800513e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800513a:	bf00      	nop
 800513c:	e000      	b.n	8005140 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800513e:	bf00      	nop
  }
}
 8005140:	bf00      	nop
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005174:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	d10b      	bne.n	8005198 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b01      	cmp	r3, #1
 8005188:	d102      	bne.n	8005190 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f004 faea 	bl	8009764 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f043 0302 	orr.w	r3, r3, #2
 8005196:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d132      	bne.n	8005208 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f043 0308 	orr.w	r3, r3, #8
 80051a8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d126      	bne.n	8005202 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d113      	bne.n	80051e4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80051c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051c6:	d106      	bne.n	80051d6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2102      	movs	r1, #2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f002 fcca 	bl	8007b68 <USB_InitFSLSPClkSel>
 80051d4:	e011      	b.n	80051fa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2101      	movs	r1, #1
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 fcc3 	bl	8007b68 <USB_InitFSLSPClkSel>
 80051e2:	e00a      	b.n	80051fa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d106      	bne.n	80051fa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f2:	461a      	mov	r2, r3
 80051f4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80051f8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f004 fadc 	bl	80097b8 <HAL_HCD_PortEnabled_Callback>
 8005200:	e002      	b.n	8005208 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f004 fae6 	bl	80097d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b20      	cmp	r3, #32
 8005210:	d103      	bne.n	800521a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f043 0320 	orr.w	r3, r3, #32
 8005218:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005220:	461a      	mov	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6013      	str	r3, [r2, #0]
}
 8005226:	bf00      	nop
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e12b      	b.n	800549a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fd f892 	bl	8002380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2224      	movs	r2, #36	; 0x24
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005294:	f001 f864 	bl	8006360 <HAL_RCC_GetPCLK1Freq>
 8005298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4a81      	ldr	r2, [pc, #516]	; (80054a4 <HAL_I2C_Init+0x274>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d807      	bhi.n	80052b4 <HAL_I2C_Init+0x84>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a80      	ldr	r2, [pc, #512]	; (80054a8 <HAL_I2C_Init+0x278>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	bf94      	ite	ls
 80052ac:	2301      	movls	r3, #1
 80052ae:	2300      	movhi	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e006      	b.n	80052c2 <HAL_I2C_Init+0x92>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a7d      	ldr	r2, [pc, #500]	; (80054ac <HAL_I2C_Init+0x27c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	bf94      	ite	ls
 80052bc:	2301      	movls	r3, #1
 80052be:	2300      	movhi	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e0e7      	b.n	800549a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4a78      	ldr	r2, [pc, #480]	; (80054b0 <HAL_I2C_Init+0x280>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0c9b      	lsrs	r3, r3, #18
 80052d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4a6a      	ldr	r2, [pc, #424]	; (80054a4 <HAL_I2C_Init+0x274>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d802      	bhi.n	8005304 <HAL_I2C_Init+0xd4>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3301      	adds	r3, #1
 8005302:	e009      	b.n	8005318 <HAL_I2C_Init+0xe8>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	4a69      	ldr	r2, [pc, #420]	; (80054b4 <HAL_I2C_Init+0x284>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	099b      	lsrs	r3, r3, #6
 8005316:	3301      	adds	r3, #1
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	430b      	orrs	r3, r1
 800531e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800532a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	495c      	ldr	r1, [pc, #368]	; (80054a4 <HAL_I2C_Init+0x274>)
 8005334:	428b      	cmp	r3, r1
 8005336:	d819      	bhi.n	800536c <HAL_I2C_Init+0x13c>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	1e59      	subs	r1, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	fbb1 f3f3 	udiv	r3, r1, r3
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800534c:	400b      	ands	r3, r1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_I2C_Init+0x138>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1e59      	subs	r1, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005360:	3301      	adds	r3, #1
 8005362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005366:	e051      	b.n	800540c <HAL_I2C_Init+0x1dc>
 8005368:	2304      	movs	r3, #4
 800536a:	e04f      	b.n	800540c <HAL_I2C_Init+0x1dc>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d111      	bne.n	8005398 <HAL_I2C_Init+0x168>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1e58      	subs	r0, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	440b      	add	r3, r1
 8005382:	fbb0 f3f3 	udiv	r3, r0, r3
 8005386:	3301      	adds	r3, #1
 8005388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf0c      	ite	eq
 8005390:	2301      	moveq	r3, #1
 8005392:	2300      	movne	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	e012      	b.n	80053be <HAL_I2C_Init+0x18e>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	1e58      	subs	r0, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6859      	ldr	r1, [r3, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	0099      	lsls	r1, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ae:	3301      	adds	r3, #1
 80053b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_I2C_Init+0x196>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e022      	b.n	800540c <HAL_I2C_Init+0x1dc>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <HAL_I2C_Init+0x1bc>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1e58      	subs	r0, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6859      	ldr	r1, [r3, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	440b      	add	r3, r1
 80053dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e0:	3301      	adds	r3, #1
 80053e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	e00f      	b.n	800540c <HAL_I2C_Init+0x1dc>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1e58      	subs	r0, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	0099      	lsls	r1, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005402:	3301      	adds	r3, #1
 8005404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	6809      	ldr	r1, [r1, #0]
 8005410:	4313      	orrs	r3, r2
 8005412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800543a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6911      	ldr	r1, [r2, #16]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68d2      	ldr	r2, [r2, #12]
 8005446:	4311      	orrs	r1, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	430b      	orrs	r3, r1
 800544e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	000186a0 	.word	0x000186a0
 80054a8:	001e847f 	.word	0x001e847f
 80054ac:	003d08ff 	.word	0x003d08ff
 80054b0:	431bde83 	.word	0x431bde83
 80054b4:	10624dd3 	.word	0x10624dd3

080054b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	461a      	mov	r2, r3
 80054c4:	460b      	mov	r3, r1
 80054c6:	817b      	strh	r3, [r7, #10]
 80054c8:	4613      	mov	r3, r2
 80054ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054cc:	f7fd fa4e 	bl	800296c <HAL_GetTick>
 80054d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b20      	cmp	r3, #32
 80054dc:	f040 80e0 	bne.w	80056a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	2319      	movs	r3, #25
 80054e6:	2201      	movs	r2, #1
 80054e8:	4970      	ldr	r1, [pc, #448]	; (80056ac <HAL_I2C_Master_Transmit+0x1f4>)
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f964 	bl	80057b8 <I2C_WaitOnFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0d3      	b.n	80056a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_I2C_Master_Transmit+0x50>
 8005504:	2302      	movs	r3, #2
 8005506:	e0cc      	b.n	80056a2 <HAL_I2C_Master_Transmit+0x1ea>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d007      	beq.n	800552e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800553c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2221      	movs	r2, #33	; 0x21
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2210      	movs	r2, #16
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	893a      	ldrh	r2, [r7, #8]
 800555e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a50      	ldr	r2, [pc, #320]	; (80056b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800556e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005570:	8979      	ldrh	r1, [r7, #10]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6a3a      	ldr	r2, [r7, #32]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f89c 	bl	80056b4 <I2C_MasterRequestWrite>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e08d      	b.n	80056a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800559c:	e066      	b.n	800566c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	6a39      	ldr	r1, [r7, #32]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f9de 	bl	8005964 <I2C_WaitOnTXEFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d107      	bne.n	80055c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e06b      	b.n	80056a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	781a      	ldrb	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b04      	cmp	r3, #4
 8005606:	d11b      	bne.n	8005640 <HAL_I2C_Master_Transmit+0x188>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560c:	2b00      	cmp	r3, #0
 800560e:	d017      	beq.n	8005640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	6a39      	ldr	r1, [r7, #32]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f9ce 	bl	80059e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00d      	beq.n	800566c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	2b04      	cmp	r3, #4
 8005656:	d107      	bne.n	8005668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e01a      	b.n	80056a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	d194      	bne.n	800559e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	e000      	b.n	80056a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056a0:	2302      	movs	r3, #2
  }
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	00100002 	.word	0x00100002
 80056b0:	ffff0000 	.word	0xffff0000

080056b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	460b      	mov	r3, r1
 80056c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d006      	beq.n	80056de <I2C_MasterRequestWrite+0x2a>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d003      	beq.n	80056de <I2C_MasterRequestWrite+0x2a>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056dc:	d108      	bne.n	80056f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e00b      	b.n	8005708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	2b12      	cmp	r3, #18
 80056f6:	d107      	bne.n	8005708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f84f 	bl	80057b8 <I2C_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572e:	d103      	bne.n	8005738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e035      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005744:	d108      	bne.n	8005758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005746:	897b      	ldrh	r3, [r7, #10]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005754:	611a      	str	r2, [r3, #16]
 8005756:	e01b      	b.n	8005790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005758:	897b      	ldrh	r3, [r7, #10]
 800575a:	11db      	asrs	r3, r3, #7
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 0306 	and.w	r3, r3, #6
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f063 030f 	orn	r3, r3, #15
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	490e      	ldr	r1, [pc, #56]	; (80057b0 <I2C_MasterRequestWrite+0xfc>)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f875 	bl	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e010      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4907      	ldr	r1, [pc, #28]	; (80057b4 <I2C_MasterRequestWrite+0x100>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f865 	bl	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	00010008 	.word	0x00010008
 80057b4:	00010002 	.word	0x00010002

080057b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	4613      	mov	r3, r2
 80057c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057c8:	e025      	b.n	8005816 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d021      	beq.n	8005816 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7fd f8cb 	bl	800296c <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d116      	bne.n	8005816 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f043 0220 	orr.w	r2, r3, #32
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e023      	b.n	800585e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10d      	bne.n	800583c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	43da      	mvns	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4013      	ands	r3, r2
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	bf0c      	ite	eq
 8005832:	2301      	moveq	r3, #1
 8005834:	2300      	movne	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	e00c      	b.n	8005856 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	43da      	mvns	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4013      	ands	r3, r2
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf0c      	ite	eq
 800584e:	2301      	moveq	r3, #1
 8005850:	2300      	movne	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	429a      	cmp	r2, r3
 800585a:	d0b6      	beq.n	80057ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005874:	e051      	b.n	800591a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005884:	d123      	bne.n	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005894:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800589e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0204 	orr.w	r2, r3, #4
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e046      	b.n	800595c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d021      	beq.n	800591a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d6:	f7fd f849 	bl	800296c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d116      	bne.n	800591a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e020      	b.n	800595c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d10c      	bne.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	43da      	mvns	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4013      	ands	r3, r2
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	bf14      	ite	ne
 8005936:	2301      	movne	r3, #1
 8005938:	2300      	moveq	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	e00b      	b.n	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	43da      	mvns	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d18d      	bne.n	8005876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005970:	e02d      	b.n	80059ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f878 	bl	8005a68 <I2C_IsAcknowledgeFailed>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e02d      	b.n	80059de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d021      	beq.n	80059ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598a:	f7fc ffef 	bl	800296c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	d302      	bcc.n	80059a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d116      	bne.n	80059ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e007      	b.n	80059de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d1ca      	bne.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059f2:	e02d      	b.n	8005a50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f837 	bl	8005a68 <I2C_IsAcknowledgeFailed>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e02d      	b.n	8005a60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d021      	beq.n	8005a50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0c:	f7fc ffae 	bl	800296c <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d302      	bcc.n	8005a22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d116      	bne.n	8005a50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e007      	b.n	8005a60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d1ca      	bne.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7e:	d11b      	bne.n	8005ab8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f043 0204 	orr.w	r2, r3, #4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e264      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d075      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ae6:	4ba3      	ldr	r3, [pc, #652]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d00c      	beq.n	8005b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005af2:	4ba0      	ldr	r3, [pc, #640]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d112      	bne.n	8005b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005afe:	4b9d      	ldr	r3, [pc, #628]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b0a:	d10b      	bne.n	8005b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b0c:	4b99      	ldr	r3, [pc, #612]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d05b      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x108>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d157      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e23f      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2c:	d106      	bne.n	8005b3c <HAL_RCC_OscConfig+0x74>
 8005b2e:	4b91      	ldr	r3, [pc, #580]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a90      	ldr	r2, [pc, #576]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e01d      	b.n	8005b78 <HAL_RCC_OscConfig+0xb0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b44:	d10c      	bne.n	8005b60 <HAL_RCC_OscConfig+0x98>
 8005b46:	4b8b      	ldr	r3, [pc, #556]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a8a      	ldr	r2, [pc, #552]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	4b88      	ldr	r3, [pc, #544]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a87      	ldr	r2, [pc, #540]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	e00b      	b.n	8005b78 <HAL_RCC_OscConfig+0xb0>
 8005b60:	4b84      	ldr	r3, [pc, #528]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a83      	ldr	r2, [pc, #524]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4b81      	ldr	r3, [pc, #516]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a80      	ldr	r2, [pc, #512]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d013      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fc fef4 	bl	800296c <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b88:	f7fc fef0 	bl	800296c <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b64      	cmp	r3, #100	; 0x64
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e204      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9a:	4b76      	ldr	r3, [pc, #472]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f0      	beq.n	8005b88 <HAL_RCC_OscConfig+0xc0>
 8005ba6:	e014      	b.n	8005bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba8:	f7fc fee0 	bl	800296c <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bb0:	f7fc fedc 	bl	800296c <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b64      	cmp	r3, #100	; 0x64
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e1f0      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc2:	4b6c      	ldr	r3, [pc, #432]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0xe8>
 8005bce:	e000      	b.n	8005bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d063      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bde:	4b65      	ldr	r3, [pc, #404]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 030c 	and.w	r3, r3, #12
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bea:	4b62      	ldr	r3, [pc, #392]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d11c      	bne.n	8005c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bf6:	4b5f      	ldr	r3, [pc, #380]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d116      	bne.n	8005c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c02:	4b5c      	ldr	r3, [pc, #368]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_RCC_OscConfig+0x152>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d001      	beq.n	8005c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e1c4      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1a:	4b56      	ldr	r3, [pc, #344]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4952      	ldr	r1, [pc, #328]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c2e:	e03a      	b.n	8005ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d020      	beq.n	8005c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c38:	4b4f      	ldr	r3, [pc, #316]	; (8005d78 <HAL_RCC_OscConfig+0x2b0>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3e:	f7fc fe95 	bl	800296c <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c46:	f7fc fe91 	bl	800296c <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e1a5      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c58:	4b46      	ldr	r3, [pc, #280]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c64:	4b43      	ldr	r3, [pc, #268]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4940      	ldr	r1, [pc, #256]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	600b      	str	r3, [r1, #0]
 8005c78:	e015      	b.n	8005ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c7a:	4b3f      	ldr	r3, [pc, #252]	; (8005d78 <HAL_RCC_OscConfig+0x2b0>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fc fe74 	bl	800296c <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c88:	f7fc fe70 	bl	800296c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e184      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c9a:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d030      	beq.n	8005d14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d016      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cba:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <HAL_RCC_OscConfig+0x2b4>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc0:	f7fc fe54 	bl	800296c <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cc8:	f7fc fe50 	bl	800296c <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e164      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cda:	4b26      	ldr	r3, [pc, #152]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f0      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x200>
 8005ce6:	e015      	b.n	8005d14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce8:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <HAL_RCC_OscConfig+0x2b4>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cee:	f7fc fe3d 	bl	800296c <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf6:	f7fc fe39 	bl	800296c <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e14d      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d08:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f0      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80a0 	beq.w	8005e62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	4a0e      	ldr	r2, [pc, #56]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d40:	6413      	str	r3, [r2, #64]	; 0x40
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <HAL_RCC_OscConfig+0x2b8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d121      	bne.n	8005da2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <HAL_RCC_OscConfig+0x2b8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a07      	ldr	r2, [pc, #28]	; (8005d80 <HAL_RCC_OscConfig+0x2b8>)
 8005d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6a:	f7fc fdff 	bl	800296c <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d70:	e011      	b.n	8005d96 <HAL_RCC_OscConfig+0x2ce>
 8005d72:	bf00      	nop
 8005d74:	40023800 	.word	0x40023800
 8005d78:	42470000 	.word	0x42470000
 8005d7c:	42470e80 	.word	0x42470e80
 8005d80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d84:	f7fc fdf2 	bl	800296c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e106      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d96:	4b85      	ldr	r3, [pc, #532]	; (8005fac <HAL_RCC_OscConfig+0x4e4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0f0      	beq.n	8005d84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d106      	bne.n	8005db8 <HAL_RCC_OscConfig+0x2f0>
 8005daa:	4b81      	ldr	r3, [pc, #516]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	4a80      	ldr	r2, [pc, #512]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	6713      	str	r3, [r2, #112]	; 0x70
 8005db6:	e01c      	b.n	8005df2 <HAL_RCC_OscConfig+0x32a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	2b05      	cmp	r3, #5
 8005dbe:	d10c      	bne.n	8005dda <HAL_RCC_OscConfig+0x312>
 8005dc0:	4b7b      	ldr	r3, [pc, #492]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	4a7a      	ldr	r2, [pc, #488]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005dc6:	f043 0304 	orr.w	r3, r3, #4
 8005dca:	6713      	str	r3, [r2, #112]	; 0x70
 8005dcc:	4b78      	ldr	r3, [pc, #480]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd0:	4a77      	ldr	r2, [pc, #476]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd8:	e00b      	b.n	8005df2 <HAL_RCC_OscConfig+0x32a>
 8005dda:	4b75      	ldr	r3, [pc, #468]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	4a74      	ldr	r2, [pc, #464]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	6713      	str	r3, [r2, #112]	; 0x70
 8005de6:	4b72      	ldr	r3, [pc, #456]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	4a71      	ldr	r2, [pc, #452]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005dec:	f023 0304 	bic.w	r3, r3, #4
 8005df0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d015      	beq.n	8005e26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfa:	f7fc fdb7 	bl	800296c <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fc fdb3 	bl	800296c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e0c5      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	4b65      	ldr	r3, [pc, #404]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ee      	beq.n	8005e02 <HAL_RCC_OscConfig+0x33a>
 8005e24:	e014      	b.n	8005e50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e26:	f7fc fda1 	bl	800296c <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e2c:	e00a      	b.n	8005e44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2e:	f7fc fd9d 	bl	800296c <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e0af      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e44:	4b5a      	ldr	r3, [pc, #360]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1ee      	bne.n	8005e2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d105      	bne.n	8005e62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e56:	4b56      	ldr	r3, [pc, #344]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	4a55      	ldr	r2, [pc, #340]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 809b 	beq.w	8005fa2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e6c:	4b50      	ldr	r3, [pc, #320]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 030c 	and.w	r3, r3, #12
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d05c      	beq.n	8005f32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d141      	bne.n	8005f04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e80:	4b4c      	ldr	r3, [pc, #304]	; (8005fb4 <HAL_RCC_OscConfig+0x4ec>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e86:	f7fc fd71 	bl	800296c <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8e:	f7fc fd6d 	bl	800296c <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e081      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea0:	4b43      	ldr	r3, [pc, #268]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f0      	bne.n	8005e8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	019b      	lsls	r3, r3, #6
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	085b      	lsrs	r3, r3, #1
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	041b      	lsls	r3, r3, #16
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	061b      	lsls	r3, r3, #24
 8005ed0:	4937      	ldr	r1, [pc, #220]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed6:	4b37      	ldr	r3, [pc, #220]	; (8005fb4 <HAL_RCC_OscConfig+0x4ec>)
 8005ed8:	2201      	movs	r2, #1
 8005eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005edc:	f7fc fd46 	bl	800296c <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee4:	f7fc fd42 	bl	800296c <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e056      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef6:	4b2e      	ldr	r3, [pc, #184]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x41c>
 8005f02:	e04e      	b.n	8005fa2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f04:	4b2b      	ldr	r3, [pc, #172]	; (8005fb4 <HAL_RCC_OscConfig+0x4ec>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0a:	f7fc fd2f 	bl	800296c <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f12:	f7fc fd2b 	bl	800296c <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e03f      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f24:	4b22      	ldr	r3, [pc, #136]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f0      	bne.n	8005f12 <HAL_RCC_OscConfig+0x44a>
 8005f30:	e037      	b.n	8005fa2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e032      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f3e:	4b1c      	ldr	r3, [pc, #112]	; (8005fb0 <HAL_RCC_OscConfig+0x4e8>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d028      	beq.n	8005f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d121      	bne.n	8005f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d11a      	bne.n	8005f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f6e:	4013      	ands	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d111      	bne.n	8005f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	3b01      	subs	r3, #1
 8005f88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d107      	bne.n	8005f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d001      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40007000 	.word	0x40007000
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	42470060 	.word	0x42470060

08005fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0cc      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fcc:	4b68      	ldr	r3, [pc, #416]	; (8006170 <HAL_RCC_ClockConfig+0x1b8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d90c      	bls.n	8005ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fda:	4b65      	ldr	r3, [pc, #404]	; (8006170 <HAL_RCC_ClockConfig+0x1b8>)
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe2:	4b63      	ldr	r3, [pc, #396]	; (8006170 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d001      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0b8      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d020      	beq.n	8006042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800600c:	4b59      	ldr	r3, [pc, #356]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	4a58      	ldr	r2, [pc, #352]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006024:	4b53      	ldr	r3, [pc, #332]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	4a52      	ldr	r2, [pc, #328]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800602e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006030:	4b50      	ldr	r3, [pc, #320]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	494d      	ldr	r1, [pc, #308]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d044      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006056:	4b47      	ldr	r3, [pc, #284]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d119      	bne.n	8006096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e07f      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d003      	beq.n	8006076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006072:	2b03      	cmp	r3, #3
 8006074:	d107      	bne.n	8006086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006076:	4b3f      	ldr	r3, [pc, #252]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e06f      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006086:	4b3b      	ldr	r3, [pc, #236]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e067      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006096:	4b37      	ldr	r3, [pc, #220]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f023 0203 	bic.w	r2, r3, #3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	4934      	ldr	r1, [pc, #208]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060a8:	f7fc fc60 	bl	800296c <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ae:	e00a      	b.n	80060c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b0:	f7fc fc5c 	bl	800296c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e04f      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c6:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 020c 	and.w	r2, r3, #12
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d1eb      	bne.n	80060b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <HAL_RCC_ClockConfig+0x1b8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d20c      	bcs.n	8006100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e6:	4b22      	ldr	r3, [pc, #136]	; (8006170 <HAL_RCC_ClockConfig+0x1b8>)
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b20      	ldr	r3, [pc, #128]	; (8006170 <HAL_RCC_ClockConfig+0x1b8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e032      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800610c:	4b19      	ldr	r3, [pc, #100]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4916      	ldr	r1, [pc, #88]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612a:	4b12      	ldr	r3, [pc, #72]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	490e      	ldr	r1, [pc, #56]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800613e:	f000 f821 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8006142:	4602      	mov	r2, r0
 8006144:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	490a      	ldr	r1, [pc, #40]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 8006150:	5ccb      	ldrb	r3, [r1, r3]
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	4a09      	ldr	r2, [pc, #36]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800615a:	4b09      	ldr	r3, [pc, #36]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fc fbc0 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40023c00 	.word	0x40023c00
 8006174:	40023800 	.word	0x40023800
 8006178:	08009ec4 	.word	0x08009ec4
 800617c:	2000000c 	.word	0x2000000c
 8006180:	20000010 	.word	0x20000010

08006184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	607b      	str	r3, [r7, #4]
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	2300      	movs	r3, #0
 8006196:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800619c:	4b67      	ldr	r3, [pc, #412]	; (800633c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 030c 	and.w	r3, r3, #12
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d00d      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0x40>
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	f200 80bd 	bhi.w	8006328 <HAL_RCC_GetSysClockFreq+0x1a4>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0x34>
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d003      	beq.n	80061be <HAL_RCC_GetSysClockFreq+0x3a>
 80061b6:	e0b7      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061b8:	4b61      	ldr	r3, [pc, #388]	; (8006340 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061ba:	60bb      	str	r3, [r7, #8]
       break;
 80061bc:	e0b7      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061be:	4b61      	ldr	r3, [pc, #388]	; (8006344 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80061c0:	60bb      	str	r3, [r7, #8]
      break;
 80061c2:	e0b4      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c4:	4b5d      	ldr	r3, [pc, #372]	; (800633c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ce:	4b5b      	ldr	r3, [pc, #364]	; (800633c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d04d      	beq.n	8006276 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061da:	4b58      	ldr	r3, [pc, #352]	; (800633c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	099b      	lsrs	r3, r3, #6
 80061e0:	461a      	mov	r2, r3
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061ea:	f04f 0100 	mov.w	r1, #0
 80061ee:	ea02 0800 	and.w	r8, r2, r0
 80061f2:	ea03 0901 	and.w	r9, r3, r1
 80061f6:	4640      	mov	r0, r8
 80061f8:	4649      	mov	r1, r9
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	014b      	lsls	r3, r1, #5
 8006204:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006208:	0142      	lsls	r2, r0, #5
 800620a:	4610      	mov	r0, r2
 800620c:	4619      	mov	r1, r3
 800620e:	ebb0 0008 	subs.w	r0, r0, r8
 8006212:	eb61 0109 	sbc.w	r1, r1, r9
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	018b      	lsls	r3, r1, #6
 8006220:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006224:	0182      	lsls	r2, r0, #6
 8006226:	1a12      	subs	r2, r2, r0
 8006228:	eb63 0301 	sbc.w	r3, r3, r1
 800622c:	f04f 0000 	mov.w	r0, #0
 8006230:	f04f 0100 	mov.w	r1, #0
 8006234:	00d9      	lsls	r1, r3, #3
 8006236:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800623a:	00d0      	lsls	r0, r2, #3
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	eb12 0208 	adds.w	r2, r2, r8
 8006244:	eb43 0309 	adc.w	r3, r3, r9
 8006248:	f04f 0000 	mov.w	r0, #0
 800624c:	f04f 0100 	mov.w	r1, #0
 8006250:	0259      	lsls	r1, r3, #9
 8006252:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006256:	0250      	lsls	r0, r2, #9
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4610      	mov	r0, r2
 800625e:	4619      	mov	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	461a      	mov	r2, r3
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	f7fa fbec 	bl	8000a44 <__aeabi_uldivmod>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4613      	mov	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e04a      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006276:	4b31      	ldr	r3, [pc, #196]	; (800633c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	099b      	lsrs	r3, r3, #6
 800627c:	461a      	mov	r2, r3
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006286:	f04f 0100 	mov.w	r1, #0
 800628a:	ea02 0400 	and.w	r4, r2, r0
 800628e:	ea03 0501 	and.w	r5, r3, r1
 8006292:	4620      	mov	r0, r4
 8006294:	4629      	mov	r1, r5
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	f04f 0300 	mov.w	r3, #0
 800629e:	014b      	lsls	r3, r1, #5
 80062a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062a4:	0142      	lsls	r2, r0, #5
 80062a6:	4610      	mov	r0, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	1b00      	subs	r0, r0, r4
 80062ac:	eb61 0105 	sbc.w	r1, r1, r5
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	018b      	lsls	r3, r1, #6
 80062ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062be:	0182      	lsls	r2, r0, #6
 80062c0:	1a12      	subs	r2, r2, r0
 80062c2:	eb63 0301 	sbc.w	r3, r3, r1
 80062c6:	f04f 0000 	mov.w	r0, #0
 80062ca:	f04f 0100 	mov.w	r1, #0
 80062ce:	00d9      	lsls	r1, r3, #3
 80062d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062d4:	00d0      	lsls	r0, r2, #3
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	1912      	adds	r2, r2, r4
 80062dc:	eb45 0303 	adc.w	r3, r5, r3
 80062e0:	f04f 0000 	mov.w	r0, #0
 80062e4:	f04f 0100 	mov.w	r1, #0
 80062e8:	0299      	lsls	r1, r3, #10
 80062ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062ee:	0290      	lsls	r0, r2, #10
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4610      	mov	r0, r2
 80062f6:	4619      	mov	r1, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	f7fa fba0 	bl	8000a44 <__aeabi_uldivmod>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4613      	mov	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	0c1b      	lsrs	r3, r3, #16
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	3301      	adds	r3, #1
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	60bb      	str	r3, [r7, #8]
      break;
 8006326:	e002      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800632a:	60bb      	str	r3, [r7, #8]
      break;
 800632c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800632e:	68bb      	ldr	r3, [r7, #8]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800633a:	bf00      	nop
 800633c:	40023800 	.word	0x40023800
 8006340:	00f42400 	.word	0x00f42400
 8006344:	007a1200 	.word	0x007a1200

08006348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800634c:	4b03      	ldr	r3, [pc, #12]	; (800635c <HAL_RCC_GetHCLKFreq+0x14>)
 800634e:	681b      	ldr	r3, [r3, #0]
}
 8006350:	4618      	mov	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	2000000c 	.word	0x2000000c

08006360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006364:	f7ff fff0 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8006368:	4602      	mov	r2, r0
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	0a9b      	lsrs	r3, r3, #10
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	4903      	ldr	r1, [pc, #12]	; (8006384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006376:	5ccb      	ldrb	r3, [r1, r3]
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40023800 	.word	0x40023800
 8006384:	08009ed4 	.word	0x08009ed4

08006388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07b      	b.n	8006492 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063aa:	d009      	beq.n	80063c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	61da      	str	r2, [r3, #28]
 80063b2:	e005      	b.n	80063c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fc f818 	bl	8002410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006444:	ea42 0103 	orr.w	r1, r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	f003 0104 	and.w	r1, r3, #4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0210 	and.w	r2, r3, #16
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e041      	b.n	8006530 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fb ffed 	bl	80024a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f000 fd79 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d001      	beq.n	8006550 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e046      	b.n	80065de <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a23      	ldr	r2, [pc, #140]	; (80065ec <HAL_TIM_Base_Start+0xb4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d022      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656a:	d01d      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <HAL_TIM_Base_Start+0xb8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d018      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <HAL_TIM_Base_Start+0xbc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1c      	ldr	r2, [pc, #112]	; (80065f8 <HAL_TIM_Base_Start+0xc0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00e      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1b      	ldr	r2, [pc, #108]	; (80065fc <HAL_TIM_Base_Start+0xc4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a19      	ldr	r2, [pc, #100]	; (8006600 <HAL_TIM_Base_Start+0xc8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a18      	ldr	r2, [pc, #96]	; (8006604 <HAL_TIM_Base_Start+0xcc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d111      	bne.n	80065cc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b06      	cmp	r3, #6
 80065b8:	d010      	beq.n	80065dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0201 	orr.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ca:	e007      	b.n	80065dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40001800 	.word	0x40001800

08006608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	d001      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e04e      	b.n	80066be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a23      	ldr	r2, [pc, #140]	; (80066cc <HAL_TIM_Base_Start_IT+0xc4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664a:	d01d      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1e      	ldr	r2, [pc, #120]	; (80066d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1c      	ldr	r2, [pc, #112]	; (80066d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d111      	bne.n	80066ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b06      	cmp	r3, #6
 8006698:	d010      	beq.n	80066bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0201 	orr.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066aa:	e007      	b.n	80066bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40001800 	.word	0x40001800

080066e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6a1a      	ldr	r2, [r3, #32]
 8006706:	f241 1311 	movw	r3, #4369	; 0x1111
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10f      	bne.n	8006730 <HAL_TIM_Base_Stop_IT+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	f240 4344 	movw	r3, #1092	; 0x444
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <HAL_TIM_Base_Stop_IT+0x48>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0201 	bic.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e041      	b.n	80067dc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fb ff63 	bl	8002638 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f000 fc23 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_IC_Start_IT+0x1e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	e013      	b.n	800682a <HAL_TIM_IC_Start_IT+0x46>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d104      	bne.n	8006812 <HAL_TIM_IC_Start_IT+0x2e>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800680e:	b2db      	uxtb	r3, r3
 8006810:	e00b      	b.n	800682a <HAL_TIM_IC_Start_IT+0x46>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d104      	bne.n	8006822 <HAL_TIM_IC_Start_IT+0x3e>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800681e:	b2db      	uxtb	r3, r3
 8006820:	e003      	b.n	800682a <HAL_TIM_IC_Start_IT+0x46>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006828:	b2db      	uxtb	r3, r3
 800682a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <HAL_TIM_IC_Start_IT+0x58>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006838:	b2db      	uxtb	r3, r3
 800683a:	e013      	b.n	8006864 <HAL_TIM_IC_Start_IT+0x80>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b04      	cmp	r3, #4
 8006840:	d104      	bne.n	800684c <HAL_TIM_IC_Start_IT+0x68>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006848:	b2db      	uxtb	r3, r3
 800684a:	e00b      	b.n	8006864 <HAL_TIM_IC_Start_IT+0x80>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b08      	cmp	r3, #8
 8006850:	d104      	bne.n	800685c <HAL_TIM_IC_Start_IT+0x78>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006858:	b2db      	uxtb	r3, r3
 800685a:	e003      	b.n	8006864 <HAL_TIM_IC_Start_IT+0x80>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006862:	b2db      	uxtb	r3, r3
 8006864:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d102      	bne.n	8006872 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800686c:	7b7b      	ldrb	r3, [r7, #13]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d001      	beq.n	8006876 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e0cc      	b.n	8006a10 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <HAL_TIM_IC_Start_IT+0xa2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006884:	e013      	b.n	80068ae <HAL_TIM_IC_Start_IT+0xca>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b04      	cmp	r3, #4
 800688a:	d104      	bne.n	8006896 <HAL_TIM_IC_Start_IT+0xb2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006894:	e00b      	b.n	80068ae <HAL_TIM_IC_Start_IT+0xca>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_IC_Start_IT+0xc2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a4:	e003      	b.n	80068ae <HAL_TIM_IC_Start_IT+0xca>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <HAL_TIM_IC_Start_IT+0xda>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068bc:	e013      	b.n	80068e6 <HAL_TIM_IC_Start_IT+0x102>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d104      	bne.n	80068ce <HAL_TIM_IC_Start_IT+0xea>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068cc:	e00b      	b.n	80068e6 <HAL_TIM_IC_Start_IT+0x102>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d104      	bne.n	80068de <HAL_TIM_IC_Start_IT+0xfa>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068dc:	e003      	b.n	80068e6 <HAL_TIM_IC_Start_IT+0x102>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b0c      	cmp	r3, #12
 80068ea:	d841      	bhi.n	8006970 <HAL_TIM_IC_Start_IT+0x18c>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <HAL_TIM_IC_Start_IT+0x110>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006929 	.word	0x08006929
 80068f8:	08006971 	.word	0x08006971
 80068fc:	08006971 	.word	0x08006971
 8006900:	08006971 	.word	0x08006971
 8006904:	0800693b 	.word	0x0800693b
 8006908:	08006971 	.word	0x08006971
 800690c:	08006971 	.word	0x08006971
 8006910:	08006971 	.word	0x08006971
 8006914:	0800694d 	.word	0x0800694d
 8006918:	08006971 	.word	0x08006971
 800691c:	08006971 	.word	0x08006971
 8006920:	08006971 	.word	0x08006971
 8006924:	0800695f 	.word	0x0800695f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0202 	orr.w	r2, r2, #2
 8006936:	60da      	str	r2, [r3, #12]
      break;
 8006938:	e01d      	b.n	8006976 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0204 	orr.w	r2, r2, #4
 8006948:	60da      	str	r2, [r3, #12]
      break;
 800694a:	e014      	b.n	8006976 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0208 	orr.w	r2, r2, #8
 800695a:	60da      	str	r2, [r3, #12]
      break;
 800695c:	e00b      	b.n	8006976 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0210 	orr.w	r2, r2, #16
 800696c:	60da      	str	r2, [r3, #12]
      break;
 800696e:	e002      	b.n	8006976 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      break;
 8006974:	bf00      	nop
  }

  if (status == HAL_OK)
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d148      	bne.n	8006a0e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2201      	movs	r2, #1
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fd87 	bl	8007498 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a22      	ldr	r2, [pc, #136]	; (8006a18 <HAL_TIM_IC_Start_IT+0x234>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d022      	beq.n	80069da <HAL_TIM_IC_Start_IT+0x1f6>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699c:	d01d      	beq.n	80069da <HAL_TIM_IC_Start_IT+0x1f6>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <HAL_TIM_IC_Start_IT+0x238>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d018      	beq.n	80069da <HAL_TIM_IC_Start_IT+0x1f6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <HAL_TIM_IC_Start_IT+0x23c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <HAL_TIM_IC_Start_IT+0x1f6>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <HAL_TIM_IC_Start_IT+0x240>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00e      	beq.n	80069da <HAL_TIM_IC_Start_IT+0x1f6>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <HAL_TIM_IC_Start_IT+0x244>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_TIM_IC_Start_IT+0x1f6>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a18      	ldr	r2, [pc, #96]	; (8006a2c <HAL_TIM_IC_Start_IT+0x248>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_TIM_IC_Start_IT+0x1f6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <HAL_TIM_IC_Start_IT+0x24c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d111      	bne.n	80069fe <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b06      	cmp	r3, #6
 80069ea:	d010      	beq.n	8006a0e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fc:	e007      	b.n	8006a0e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0201 	orr.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40000400 	.word	0x40000400
 8006a20:	40000800 	.word	0x40000800
 8006a24:	40000c00 	.word	0x40000c00
 8006a28:	40010400 	.word	0x40010400
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40001800 	.word	0x40001800

08006a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d122      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d11b      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0202 	mvn.w	r2, #2
 8006a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fa fc06 	bl	8001288 <HAL_TIM_IC_CaptureCallback>
 8006a7c:	e005      	b.n	8006a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa88 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa8f 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d122      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d11b      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f06f 0204 	mvn.w	r2, #4
 8006ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fa fbdc 	bl	8001288 <HAL_TIM_IC_CaptureCallback>
 8006ad0:	e005      	b.n	8006ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa5e 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fa65 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d122      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d11b      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0208 	mvn.w	r2, #8
 8006b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fa fbb2 	bl	8001288 <HAL_TIM_IC_CaptureCallback>
 8006b24:	e005      	b.n	8006b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa34 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa3b 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0310 	and.w	r3, r3, #16
 8006b42:	2b10      	cmp	r3, #16
 8006b44:	d122      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0310 	and.w	r3, r3, #16
 8006b50:	2b10      	cmp	r3, #16
 8006b52:	d11b      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f06f 0210 	mvn.w	r2, #16
 8006b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2208      	movs	r2, #8
 8006b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fa fb88 	bl	8001288 <HAL_TIM_IC_CaptureCallback>
 8006b78:	e005      	b.n	8006b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa0a 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fa11 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d10e      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0201 	mvn.w	r2, #1
 8006bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fa fc08 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc2:	2b80      	cmp	r3, #128	; 0x80
 8006bc4:	d10e      	bne.n	8006be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d107      	bne.n	8006be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fd06 	bl	80075f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d10e      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d107      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9d6 	bl	8006fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d10e      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d107      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0220 	mvn.w	r2, #32
 8006c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fcd0 	bl	80075dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e088      	b.n	8006d74 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d11b      	bne.n	8006ca8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6819      	ldr	r1, [r3, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f000 fa46 	bl	8007110 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 020c 	bic.w	r2, r2, #12
 8006c92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6999      	ldr	r1, [r3, #24]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	619a      	str	r2, [r3, #24]
 8006ca6:	e060      	b.n	8006d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d11c      	bne.n	8006ce8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6819      	ldr	r1, [r3, #0]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f000 faca 	bl	8007256 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699a      	ldr	r2, [r3, #24]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6999      	ldr	r1, [r3, #24]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	021a      	lsls	r2, r3, #8
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	619a      	str	r2, [r3, #24]
 8006ce6:	e040      	b.n	8006d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b08      	cmp	r3, #8
 8006cec:	d11b      	bne.n	8006d26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6819      	ldr	r1, [r3, #0]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f000 fb17 	bl	8007330 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 020c 	bic.w	r2, r2, #12
 8006d10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69d9      	ldr	r1, [r3, #28]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	61da      	str	r2, [r3, #28]
 8006d24:	e021      	b.n	8006d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	d11c      	bne.n	8006d66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6819      	ldr	r1, [r3, #0]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f000 fb34 	bl	80073a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69da      	ldr	r2, [r3, #28]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69d9      	ldr	r1, [r3, #28]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	61da      	str	r2, [r3, #28]
 8006d64:	e001      	b.n	8006d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIM_ConfigClockSource+0x1c>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e0b4      	b.n	8006f02 <HAL_TIM_ConfigClockSource+0x186>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd0:	d03e      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0xd4>
 8006dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd6:	f200 8087 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dde:	f000 8086 	beq.w	8006eee <HAL_TIM_ConfigClockSource+0x172>
 8006de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de6:	d87f      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006de8:	2b70      	cmp	r3, #112	; 0x70
 8006dea:	d01a      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0xa6>
 8006dec:	2b70      	cmp	r3, #112	; 0x70
 8006dee:	d87b      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006df0:	2b60      	cmp	r3, #96	; 0x60
 8006df2:	d050      	beq.n	8006e96 <HAL_TIM_ConfigClockSource+0x11a>
 8006df4:	2b60      	cmp	r3, #96	; 0x60
 8006df6:	d877      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006df8:	2b50      	cmp	r3, #80	; 0x50
 8006dfa:	d03c      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0xfa>
 8006dfc:	2b50      	cmp	r3, #80	; 0x50
 8006dfe:	d873      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d058      	beq.n	8006eb6 <HAL_TIM_ConfigClockSource+0x13a>
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d86f      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e08:	2b30      	cmp	r3, #48	; 0x30
 8006e0a:	d064      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e0c:	2b30      	cmp	r3, #48	; 0x30
 8006e0e:	d86b      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d060      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d867      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d05c      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d05a      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e20:	e062      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6899      	ldr	r1, [r3, #8]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f000 fb11 	bl	8007458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	609a      	str	r2, [r3, #8]
      break;
 8006e4e:	e04f      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	6899      	ldr	r1, [r3, #8]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f000 fafa 	bl	8007458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e72:	609a      	str	r2, [r3, #8]
      break;
 8006e74:	e03c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6859      	ldr	r1, [r3, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f000 f9b8 	bl	80071f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2150      	movs	r1, #80	; 0x50
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fac7 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8006e94:	e02c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6859      	ldr	r1, [r3, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f000 fa14 	bl	80072d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2160      	movs	r1, #96	; 0x60
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fab7 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8006eb4:	e01c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6859      	ldr	r1, [r3, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f000 f998 	bl	80071f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2140      	movs	r1, #64	; 0x40
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 faa7 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8006ed4:	e00c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f000 fa9e 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8006ee6:	e003      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e000      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b0c      	cmp	r3, #12
 8006f1e:	d831      	bhi.n	8006f84 <HAL_TIM_ReadCapturedValue+0x78>
 8006f20:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f5d 	.word	0x08006f5d
 8006f2c:	08006f85 	.word	0x08006f85
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f67 	.word	0x08006f67
 8006f3c:	08006f85 	.word	0x08006f85
 8006f40:	08006f85 	.word	0x08006f85
 8006f44:	08006f85 	.word	0x08006f85
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006f85 	.word	0x08006f85
 8006f54:	08006f85 	.word	0x08006f85
 8006f58:	08006f7b 	.word	0x08006f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f62:	60fb      	str	r3, [r7, #12]

      break;
 8006f64:	e00f      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	60fb      	str	r3, [r7, #12]

      break;
 8006f6e:	e00a      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f76:	60fb      	str	r3, [r7, #12]

      break;
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	60fb      	str	r3, [r7, #12]

      break;
 8006f82:	e000      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f84:	bf00      	nop
  }

  return tmpreg;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a40      	ldr	r2, [pc, #256]	; (80070e4 <TIM_Base_SetConfig+0x114>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d013      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fee:	d00f      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a3d      	ldr	r2, [pc, #244]	; (80070e8 <TIM_Base_SetConfig+0x118>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a3c      	ldr	r2, [pc, #240]	; (80070ec <TIM_Base_SetConfig+0x11c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a3b      	ldr	r2, [pc, #236]	; (80070f0 <TIM_Base_SetConfig+0x120>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a3a      	ldr	r2, [pc, #232]	; (80070f4 <TIM_Base_SetConfig+0x124>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d108      	bne.n	8007022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2f      	ldr	r2, [pc, #188]	; (80070e4 <TIM_Base_SetConfig+0x114>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d02b      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007030:	d027      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2c      	ldr	r2, [pc, #176]	; (80070e8 <TIM_Base_SetConfig+0x118>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d023      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a2b      	ldr	r2, [pc, #172]	; (80070ec <TIM_Base_SetConfig+0x11c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01f      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2a      	ldr	r2, [pc, #168]	; (80070f0 <TIM_Base_SetConfig+0x120>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d01b      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a29      	ldr	r2, [pc, #164]	; (80070f4 <TIM_Base_SetConfig+0x124>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d017      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a28      	ldr	r2, [pc, #160]	; (80070f8 <TIM_Base_SetConfig+0x128>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d013      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a27      	ldr	r2, [pc, #156]	; (80070fc <TIM_Base_SetConfig+0x12c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00f      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a26      	ldr	r2, [pc, #152]	; (8007100 <TIM_Base_SetConfig+0x130>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00b      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a25      	ldr	r2, [pc, #148]	; (8007104 <TIM_Base_SetConfig+0x134>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a24      	ldr	r2, [pc, #144]	; (8007108 <TIM_Base_SetConfig+0x138>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a23      	ldr	r2, [pc, #140]	; (800710c <TIM_Base_SetConfig+0x13c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d108      	bne.n	8007094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <TIM_Base_SetConfig+0x114>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d003      	beq.n	80070c8 <TIM_Base_SetConfig+0xf8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a0c      	ldr	r2, [pc, #48]	; (80070f4 <TIM_Base_SetConfig+0x124>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d103      	bne.n	80070d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	615a      	str	r2, [r3, #20]
}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40000c00 	.word	0x40000c00
 80070f4:	40010400 	.word	0x40010400
 80070f8:	40014000 	.word	0x40014000
 80070fc:	40014400 	.word	0x40014400
 8007100:	40014800 	.word	0x40014800
 8007104:	40001800 	.word	0x40001800
 8007108:	40001c00 	.word	0x40001c00
 800710c:	40002000 	.word	0x40002000

08007110 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f023 0201 	bic.w	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4a28      	ldr	r2, [pc, #160]	; (80071dc <TIM_TI1_SetConfig+0xcc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01b      	beq.n	8007176 <TIM_TI1_SetConfig+0x66>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007144:	d017      	beq.n	8007176 <TIM_TI1_SetConfig+0x66>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a25      	ldr	r2, [pc, #148]	; (80071e0 <TIM_TI1_SetConfig+0xd0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <TIM_TI1_SetConfig+0x66>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4a24      	ldr	r2, [pc, #144]	; (80071e4 <TIM_TI1_SetConfig+0xd4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00f      	beq.n	8007176 <TIM_TI1_SetConfig+0x66>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a23      	ldr	r2, [pc, #140]	; (80071e8 <TIM_TI1_SetConfig+0xd8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00b      	beq.n	8007176 <TIM_TI1_SetConfig+0x66>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4a22      	ldr	r2, [pc, #136]	; (80071ec <TIM_TI1_SetConfig+0xdc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d007      	beq.n	8007176 <TIM_TI1_SetConfig+0x66>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4a21      	ldr	r2, [pc, #132]	; (80071f0 <TIM_TI1_SetConfig+0xe0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_TI1_SetConfig+0x66>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4a20      	ldr	r2, [pc, #128]	; (80071f4 <TIM_TI1_SetConfig+0xe4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d101      	bne.n	800717a <TIM_TI1_SetConfig+0x6a>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <TIM_TI1_SetConfig+0x6c>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	e003      	b.n	800719a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f043 0301 	orr.w	r3, r3, #1
 8007198:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f023 030a 	bic.w	r3, r3, #10
 80071b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f003 030a 	and.w	r3, r3, #10
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	621a      	str	r2, [r3, #32]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40000400 	.word	0x40000400
 80071e4:	40000800 	.word	0x40000800
 80071e8:	40000c00 	.word	0x40000c00
 80071ec:	40010400 	.word	0x40010400
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40001800 	.word	0x40001800

080071f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f023 0201 	bic.w	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f023 030a 	bic.w	r3, r3, #10
 8007234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007256:	b480      	push	{r7}
 8007258:	b087      	sub	sp, #28
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f023 0210 	bic.w	r2, r3, #16
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007282:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	031b      	lsls	r3, r3, #12
 800729a:	b29b      	uxth	r3, r3
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	621a      	str	r2, [r3, #32]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	f023 0210 	bic.w	r2, r3, #16
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	031b      	lsls	r3, r3, #12
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800730c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	621a      	str	r2, [r3, #32]
}
 8007324:	bf00      	nop
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800736c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	b2db      	uxtb	r3, r3
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007380:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	621a      	str	r2, [r3, #32]
}
 800739c:	bf00      	nop
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	031b      	lsls	r3, r3, #12
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80073fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	031b      	lsls	r3, r3, #12
 8007400:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	f043 0307 	orr.w	r3, r3, #7
 8007444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	609a      	str	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	021a      	lsls	r2, r3, #8
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	431a      	orrs	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4313      	orrs	r3, r2
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	609a      	str	r2, [r3, #8]
}
 800748c:	bf00      	nop
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	2201      	movs	r2, #1
 80074ac:	fa02 f303 	lsl.w	r3, r2, r3
 80074b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1a      	ldr	r2, [r3, #32]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	401a      	ands	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a1a      	ldr	r2, [r3, #32]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 031f 	and.w	r3, r3, #31
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	fa01 f303 	lsl.w	r3, r1, r3
 80074d0:	431a      	orrs	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e05a      	b.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a21      	ldr	r2, [pc, #132]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d01d      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1d      	ldr	r2, [pc, #116]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1a      	ldr	r2, [pc, #104]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a18      	ldr	r2, [pc, #96]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a17      	ldr	r2, [pc, #92]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d10c      	bne.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	4313      	orrs	r3, r2
 8007596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40010000 	.word	0x40010000
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40000c00 	.word	0x40000c00
 80075d0:	40010400 	.word	0x40010400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40001800 	.word	0x40001800

080075dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007604:	b084      	sub	sp, #16
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	f107 001c 	add.w	r0, r7, #28
 8007612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	2b01      	cmp	r3, #1
 800761a:	d122      	bne.n	8007662 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d105      	bne.n	8007656 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f9a0 	bl	800799c <USB_CoreReset>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
 8007660:	e01a      	b.n	8007698 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f994 	bl	800799c <USB_CoreReset>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
 800768a:	e005      	b.n	8007698 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	2b01      	cmp	r3, #1
 800769c:	d10b      	bne.n	80076b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f043 0206 	orr.w	r2, r3, #6
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f043 0220 	orr.w	r2, r3, #32
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076c2:	b004      	add	sp, #16
 80076c4:	4770      	bx	lr

080076c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f043 0201 	orr.w	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f023 0201 	bic.w	r2, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d115      	bne.n	8007758 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007738:	2001      	movs	r0, #1
 800773a:	f7fb f923 	bl	8002984 <HAL_Delay>
      ms++;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f91a 	bl	800797e <USB_GetMode>
 800774a:	4603      	mov	r3, r0
 800774c:	2b01      	cmp	r3, #1
 800774e:	d01e      	beq.n	800778e <USB_SetCurrentMode+0x84>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b31      	cmp	r3, #49	; 0x31
 8007754:	d9f0      	bls.n	8007738 <USB_SetCurrentMode+0x2e>
 8007756:	e01a      	b.n	800778e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d115      	bne.n	800778a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800776a:	2001      	movs	r0, #1
 800776c:	f7fb f90a 	bl	8002984 <HAL_Delay>
      ms++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f901 	bl	800797e <USB_GetMode>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <USB_SetCurrentMode+0x84>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b31      	cmp	r3, #49	; 0x31
 8007786:	d9f0      	bls.n	800776a <USB_SetCurrentMode+0x60>
 8007788:	e001      	b.n	800778e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e005      	b.n	800779a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b32      	cmp	r3, #50	; 0x32
 8007792:	d101      	bne.n	8007798 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	019b      	lsls	r3, r3, #6
 80077b6:	f043 0220 	orr.w	r2, r3, #32
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	4a08      	ldr	r2, [pc, #32]	; (80077e8 <USB_FlushTxFifo+0x44>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d901      	bls.n	80077ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e006      	b.n	80077dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d0f1      	beq.n	80077be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	00030d40 	.word	0x00030d40

080077ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2210      	movs	r2, #16
 80077fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3301      	adds	r3, #1
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	4a08      	ldr	r2, [pc, #32]	; (8007828 <USB_FlushRxFifo+0x3c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d901      	bls.n	800780e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e006      	b.n	800781c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b10      	cmp	r3, #16
 8007818:	d0f1      	beq.n	80077fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	00030d40 	.word	0x00030d40

0800782c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800782c:	b480      	push	{r7}
 800782e:	b089      	sub	sp, #36	; 0x24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4611      	mov	r1, r2
 8007838:	461a      	mov	r2, r3
 800783a:	460b      	mov	r3, r1
 800783c:	71fb      	strb	r3, [r7, #7]
 800783e:	4613      	mov	r3, r2
 8007840:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800784a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d123      	bne.n	800789a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007852:	88bb      	ldrh	r3, [r7, #4]
 8007854:	3303      	adds	r3, #3
 8007856:	089b      	lsrs	r3, r3, #2
 8007858:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e018      	b.n	8007892 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	031a      	lsls	r2, r3, #12
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786c:	461a      	mov	r2, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	3301      	adds	r3, #1
 8007878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	3301      	adds	r3, #1
 800787e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	3301      	adds	r3, #1
 8007884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	3301      	adds	r3, #1
 800788a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	3301      	adds	r3, #1
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	429a      	cmp	r2, r3
 8007898:	d3e2      	bcc.n	8007860 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3724      	adds	r7, #36	; 0x24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b08b      	sub	sp, #44	; 0x2c
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	089b      	lsrs	r3, r3, #2
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078c6:	88fb      	ldrh	r3, [r7, #6]
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	623b      	str	r3, [r7, #32]
 80078d2:	e014      	b.n	80078fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	601a      	str	r2, [r3, #0]
    pDest++;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	3301      	adds	r3, #1
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	3301      	adds	r3, #1
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	3301      	adds	r3, #1
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	3301      	adds	r3, #1
 80078fc:	623b      	str	r3, [r7, #32]
 80078fe:	6a3a      	ldr	r2, [r7, #32]
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	429a      	cmp	r2, r3
 8007904:	d3e6      	bcc.n	80078d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007906:	8bfb      	ldrh	r3, [r7, #30]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01e      	beq.n	800794a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007916:	461a      	mov	r2, r3
 8007918:	f107 0310 	add.w	r3, r7, #16
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	b2da      	uxtb	r2, r3
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	701a      	strb	r2, [r3, #0]
      i++;
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	3301      	adds	r3, #1
 8007936:	623b      	str	r3, [r7, #32]
      pDest++;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	3301      	adds	r3, #1
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800793e:	8bfb      	ldrh	r3, [r7, #30]
 8007940:	3b01      	subs	r3, #1
 8007942:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007944:	8bfb      	ldrh	r3, [r7, #30]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1ea      	bne.n	8007920 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800794c:	4618      	mov	r0, r3
 800794e:	372c      	adds	r7, #44	; 0x2c
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4013      	ands	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007970:	68fb      	ldr	r3, [r7, #12]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f003 0301 	and.w	r3, r3, #1
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	4a13      	ldr	r2, [pc, #76]	; (80079fc <USB_CoreReset+0x60>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d901      	bls.n	80079b8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e01a      	b.n	80079ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	daf3      	bge.n	80079a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f043 0201 	orr.w	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	4a09      	ldr	r2, [pc, #36]	; (80079fc <USB_CoreReset+0x60>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d901      	bls.n	80079e0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e006      	b.n	80079ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d0f1      	beq.n	80079d0 <USB_CoreReset+0x34>

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	00030d40 	.word	0x00030d40

08007a00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a00:	b084      	sub	sp, #16
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	f107 001c 	add.w	r0, r7, #28
 8007a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d018      	beq.n	8007a84 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d10a      	bne.n	8007a6e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a66:	f043 0304 	orr.w	r3, r3, #4
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	e014      	b.n	8007a98 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a7c:	f023 0304 	bic.w	r3, r3, #4
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e009      	b.n	8007a98 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a92:	f023 0304 	bic.w	r3, r3, #4
 8007a96:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007a98:	2110      	movs	r1, #16
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff fe82 	bl	80077a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff fea3 	bl	80077ec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	e015      	b.n	8007ad8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f04f 33ff 	mov.w	r3, #4294967295
 8007abe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007acc:	461a      	mov	r2, r3
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d3e5      	bcc.n	8007aac <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <USB_HostInit+0x154>)
 8007b06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a13      	ldr	r2, [pc, #76]	; (8007b58 <USB_HostInit+0x158>)
 8007b0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007b10:	e009      	b.n	8007b26 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2280      	movs	r2, #128	; 0x80
 8007b16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a10      	ldr	r2, [pc, #64]	; (8007b5c <USB_HostInit+0x15c>)
 8007b1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <USB_HostInit+0x160>)
 8007b22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d105      	bne.n	8007b38 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	f043 0210 	orr.w	r2, r3, #16
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <USB_HostInit+0x164>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b50:	b004      	add	sp, #16
 8007b52:	4770      	bx	lr
 8007b54:	01000200 	.word	0x01000200
 8007b58:	00e00300 	.word	0x00e00300
 8007b5c:	00600080 	.word	0x00600080
 8007b60:	004000e0 	.word	0x004000e0
 8007b64:	a3200008 	.word	0xa3200008

08007b68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d107      	bne.n	8007bba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007bb6:	6053      	str	r3, [r2, #4]
 8007bb8:	e009      	b.n	8007bce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d106      	bne.n	8007bce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8007bcc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <USB_DriveVbus+0x44>
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d106      	bne.n	8007c20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2a:	d109      	bne.n	8007c40 <USB_DriveVbus+0x64>
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	0c5b      	lsrs	r3, r3, #17
 8007c6c:	f003 0303 	and.w	r3, r3, #3
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	b29b      	uxth	r3, r3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
	...

08007ca0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	461a      	mov	r2, r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	70fb      	strb	r3, [r7, #3]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70bb      	strb	r3, [r7, #2]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007cd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d87e      	bhi.n	8007ddc <USB_HC_Init+0x13c>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USB_HC_Init+0x44>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007cf5 	.word	0x08007cf5
 8007ce8:	08007d9f 	.word	0x08007d9f
 8007cec:	08007cf5 	.word	0x08007cf5
 8007cf0:	08007d61 	.word	0x08007d61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d00:	461a      	mov	r2, r3
 8007d02:	f240 439d 	movw	r3, #1181	; 0x49d
 8007d06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007d08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	da10      	bge.n	8007d32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	78fa      	ldrb	r2, [r7, #3]
 8007d20:	0151      	lsls	r1, r2, #5
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	440a      	add	r2, r1
 8007d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007d30:	e057      	b.n	8007de2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d051      	beq.n	8007de2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	78fa      	ldrb	r2, [r7, #3]
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d5c:	60d3      	str	r3, [r2, #12]
      break;
 8007d5e:	e040      	b.n	8007de2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007d72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007d74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	da34      	bge.n	8007de6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	78fa      	ldrb	r2, [r7, #3]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007d9c:	e023      	b.n	8007de6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007daa:	461a      	mov	r2, r3
 8007dac:	f240 2325 	movw	r3, #549	; 0x225
 8007db0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007db2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da17      	bge.n	8007dea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	0151      	lsls	r1, r2, #5
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	440a      	add	r2, r1
 8007dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007dd8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007dda:	e006      	b.n	8007dea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	77fb      	strb	r3, [r7, #31]
      break;
 8007de0:	e004      	b.n	8007dec <USB_HC_Init+0x14c>
      break;
 8007de2:	bf00      	nop
 8007de4:	e002      	b.n	8007dec <USB_HC_Init+0x14c>
      break;
 8007de6:	bf00      	nop
 8007de8:	e000      	b.n	8007dec <USB_HC_Init+0x14c>
      break;
 8007dea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	f003 030f 	and.w	r3, r3, #15
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007e00:	6939      	ldr	r1, [r7, #16]
 8007e02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e06:	4313      	orrs	r3, r2
 8007e08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007e16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da03      	bge.n	8007e26 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e22:	61bb      	str	r3, [r7, #24]
 8007e24:	e001      	b.n	8007e2a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff ff0f 	bl	8007c4e <USB_GetHostSpeed>
 8007e30:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007e32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d106      	bne.n	8007e48 <USB_HC_Init+0x1a8>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d003      	beq.n	8007e48 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e001      	b.n	8007e4c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e4c:	787b      	ldrb	r3, [r7, #1]
 8007e4e:	059b      	lsls	r3, r3, #22
 8007e50:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007e54:	78bb      	ldrb	r3, [r7, #2]
 8007e56:	02db      	lsls	r3, r3, #11
 8007e58:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e5c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e62:	049b      	lsls	r3, r3, #18
 8007e64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007e68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007e6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007e70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	0159      	lsls	r1, r3, #5
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	440b      	add	r3, r1
 8007e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e82:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e88:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007e8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d10f      	bne.n	8007eb2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007eb0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3720      	adds	r7, #32
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08c      	sub	sp, #48	; 0x30
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	785b      	ldrb	r3, [r3, #1]
 8007ed2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ed8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d02d      	beq.n	8007f42 <USB_HC_StartXfer+0x86>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	791b      	ldrb	r3, [r3, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d129      	bne.n	8007f42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d117      	bne.n	8007f24 <USB_HC_StartXfer+0x68>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	79db      	ldrb	r3, [r3, #7]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <USB_HC_StartXfer+0x48>
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	79db      	ldrb	r3, [r3, #7]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d10f      	bne.n	8007f24 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	6a3a      	ldr	r2, [r7, #32]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f22:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <USB_HC_StartXfer+0x86>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	795b      	ldrb	r3, [r3, #5]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d107      	bne.n	8007f42 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	4619      	mov	r1, r3
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fa2f 	bl	800839c <USB_DoPing>
      return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e0f8      	b.n	8008134 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d018      	beq.n	8007f7c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	8912      	ldrh	r2, [r2, #8]
 8007f52:	4413      	add	r3, r2
 8007f54:	3b01      	subs	r3, #1
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	8912      	ldrh	r2, [r2, #8]
 8007f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f5e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007f60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007f62:	8b7b      	ldrh	r3, [r7, #26]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d90b      	bls.n	8007f80 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007f68:	8b7b      	ldrh	r3, [r7, #26]
 8007f6a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	8912      	ldrh	r2, [r2, #8]
 8007f72:	fb02 f203 	mul.w	r2, r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	611a      	str	r2, [r3, #16]
 8007f7a:	e001      	b.n	8007f80 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	78db      	ldrb	r3, [r3, #3]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d007      	beq.n	8007f98 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	8912      	ldrh	r2, [r2, #8]
 8007f8e:	fb02 f203 	mul.w	r2, r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	611a      	str	r2, [r3, #16]
 8007f96:	e003      	b.n	8007fa0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	695a      	ldr	r2, [r3, #20]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007fa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007faa:	04d9      	lsls	r1, r3, #19
 8007fac:	4b63      	ldr	r3, [pc, #396]	; (800813c <USB_HC_StartXfer+0x280>)
 8007fae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007fb0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	7a9b      	ldrb	r3, [r3, #10]
 8007fb6:	075b      	lsls	r3, r3, #29
 8007fb8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007fbc:	69f9      	ldr	r1, [r7, #28]
 8007fbe:	0148      	lsls	r0, r1, #5
 8007fc0:	6a39      	ldr	r1, [r7, #32]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007fc8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007fca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	68d9      	ldr	r1, [r3, #12]
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe2:	460a      	mov	r2, r1
 8007fe4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bf0c      	ite	eq
 8007ff6:	2301      	moveq	r3, #1
 8007ff8:	2300      	movne	r3, #0
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	4413      	add	r3, r2
 8008006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	6a3a      	ldr	r2, [r7, #32]
 8008012:	440a      	add	r2, r1
 8008014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008018:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800801c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	4413      	add	r3, r2
 8008026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	7e7b      	ldrb	r3, [r7, #25]
 800802e:	075b      	lsls	r3, r3, #29
 8008030:	69f9      	ldr	r1, [r7, #28]
 8008032:	0148      	lsls	r0, r1, #5
 8008034:	6a39      	ldr	r1, [r7, #32]
 8008036:	4401      	add	r1, r0
 8008038:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800803c:	4313      	orrs	r3, r2
 800803e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	4413      	add	r3, r2
 8008048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008056:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	78db      	ldrb	r3, [r3, #3]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	e003      	b.n	8008072 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008070:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008078:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008086:	461a      	mov	r2, r3
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e04e      	b.n	8008134 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	78db      	ldrb	r3, [r3, #3]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d149      	bne.n	8008132 <USB_HC_StartXfer+0x276>
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d045      	beq.n	8008132 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	79db      	ldrb	r3, [r3, #7]
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d830      	bhi.n	8008110 <USB_HC_StartXfer+0x254>
 80080ae:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USB_HC_StartXfer+0x1f8>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080c5 	.word	0x080080c5
 80080b8:	080080e9 	.word	0x080080e9
 80080bc:	080080c5 	.word	0x080080c5
 80080c0:	080080e9 	.word	0x080080e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	3303      	adds	r3, #3
 80080ca:	089b      	lsrs	r3, r3, #2
 80080cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80080ce:	8afa      	ldrh	r2, [r7, #22]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d91c      	bls.n	8008114 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	f043 0220 	orr.w	r2, r3, #32
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80080e6:	e015      	b.n	8008114 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	3303      	adds	r3, #3
 80080ee:	089b      	lsrs	r3, r3, #2
 80080f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80080f2:	8afa      	ldrh	r2, [r7, #22]
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	429a      	cmp	r2, r3
 8008100:	d90a      	bls.n	8008118 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	619a      	str	r2, [r3, #24]
        }
        break;
 800810e:	e003      	b.n	8008118 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008110:	bf00      	nop
 8008112:	e002      	b.n	800811a <USB_HC_StartXfer+0x25e>
        break;
 8008114:	bf00      	nop
 8008116:	e000      	b.n	800811a <USB_HC_StartXfer+0x25e>
        break;
 8008118:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	68d9      	ldr	r1, [r3, #12]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	785a      	ldrb	r2, [r3, #1]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	b29b      	uxth	r3, r3
 8008128:	2000      	movs	r0, #0
 800812a:	9000      	str	r0, [sp, #0]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fb7d 	bl	800782c <USB_WritePacket>
  }

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3728      	adds	r7, #40	; 0x28
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	1ff80000 	.word	0x1ff80000

08008140 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	b29b      	uxth	r3, r3
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008162:	b480      	push	{r7}
 8008164:	b089      	sub	sp, #36	; 0x24
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	4413      	add	r3, r2
 8008182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	0c9b      	lsrs	r3, r3, #18
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	4413      	add	r3, r2
 8008198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	0fdb      	lsrs	r3, r3, #31
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d104      	bne.n	80081bc <USB_HC_Halt+0x5a>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e0e8      	b.n	800838e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <USB_HC_Halt+0x66>
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d173      	bne.n	80082b0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f040 80cb 	bne.w	800838c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d143      	bne.n	800828a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	4413      	add	r3, r2
 800820a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	440a      	add	r2, r1
 8008218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800821c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008220:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	4413      	add	r3, r2
 800822a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	0151      	lsls	r1, r2, #5
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	440a      	add	r2, r1
 8008238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800823c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008240:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	4413      	add	r3, r2
 800824a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	0151      	lsls	r1, r2, #5
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	440a      	add	r2, r1
 8008258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008260:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	3301      	adds	r3, #1
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800826e:	d81d      	bhi.n	80082ac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	4413      	add	r3, r2
 8008278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008286:	d0ec      	beq.n	8008262 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008288:	e080      	b.n	800838c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	4413      	add	r3, r2
 8008292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082aa:	e06f      	b.n	800838c <USB_HC_Halt+0x22a>
            break;
 80082ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082ae:	e06d      	b.n	800838c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	0151      	lsls	r1, r2, #5
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	440a      	add	r2, r1
 80082c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d143      	bne.n	8008368 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	0151      	lsls	r1, r2, #5
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	440a      	add	r2, r1
 80082f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	4413      	add	r3, r2
 8008308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	440a      	add	r2, r1
 8008316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800831a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800831e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	440a      	add	r2, r1
 8008336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800833a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800833e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	3301      	adds	r3, #1
 8008344:	61fb      	str	r3, [r7, #28]
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800834c:	d81d      	bhi.n	800838a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	4413      	add	r3, r2
 8008356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008364:	d0ec      	beq.n	8008340 <USB_HC_Halt+0x1de>
 8008366:	e011      	b.n	800838c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	4413      	add	r3, r2
 8008370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	440a      	add	r2, r1
 800837e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008382:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	e000      	b.n	800838c <USB_HC_Halt+0x22a>
          break;
 800838a:	bf00      	nop
    }
  }

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3724      	adds	r7, #36	; 0x24
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80083b0:	2301      	movs	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	04da      	lsls	r2, r3, #19
 80083b8:	4b15      	ldr	r3, [pc, #84]	; (8008410 <USB_DoPing+0x74>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fa:	461a      	mov	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	1ff80000 	.word	0x1ff80000

08008414 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff f95f 	bl	80076e8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800842a:	2110      	movs	r1, #16
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff f9b9 	bl	80077a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff f9da 	bl	80077ec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008438:	2300      	movs	r3, #0
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	e01f      	b.n	800847e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008454:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800845c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008464:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008472:	461a      	mov	r2, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	3301      	adds	r3, #1
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b0f      	cmp	r3, #15
 8008482:	d9dc      	bls.n	800843e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008484:	2300      	movs	r3, #0
 8008486:	613b      	str	r3, [r7, #16]
 8008488:	e034      	b.n	80084f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084be:	461a      	mov	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	3301      	adds	r3, #1
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084d0:	d80c      	bhi.n	80084ec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084e8:	d0ec      	beq.n	80084c4 <USB_StopHost+0xb0>
 80084ea:	e000      	b.n	80084ee <USB_StopHost+0xda>
        break;
 80084ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	3301      	adds	r3, #1
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d9c7      	bls.n	800848a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008500:	461a      	mov	r2, r3
 8008502:	f04f 33ff 	mov.w	r3, #4294967295
 8008506:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f04f 32ff 	mov.w	r2, #4294967295
 800850e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff f8d8 	bl	80076c6 <USB_EnableGlobalInt>

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008520:	b590      	push	{r4, r7, lr}
 8008522:	b089      	sub	sp, #36	; 0x24
 8008524:	af04      	add	r7, sp, #16
 8008526:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008528:	2301      	movs	r3, #1
 800852a:	2202      	movs	r2, #2
 800852c:	2102      	movs	r1, #2
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fc66 	bl	8008e00 <USBH_FindInterface>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	2bff      	cmp	r3, #255	; 0xff
 800853c:	d002      	beq.n	8008544 <USBH_CDC_InterfaceInit+0x24>
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d901      	bls.n	8008548 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008544:	2302      	movs	r3, #2
 8008546:	e13d      	b.n	80087c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fc3b 	bl	8008dc8 <USBH_SelectInterface>
 8008552:	4603      	mov	r3, r0
 8008554:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800855c:	2302      	movs	r3, #2
 800855e:	e131      	b.n	80087c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008566:	2050      	movs	r0, #80	; 0x50
 8008568:	f001 fb2c 	bl	8009bc4 <malloc>
 800856c:	4603      	mov	r3, r0
 800856e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008580:	2302      	movs	r3, #2
 8008582:	e11f      	b.n	80087c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008584:	2250      	movs	r2, #80	; 0x50
 8008586:	2100      	movs	r1, #0
 8008588:	68b8      	ldr	r0, [r7, #8]
 800858a:	f001 fb2b 	bl	8009be4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	211a      	movs	r1, #26
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	4413      	add	r3, r2
 800859a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	b25b      	sxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	da15      	bge.n	80085d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	211a      	movs	r1, #26
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	4413      	add	r3, r2
 80085b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	211a      	movs	r1, #26
 80085c2:	fb01 f303 	mul.w	r3, r1, r3
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085cc:	881a      	ldrh	r2, [r3, #0]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 ff9c 	bl	8009516 <USBH_AllocPipe>
 80085de:	4603      	mov	r3, r0
 80085e0:	461a      	mov	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	7819      	ldrb	r1, [r3, #0]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	7858      	ldrb	r0, [r3, #1]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	8952      	ldrh	r2, [r2, #10]
 80085fe:	9202      	str	r2, [sp, #8]
 8008600:	2203      	movs	r2, #3
 8008602:	9201      	str	r2, [sp, #4]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	4623      	mov	r3, r4
 8008608:	4602      	mov	r2, r0
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 ff54 	bl	80094b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2200      	movs	r2, #0
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 fa17 	bl	8009a4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800861e:	2300      	movs	r3, #0
 8008620:	2200      	movs	r2, #0
 8008622:	210a      	movs	r1, #10
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fbeb 	bl	8008e00 <USBH_FindInterface>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	2bff      	cmp	r3, #255	; 0xff
 8008632:	d002      	beq.n	800863a <USBH_CDC_InterfaceInit+0x11a>
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d901      	bls.n	800863e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800863a:	2302      	movs	r3, #2
 800863c:	e0c2      	b.n	80087c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	211a      	movs	r1, #26
 8008644:	fb01 f303 	mul.w	r3, r1, r3
 8008648:	4413      	add	r3, r2
 800864a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	b25b      	sxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	da16      	bge.n	8008684 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	211a      	movs	r1, #26
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	4413      	add	r3, r2
 8008662:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008666:	781a      	ldrb	r2, [r3, #0]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	211a      	movs	r1, #26
 8008672:	fb01 f303 	mul.w	r3, r1, r3
 8008676:	4413      	add	r3, r2
 8008678:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800867c:	881a      	ldrh	r2, [r3, #0]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	835a      	strh	r2, [r3, #26]
 8008682:	e015      	b.n	80086b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	211a      	movs	r1, #26
 800868a:	fb01 f303 	mul.w	r3, r1, r3
 800868e:	4413      	add	r3, r2
 8008690:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008694:	781a      	ldrb	r2, [r3, #0]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	211a      	movs	r1, #26
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80086aa:	881a      	ldrh	r2, [r3, #0]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	211a      	movs	r1, #26
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	b25b      	sxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da16      	bge.n	80086f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	211a      	movs	r1, #26
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80086d8:	781a      	ldrb	r2, [r3, #0]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	211a      	movs	r1, #26
 80086e4:	fb01 f303 	mul.w	r3, r1, r3
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80086ee:	881a      	ldrh	r2, [r3, #0]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	835a      	strh	r2, [r3, #26]
 80086f4:	e015      	b.n	8008722 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	211a      	movs	r1, #26
 80086fc:	fb01 f303 	mul.w	r3, r1, r3
 8008700:	4413      	add	r3, r2
 8008702:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008706:	781a      	ldrb	r2, [r3, #0]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	211a      	movs	r1, #26
 8008712:	fb01 f303 	mul.w	r3, r1, r3
 8008716:	4413      	add	r3, r2
 8008718:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800871c:	881a      	ldrh	r2, [r3, #0]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	7b9b      	ldrb	r3, [r3, #14]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fef4 	bl	8009516 <USBH_AllocPipe>
 800872e:	4603      	mov	r3, r0
 8008730:	461a      	mov	r2, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	7bdb      	ldrb	r3, [r3, #15]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 feea 	bl	8009516 <USBH_AllocPipe>
 8008742:	4603      	mov	r3, r0
 8008744:	461a      	mov	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	7b59      	ldrb	r1, [r3, #13]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	7b98      	ldrb	r0, [r3, #14]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	8b12      	ldrh	r2, [r2, #24]
 8008762:	9202      	str	r2, [sp, #8]
 8008764:	2202      	movs	r2, #2
 8008766:	9201      	str	r2, [sp, #4]
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	4623      	mov	r3, r4
 800876c:	4602      	mov	r2, r0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fea2 	bl	80094b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	7b19      	ldrb	r1, [r3, #12]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	7bd8      	ldrb	r0, [r3, #15]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	8b52      	ldrh	r2, [r2, #26]
 800878c:	9202      	str	r2, [sp, #8]
 800878e:	2202      	movs	r2, #2
 8008790:	9201      	str	r2, [sp, #4]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	4623      	mov	r3, r4
 8008796:	4602      	mov	r2, r0
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fe8d 	bl	80094b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	7b5b      	ldrb	r3, [r3, #13]
 80087aa:	2200      	movs	r2, #0
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 f94c 	bl	8009a4c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	7b1b      	ldrb	r3, [r3, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f945 	bl	8009a4c <USBH_LL_SetToggle>

  return USBH_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd90      	pop	{r4, r7, pc}

080087cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00e      	beq.n	8008804 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fe82 	bl	80094f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fead 	bl	8009558 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	7b1b      	ldrb	r3, [r3, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00e      	beq.n	800882a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	7b1b      	ldrb	r3, [r3, #12]
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fe6f 	bl	80094f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	7b1b      	ldrb	r3, [r3, #12]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fe9a 	bl	8009558 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	7b5b      	ldrb	r3, [r3, #13]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00e      	beq.n	8008850 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	7b5b      	ldrb	r3, [r3, #13]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fe5c 	bl	80094f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	7b5b      	ldrb	r3, [r3, #13]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fe87 	bl	8009558 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	4618      	mov	r0, r3
 8008866:	f001 f9b5 	bl	8009bd4 <free>
    phost->pActiveClass->pData = 0U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008870:	2200      	movs	r2, #0
 8008872:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3340      	adds	r3, #64	; 0x40
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f8b1 	bl	80089fe <GetLineCoding>
 800889c:	4603      	mov	r3, r0
 800889e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d105      	bne.n	80088b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088ac:	2102      	movs	r1, #2
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80088b2:	7afb      	ldrb	r3, [r7, #11]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80088c4:	2301      	movs	r3, #1
 80088c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d877      	bhi.n	80089d0 <USBH_CDC_Process+0x114>
 80088e0:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <USBH_CDC_Process+0x2c>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	080088fd 	.word	0x080088fd
 80088ec:	08008903 	.word	0x08008903
 80088f0:	08008933 	.word	0x08008933
 80088f4:	080089a7 	.word	0x080089a7
 80088f8:	080089b5 	.word	0x080089b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008900:	e06d      	b.n	80089de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f897 	bl	8008a3c <SetLineCoding>
 800890e:	4603      	mov	r3, r0
 8008910:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2202      	movs	r2, #2
 800891c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008920:	e058      	b.n	80089d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d055      	beq.n	80089d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2204      	movs	r2, #4
 800892c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008930:	e050      	b.n	80089d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	3340      	adds	r3, #64	; 0x40
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f860 	bl	80089fe <GetLineCoding>
 800893e:	4603      	mov	r3, r0
 8008940:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d126      	bne.n	8008996 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800895a:	791b      	ldrb	r3, [r3, #4]
 800895c:	429a      	cmp	r2, r3
 800895e:	d13b      	bne.n	80089d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800896a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800896c:	429a      	cmp	r2, r3
 800896e:	d133      	bne.n	80089d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800897a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800897c:	429a      	cmp	r2, r3
 800897e:	d12b      	bne.n	80089d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008988:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800898a:	429a      	cmp	r2, r3
 800898c:	d124      	bne.n	80089d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f958 	bl	8008c44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008994:	e020      	b.n	80089d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d01d      	beq.n	80089d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2204      	movs	r2, #4
 80089a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80089a4:	e018      	b.n	80089d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f867 	bl	8008a7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f8da 	bl	8008b66 <CDC_ProcessReception>
      break;
 80089b2:	e014      	b.n	80089de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80089b4:	2100      	movs	r1, #0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fb08 	bl	8008fcc <USBH_ClrFeature>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10a      	bne.n	80089dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80089ce:	e005      	b.n	80089dc <USBH_CDC_Process+0x120>

    default:
      break;
 80089d0:	bf00      	nop
 80089d2:	e004      	b.n	80089de <USBH_CDC_Process+0x122>
      break;
 80089d4:	bf00      	nop
 80089d6:	e002      	b.n	80089de <USBH_CDC_Process+0x122>
      break;
 80089d8:	bf00      	nop
 80089da:	e000      	b.n	80089de <USBH_CDC_Process+0x122>
      break;
 80089dc:	bf00      	nop

  }

  return status;
 80089de:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	22a1      	movs	r2, #161	; 0xa1
 8008a0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2221      	movs	r2, #33	; 0x21
 8008a12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2207      	movs	r2, #7
 8008a24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2207      	movs	r2, #7
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 faf1 	bl	8009014 <USBH_CtlReq>
 8008a32:	4603      	mov	r3, r0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2221      	movs	r2, #33	; 0x21
 8008a4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2207      	movs	r2, #7
 8008a62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2207      	movs	r2, #7
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fad2 	bl	8009014 <USBH_CtlReq>
 8008a70:	4603      	mov	r3, r0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b086      	sub	sp, #24
 8008a7e:	af02      	add	r7, sp, #8
 8008a80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d002      	beq.n	8008aa0 <CDC_ProcessTransmission+0x26>
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d023      	beq.n	8008ae6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008a9e:	e05e      	b.n	8008b5e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	8b12      	ldrh	r2, [r2, #24]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d90b      	bls.n	8008ac4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	69d9      	ldr	r1, [r3, #28]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8b1a      	ldrh	r2, [r3, #24]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	7b5b      	ldrb	r3, [r3, #13]
 8008ab8:	2001      	movs	r0, #1
 8008aba:	9000      	str	r0, [sp, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fcb8 	bl	8009432 <USBH_BulkSendData>
 8008ac2:	e00b      	b.n	8008adc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	7b5b      	ldrb	r3, [r3, #13]
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	9000      	str	r0, [sp, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fcab 	bl	8009432 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008ae4:	e03b      	b.n	8008b5e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	7b5b      	ldrb	r3, [r3, #13]
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 ff83 	bl	80099f8 <USBH_LL_GetURBState>
 8008af2:	4603      	mov	r3, r0
 8008af4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008af6:	7afb      	ldrb	r3, [r7, #11]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d128      	bne.n	8008b4e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	8b12      	ldrh	r2, [r2, #24]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d90e      	bls.n	8008b26 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	8b12      	ldrh	r2, [r2, #24]
 8008b10:	1a9a      	subs	r2, r3, r2
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	8b12      	ldrh	r2, [r2, #24]
 8008b1e:	441a      	add	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	61da      	str	r2, [r3, #28]
 8008b24:	e002      	b.n	8008b2c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008b3c:	e00e      	b.n	8008b5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f868 	bl	8008c1c <USBH_CDC_TransmitCallback>
      break;
 8008b4c:	e006      	b.n	8008b5c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008b4e:	7afb      	ldrb	r3, [r7, #11]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d103      	bne.n	8008b5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008b5c:	bf00      	nop
  }
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d002      	beq.n	8008b8c <CDC_ProcessReception+0x26>
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d00e      	beq.n	8008ba8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008b8a:	e043      	b.n	8008c14 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	6a19      	ldr	r1, [r3, #32]
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	8b5a      	ldrh	r2, [r3, #26]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	7b1b      	ldrb	r3, [r3, #12]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc6f 	bl	800947c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008ba6:	e035      	b.n	8008c14 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	7b1b      	ldrb	r3, [r3, #12]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 ff22 	bl	80099f8 <USBH_LL_GetURBState>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008bb8:	7cfb      	ldrb	r3, [r7, #19]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d129      	bne.n	8008c12 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	7b1b      	ldrb	r3, [r3, #12]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fe85 	bl	80098d4 <USBH_LL_GetLastXferSize>
 8008bca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d016      	beq.n	8008c04 <CDC_ProcessReception+0x9e>
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	8b5b      	ldrh	r3, [r3, #26]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d910      	bls.n	8008c04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	1ad2      	subs	r2, r2, r3
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	6a1a      	ldr	r2, [r3, #32]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	441a      	add	r2, r3
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008c02:	e006      	b.n	8008c12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f80f 	bl	8008c30 <USBH_CDC_ReceiveCallback>
      break;
 8008c12:	bf00      	nop
  }
}
 8008c14:	bf00      	nop
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e029      	b.n	8008cc4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	79fa      	ldrb	r2, [r7, #7]
 8008c74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 f81f 	bl	8008ccc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fd97 	bl	80097f0 <USBH_LL_Init>

  return USBH_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	e009      	b.n	8008cf2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	33e0      	adds	r3, #224	; 0xe0
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	2200      	movs	r2, #0
 8008cea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2b0e      	cmp	r3, #14
 8008cf6:	d9f2      	bls.n	8008cde <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	e009      	b.n	8008d12 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d18:	d3f1      	bcc.n	8008cfe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2240      	movs	r2, #64	; 0x40
 8008d3e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d016      	beq.n	8008db6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10e      	bne.n	8008db0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008d98:	1c59      	adds	r1, r3, #1
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	33de      	adds	r3, #222	; 0xde
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
 8008dae:	e004      	b.n	8008dba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008db0:	2302      	movs	r3, #2
 8008db2:	73fb      	strb	r3, [r7, #15]
 8008db4:	e001      	b.n	8008dba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008db6:	2302      	movs	r3, #2
 8008db8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d204      	bcs.n	8008dee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008dec:	e001      	b.n	8008df2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008dee:	2302      	movs	r3, #2
 8008df0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	4608      	mov	r0, r1
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	70fb      	strb	r3, [r7, #3]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70bb      	strb	r3, [r7, #2]
 8008e16:	4613      	mov	r3, r2
 8008e18:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e28:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e2a:	e025      	b.n	8008e78 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	221a      	movs	r2, #26
 8008e30:	fb02 f303 	mul.w	r3, r2, r3
 8008e34:	3308      	adds	r3, #8
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	3302      	adds	r3, #2
 8008e3c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	795b      	ldrb	r3, [r3, #5]
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d002      	beq.n	8008e4e <USBH_FindInterface+0x4e>
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	2bff      	cmp	r3, #255	; 0xff
 8008e4c:	d111      	bne.n	8008e72 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e52:	78ba      	ldrb	r2, [r7, #2]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d002      	beq.n	8008e5e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e58:	78bb      	ldrb	r3, [r7, #2]
 8008e5a:	2bff      	cmp	r3, #255	; 0xff
 8008e5c:	d109      	bne.n	8008e72 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e62:	787a      	ldrb	r2, [r7, #1]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d002      	beq.n	8008e6e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e68:	787b      	ldrb	r3, [r7, #1]
 8008e6a:	2bff      	cmp	r3, #255	; 0xff
 8008e6c:	d101      	bne.n	8008e72 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	e006      	b.n	8008e80 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	3301      	adds	r3, #1
 8008e76:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d9d6      	bls.n	8008e2c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008e7e:	23ff      	movs	r3, #255	; 0xff
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	371c      	adds	r7, #28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fce7 	bl	8009868 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fdbe 	bl	8009a1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f804 	bl	8008eee <USBH_HandleSof>
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b0b      	cmp	r3, #11
 8008efe:	d10a      	bne.n	8008f16 <USBH_HandleSof+0x28>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
  }
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008f2e:	bf00      	nop
}
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008f4a:	bf00      	nop
}
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fc7a 	bl	800989e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	791b      	ldrb	r3, [r3, #4]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fad1 	bl	8009558 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	795b      	ldrb	r3, [r3, #5]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 facb 	bl	8009558 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	789b      	ldrb	r3, [r3, #2]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d10f      	bne.n	8009000 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009000:	2200      	movs	r2, #0
 8009002:	2100      	movs	r1, #0
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f805 	bl	8009014 <USBH_CtlReq>
 800900a:	4603      	mov	r3, r0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009022:	2301      	movs	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	789b      	ldrb	r3, [r3, #2]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d002      	beq.n	8009034 <USBH_CtlReq+0x20>
 800902e:	2b02      	cmp	r3, #2
 8009030:	d00f      	beq.n	8009052 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009032:	e027      	b.n	8009084 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	88fa      	ldrh	r2, [r7, #6]
 800903e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2201      	movs	r2, #1
 8009044:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2202      	movs	r2, #2
 800904a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800904c:	2301      	movs	r3, #1
 800904e:	75fb      	strb	r3, [r7, #23]
      break;
 8009050:	e018      	b.n	8009084 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 f81c 	bl	8009090 <USBH_HandleControl>
 8009058:	4603      	mov	r3, r0
 800905a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <USBH_CtlReq+0x54>
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	2b03      	cmp	r3, #3
 8009066:	d106      	bne.n	8009076 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	761a      	strb	r2, [r3, #24]
      break;
 8009074:	e005      	b.n	8009082 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d102      	bne.n	8009082 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	709a      	strb	r2, [r3, #2]
      break;
 8009082:	bf00      	nop
  }
  return status;
 8009084:	7dfb      	ldrb	r3, [r7, #23]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af02      	add	r7, sp, #8
 8009096:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800909c:	2300      	movs	r3, #0
 800909e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	7e1b      	ldrb	r3, [r3, #24]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	2b0a      	cmp	r3, #10
 80090a8:	f200 8156 	bhi.w	8009358 <USBH_HandleControl+0x2c8>
 80090ac:	a201      	add	r2, pc, #4	; (adr r2, 80090b4 <USBH_HandleControl+0x24>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	080090fb 	.word	0x080090fb
 80090bc:	08009165 	.word	0x08009165
 80090c0:	0800918b 	.word	0x0800918b
 80090c4:	080091c3 	.word	0x080091c3
 80090c8:	080091ed 	.word	0x080091ed
 80090cc:	0800923f 	.word	0x0800923f
 80090d0:	08009261 	.word	0x08009261
 80090d4:	0800929d 	.word	0x0800929d
 80090d8:	080092c3 	.word	0x080092c3
 80090dc:	08009301 	.word	0x08009301
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f103 0110 	add.w	r1, r3, #16
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	795b      	ldrb	r3, [r3, #5]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f943 	bl	8009378 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2202      	movs	r2, #2
 80090f6:	761a      	strb	r2, [r3, #24]
      break;
 80090f8:	e139      	b.n	800936e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	795b      	ldrb	r3, [r3, #5]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fc79 	bl	80099f8 <USBH_LL_GetURBState>
 8009106:	4603      	mov	r3, r0
 8009108:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d11e      	bne.n	800914e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	7c1b      	ldrb	r3, [r3, #16]
 8009114:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009118:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	8adb      	ldrh	r3, [r3, #22]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009122:	7b7b      	ldrb	r3, [r7, #13]
 8009124:	2b80      	cmp	r3, #128	; 0x80
 8009126:	d103      	bne.n	8009130 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2203      	movs	r2, #3
 800912c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800912e:	e115      	b.n	800935c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2205      	movs	r2, #5
 8009134:	761a      	strb	r2, [r3, #24]
      break;
 8009136:	e111      	b.n	800935c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009138:	7b7b      	ldrb	r3, [r7, #13]
 800913a:	2b80      	cmp	r3, #128	; 0x80
 800913c:	d103      	bne.n	8009146 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2209      	movs	r2, #9
 8009142:	761a      	strb	r2, [r3, #24]
      break;
 8009144:	e10a      	b.n	800935c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2207      	movs	r2, #7
 800914a:	761a      	strb	r2, [r3, #24]
      break;
 800914c:	e106      	b.n	800935c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	2b04      	cmp	r3, #4
 8009152:	d003      	beq.n	800915c <USBH_HandleControl+0xcc>
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	2b02      	cmp	r3, #2
 8009158:	f040 8100 	bne.w	800935c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	220b      	movs	r2, #11
 8009160:	761a      	strb	r2, [r3, #24]
      break;
 8009162:	e0fb      	b.n	800935c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800916a:	b29a      	uxth	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6899      	ldr	r1, [r3, #8]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	899a      	ldrh	r2, [r3, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	791b      	ldrb	r3, [r3, #4]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f93a 	bl	80093f6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2204      	movs	r2, #4
 8009186:	761a      	strb	r2, [r3, #24]
      break;
 8009188:	e0f1      	b.n	800936e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	791b      	ldrb	r3, [r3, #4]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fc31 	bl	80099f8 <USBH_LL_GetURBState>
 8009196:	4603      	mov	r3, r0
 8009198:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d102      	bne.n	80091a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2209      	movs	r2, #9
 80091a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	2b05      	cmp	r3, #5
 80091aa:	d102      	bne.n	80091b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80091ac:	2303      	movs	r3, #3
 80091ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80091b0:	e0d6      	b.n	8009360 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80091b2:	7bbb      	ldrb	r3, [r7, #14]
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	f040 80d3 	bne.w	8009360 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	220b      	movs	r2, #11
 80091be:	761a      	strb	r2, [r3, #24]
      break;
 80091c0:	e0ce      	b.n	8009360 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6899      	ldr	r1, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	899a      	ldrh	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	795b      	ldrb	r3, [r3, #5]
 80091ce:	2001      	movs	r0, #1
 80091d0:	9000      	str	r0, [sp, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f8ea 	bl	80093ac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091de:	b29a      	uxth	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2206      	movs	r2, #6
 80091e8:	761a      	strb	r2, [r3, #24]
      break;
 80091ea:	e0c0      	b.n	800936e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	795b      	ldrb	r3, [r3, #5]
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fc00 	bl	80099f8 <USBH_LL_GetURBState>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d103      	bne.n	800920a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2207      	movs	r2, #7
 8009206:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009208:	e0ac      	b.n	8009364 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	2b05      	cmp	r3, #5
 800920e:	d105      	bne.n	800921c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	220c      	movs	r2, #12
 8009214:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009216:	2303      	movs	r3, #3
 8009218:	73fb      	strb	r3, [r7, #15]
      break;
 800921a:	e0a3      	b.n	8009364 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d103      	bne.n	800922a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2205      	movs	r2, #5
 8009226:	761a      	strb	r2, [r3, #24]
      break;
 8009228:	e09c      	b.n	8009364 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b04      	cmp	r3, #4
 800922e:	f040 8099 	bne.w	8009364 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	220b      	movs	r2, #11
 8009236:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009238:	2302      	movs	r3, #2
 800923a:	73fb      	strb	r3, [r7, #15]
      break;
 800923c:	e092      	b.n	8009364 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	791b      	ldrb	r3, [r3, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	2100      	movs	r1, #0
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8d5 	bl	80093f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2208      	movs	r2, #8
 800925c:	761a      	strb	r2, [r3, #24]

      break;
 800925e:	e086      	b.n	800936e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	791b      	ldrb	r3, [r3, #4]
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fbc6 	bl	80099f8 <USBH_LL_GetURBState>
 800926c:	4603      	mov	r3, r0
 800926e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d105      	bne.n	8009282 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	220d      	movs	r2, #13
 800927a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009280:	e072      	b.n	8009368 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b04      	cmp	r3, #4
 8009286:	d103      	bne.n	8009290 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	220b      	movs	r2, #11
 800928c:	761a      	strb	r2, [r3, #24]
      break;
 800928e:	e06b      	b.n	8009368 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b05      	cmp	r3, #5
 8009294:	d168      	bne.n	8009368 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009296:	2303      	movs	r3, #3
 8009298:	73fb      	strb	r3, [r7, #15]
      break;
 800929a:	e065      	b.n	8009368 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	795b      	ldrb	r3, [r3, #5]
 80092a0:	2201      	movs	r2, #1
 80092a2:	9200      	str	r2, [sp, #0]
 80092a4:	2200      	movs	r2, #0
 80092a6:	2100      	movs	r1, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f87f 	bl	80093ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	220a      	movs	r2, #10
 80092be:	761a      	strb	r2, [r3, #24]
      break;
 80092c0:	e055      	b.n	800936e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	795b      	ldrb	r3, [r3, #5]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fb95 	bl	80099f8 <USBH_LL_GetURBState>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d105      	bne.n	80092e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	220d      	movs	r2, #13
 80092e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80092e2:	e043      	b.n	800936c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d103      	bne.n	80092f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2209      	movs	r2, #9
 80092ee:	761a      	strb	r2, [r3, #24]
      break;
 80092f0:	e03c      	b.n	800936c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	2b04      	cmp	r3, #4
 80092f6:	d139      	bne.n	800936c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	220b      	movs	r2, #11
 80092fc:	761a      	strb	r2, [r3, #24]
      break;
 80092fe:	e035      	b.n	800936c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7e5b      	ldrb	r3, [r3, #25]
 8009304:	3301      	adds	r3, #1
 8009306:	b2da      	uxtb	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	765a      	strb	r2, [r3, #25]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7e5b      	ldrb	r3, [r3, #25]
 8009310:	2b02      	cmp	r3, #2
 8009312:	d806      	bhi.n	8009322 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009320:	e025      	b.n	800936e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009328:	2106      	movs	r1, #6
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	795b      	ldrb	r3, [r3, #5]
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f90c 	bl	8009558 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	791b      	ldrb	r3, [r3, #4]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f906 	bl	8009558 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009352:	2302      	movs	r3, #2
 8009354:	73fb      	strb	r3, [r7, #15]
      break;
 8009356:	e00a      	b.n	800936e <USBH_HandleControl+0x2de>

    default:
      break;
 8009358:	bf00      	nop
 800935a:	e008      	b.n	800936e <USBH_HandleControl+0x2de>
      break;
 800935c:	bf00      	nop
 800935e:	e006      	b.n	800936e <USBH_HandleControl+0x2de>
      break;
 8009360:	bf00      	nop
 8009362:	e004      	b.n	800936e <USBH_HandleControl+0x2de>
      break;
 8009364:	bf00      	nop
 8009366:	e002      	b.n	800936e <USBH_HandleControl+0x2de>
      break;
 8009368:	bf00      	nop
 800936a:	e000      	b.n	800936e <USBH_HandleControl+0x2de>
      break;
 800936c:	bf00      	nop
  }

  return status;
 800936e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af04      	add	r7, sp, #16
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009386:	79f9      	ldrb	r1, [r7, #7]
 8009388:	2300      	movs	r3, #0
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	2308      	movs	r3, #8
 800938e:	9302      	str	r3, [sp, #8]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	2300      	movs	r3, #0
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	2300      	movs	r3, #0
 800939a:	2200      	movs	r2, #0
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 fafa 	bl	8009996 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af04      	add	r7, sp, #16
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	4611      	mov	r1, r2
 80093b8:	461a      	mov	r2, r3
 80093ba:	460b      	mov	r3, r1
 80093bc:	80fb      	strh	r3, [r7, #6]
 80093be:	4613      	mov	r3, r2
 80093c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80093d0:	7979      	ldrb	r1, [r7, #5]
 80093d2:	7e3b      	ldrb	r3, [r7, #24]
 80093d4:	9303      	str	r3, [sp, #12]
 80093d6:	88fb      	ldrh	r3, [r7, #6]
 80093d8:	9302      	str	r3, [sp, #8]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	2301      	movs	r3, #1
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	2300      	movs	r3, #0
 80093e4:	2200      	movs	r2, #0
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 fad5 	bl	8009996 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b088      	sub	sp, #32
 80093fa:	af04      	add	r7, sp, #16
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	4611      	mov	r1, r2
 8009402:	461a      	mov	r2, r3
 8009404:	460b      	mov	r3, r1
 8009406:	80fb      	strh	r3, [r7, #6]
 8009408:	4613      	mov	r3, r2
 800940a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800940c:	7979      	ldrb	r1, [r7, #5]
 800940e:	2300      	movs	r3, #0
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	9302      	str	r3, [sp, #8]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	2301      	movs	r3, #1
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	2300      	movs	r3, #0
 8009420:	2201      	movs	r2, #1
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fab7 	bl	8009996 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009428:	2300      	movs	r3, #0

}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b088      	sub	sp, #32
 8009436:	af04      	add	r7, sp, #16
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	60b9      	str	r1, [r7, #8]
 800943c:	4611      	mov	r1, r2
 800943e:	461a      	mov	r2, r3
 8009440:	460b      	mov	r3, r1
 8009442:	80fb      	strh	r3, [r7, #6]
 8009444:	4613      	mov	r3, r2
 8009446:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009456:	7979      	ldrb	r1, [r7, #5]
 8009458:	7e3b      	ldrb	r3, [r7, #24]
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	88fb      	ldrh	r3, [r7, #6]
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	2301      	movs	r3, #1
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2302      	movs	r3, #2
 800946a:	2200      	movs	r2, #0
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 fa92 	bl	8009996 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af04      	add	r7, sp, #16
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4611      	mov	r1, r2
 8009488:	461a      	mov	r2, r3
 800948a:	460b      	mov	r3, r1
 800948c:	80fb      	strh	r3, [r7, #6]
 800948e:	4613      	mov	r3, r2
 8009490:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009492:	7979      	ldrb	r1, [r7, #5]
 8009494:	2300      	movs	r3, #0
 8009496:	9303      	str	r3, [sp, #12]
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	9302      	str	r3, [sp, #8]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	2301      	movs	r3, #1
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	2302      	movs	r3, #2
 80094a6:	2201      	movs	r2, #1
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 fa74 	bl	8009996 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af04      	add	r7, sp, #16
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	70fb      	strb	r3, [r7, #3]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70bb      	strb	r3, [r7, #2]
 80094ce:	4613      	mov	r3, r2
 80094d0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80094d2:	7878      	ldrb	r0, [r7, #1]
 80094d4:	78ba      	ldrb	r2, [r7, #2]
 80094d6:	78f9      	ldrb	r1, [r7, #3]
 80094d8:	8b3b      	ldrh	r3, [r7, #24]
 80094da:	9302      	str	r3, [sp, #8]
 80094dc:	7d3b      	ldrb	r3, [r7, #20]
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	7c3b      	ldrb	r3, [r7, #16]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4603      	mov	r3, r0
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa07 	bl	80098fa <USBH_LL_OpenPipe>

  return USBH_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa26 	bl	8009958 <USBH_LL_ClosePipe>

  return USBH_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f836 	bl	8009594 <USBH_GetFreePipe>
 8009528:	4603      	mov	r3, r0
 800952a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009532:	4293      	cmp	r3, r2
 8009534:	d00a      	beq.n	800954c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009536:	78fa      	ldrb	r2, [r7, #3]
 8009538:	89fb      	ldrh	r3, [r7, #14]
 800953a:	f003 030f 	and.w	r3, r3, #15
 800953e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	33e0      	adds	r3, #224	; 0xe0
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	440b      	add	r3, r1
 800954a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800954c:	89fb      	ldrh	r3, [r7, #14]
 800954e:	b2db      	uxtb	r3, r3
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	2b0a      	cmp	r3, #10
 8009568:	d80d      	bhi.n	8009586 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	33e0      	adds	r3, #224	; 0xe0
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800957c:	6879      	ldr	r1, [r7, #4]
 800957e:	33e0      	adds	r3, #224	; 0xe0
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	440b      	add	r3, r1
 8009584:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
 80095a4:	e00f      	b.n	80095c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	33e0      	adds	r3, #224	; 0xe0
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	b29b      	uxth	r3, r3
 80095be:	e007      	b.n	80095d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	3301      	adds	r3, #1
 80095c4:	73fb      	strb	r3, [r7, #15]
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	2b0a      	cmp	r3, #10
 80095ca:	d9ec      	bls.n	80095a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80095cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80095e0:	2201      	movs	r2, #1
 80095e2:	490e      	ldr	r1, [pc, #56]	; (800961c <MX_USB_HOST_Init+0x40>)
 80095e4:	480e      	ldr	r0, [pc, #56]	; (8009620 <MX_USB_HOST_Init+0x44>)
 80095e6:	f7ff fb37 	bl	8008c58 <USBH_Init>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80095f0:	f7f8 fe54 	bl	800229c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80095f4:	490b      	ldr	r1, [pc, #44]	; (8009624 <MX_USB_HOST_Init+0x48>)
 80095f6:	480a      	ldr	r0, [pc, #40]	; (8009620 <MX_USB_HOST_Init+0x44>)
 80095f8:	f7ff fbbc 	bl	8008d74 <USBH_RegisterClass>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009602:	f7f8 fe4b 	bl	800229c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009606:	4806      	ldr	r0, [pc, #24]	; (8009620 <MX_USB_HOST_Init+0x44>)
 8009608:	f7ff fc40 	bl	8008e8c <USBH_Start>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009612:	f7f8 fe43 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009616:	bf00      	nop
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	08009629 	.word	0x08009629
 8009620:	20000344 	.word	0x20000344
 8009624:	20000018 	.word	0x20000018

08009628 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	3b01      	subs	r3, #1
 8009638:	2b04      	cmp	r3, #4
 800963a:	d819      	bhi.n	8009670 <USBH_UserProcess+0x48>
 800963c:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <USBH_UserProcess+0x1c>)
 800963e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009642:	bf00      	nop
 8009644:	08009671 	.word	0x08009671
 8009648:	08009661 	.word	0x08009661
 800964c:	08009671 	.word	0x08009671
 8009650:	08009669 	.word	0x08009669
 8009654:	08009659 	.word	0x08009659
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009658:	4b09      	ldr	r3, [pc, #36]	; (8009680 <USBH_UserProcess+0x58>)
 800965a:	2203      	movs	r2, #3
 800965c:	701a      	strb	r2, [r3, #0]
  break;
 800965e:	e008      	b.n	8009672 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009660:	4b07      	ldr	r3, [pc, #28]	; (8009680 <USBH_UserProcess+0x58>)
 8009662:	2202      	movs	r2, #2
 8009664:	701a      	strb	r2, [r3, #0]
  break;
 8009666:	e004      	b.n	8009672 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009668:	4b05      	ldr	r3, [pc, #20]	; (8009680 <USBH_UserProcess+0x58>)
 800966a:	2201      	movs	r2, #1
 800966c:	701a      	strb	r2, [r3, #0]
  break;
 800966e:	e000      	b.n	8009672 <USBH_UserProcess+0x4a>

  default:
  break;
 8009670:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	200000e8 	.word	0x200000e8

08009684 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08a      	sub	sp, #40	; 0x28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800968c:	f107 0314 	add.w	r3, r7, #20
 8009690:	2200      	movs	r2, #0
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	605a      	str	r2, [r3, #4]
 8009696:	609a      	str	r2, [r3, #8]
 8009698:	60da      	str	r2, [r3, #12]
 800969a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a4:	d147      	bne.n	8009736 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096a6:	2300      	movs	r3, #0
 80096a8:	613b      	str	r3, [r7, #16]
 80096aa:	4b25      	ldr	r3, [pc, #148]	; (8009740 <HAL_HCD_MspInit+0xbc>)
 80096ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ae:	4a24      	ldr	r2, [pc, #144]	; (8009740 <HAL_HCD_MspInit+0xbc>)
 80096b0:	f043 0301 	orr.w	r3, r3, #1
 80096b4:	6313      	str	r3, [r2, #48]	; 0x30
 80096b6:	4b22      	ldr	r3, [pc, #136]	; (8009740 <HAL_HCD_MspInit+0xbc>)
 80096b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80096c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096c8:	2300      	movs	r3, #0
 80096ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80096d0:	f107 0314 	add.w	r3, r7, #20
 80096d4:	4619      	mov	r1, r3
 80096d6:	481b      	ldr	r0, [pc, #108]	; (8009744 <HAL_HCD_MspInit+0xc0>)
 80096d8:	f7f9 fe56 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80096dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80096e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096e2:	2302      	movs	r3, #2
 80096e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ea:	2300      	movs	r3, #0
 80096ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096ee:	230a      	movs	r3, #10
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096f2:	f107 0314 	add.w	r3, r7, #20
 80096f6:	4619      	mov	r1, r3
 80096f8:	4812      	ldr	r0, [pc, #72]	; (8009744 <HAL_HCD_MspInit+0xc0>)
 80096fa:	f7f9 fe45 	bl	8003388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096fe:	4b10      	ldr	r3, [pc, #64]	; (8009740 <HAL_HCD_MspInit+0xbc>)
 8009700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009702:	4a0f      	ldr	r2, [pc, #60]	; (8009740 <HAL_HCD_MspInit+0xbc>)
 8009704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009708:	6353      	str	r3, [r2, #52]	; 0x34
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <HAL_HCD_MspInit+0xbc>)
 8009710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009712:	4a0b      	ldr	r2, [pc, #44]	; (8009740 <HAL_HCD_MspInit+0xbc>)
 8009714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009718:	6453      	str	r3, [r2, #68]	; 0x44
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <HAL_HCD_MspInit+0xbc>)
 800971c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009726:	2200      	movs	r2, #0
 8009728:	2100      	movs	r1, #0
 800972a:	2043      	movs	r0, #67	; 0x43
 800972c:	f7f9 fdf5 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009730:	2043      	movs	r0, #67	; 0x43
 8009732:	f7f9 fe0e 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009736:	bf00      	nop
 8009738:	3728      	adds	r7, #40	; 0x28
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	40023800 	.word	0x40023800
 8009744:	40020000 	.word	0x40020000

08009748 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fbb7 	bl	8008eca <USBH_LL_IncTimer>
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fbef 	bl	8008f56 <USBH_LL_Connect>
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800978e:	4618      	mov	r0, r3
 8009790:	f7ff fbf8 	bl	8008f84 <USBH_LL_Disconnect>
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
 80097a8:	4613      	mov	r3, r2
 80097aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff fba9 	bl	8008f1e <USBH_LL_PortEnabled>
}
 80097cc:	bf00      	nop
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fba9 	bl	8008f3a <USBH_LL_PortDisabled>
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d12a      	bne.n	8009858 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009802:	4a18      	ldr	r2, [pc, #96]	; (8009864 <USBH_LL_Init+0x74>)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a15      	ldr	r2, [pc, #84]	; (8009864 <USBH_LL_Init+0x74>)
 800980e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009812:	4b14      	ldr	r3, [pc, #80]	; (8009864 <USBH_LL_Init+0x74>)
 8009814:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009818:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800981a:	4b12      	ldr	r3, [pc, #72]	; (8009864 <USBH_LL_Init+0x74>)
 800981c:	2208      	movs	r2, #8
 800981e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009820:	4b10      	ldr	r3, [pc, #64]	; (8009864 <USBH_LL_Init+0x74>)
 8009822:	2201      	movs	r2, #1
 8009824:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009826:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <USBH_LL_Init+0x74>)
 8009828:	2200      	movs	r2, #0
 800982a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800982c:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <USBH_LL_Init+0x74>)
 800982e:	2202      	movs	r2, #2
 8009830:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009832:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <USBH_LL_Init+0x74>)
 8009834:	2200      	movs	r2, #0
 8009836:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009838:	480a      	ldr	r0, [pc, #40]	; (8009864 <USBH_LL_Init+0x74>)
 800983a:	f7f9 ffa5 	bl	8003788 <HAL_HCD_Init>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009844:	f7f8 fd2a 	bl	800229c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009848:	4806      	ldr	r0, [pc, #24]	; (8009864 <USBH_LL_Init+0x74>)
 800984a:	f7fa fb7a 	bl	8003f42 <HAL_HCD_GetCurrentFrame>
 800984e:	4603      	mov	r3, r0
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff fb2a 	bl	8008eac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	2000071c 	.word	0x2000071c

08009868 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800987e:	4618      	mov	r0, r3
 8009880:	f7fa faf7 	bl	8003e72 <HAL_HCD_Start>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f90e 	bl	8009aac <USBH_Get_USB_Status>
 8009890:	4603      	mov	r3, r0
 8009892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009894:	7bbb      	ldrb	r3, [r7, #14]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fa faff 	bl	8003eb8 <HAL_HCD_Stop>
 80098ba:	4603      	mov	r3, r0
 80098bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f8f3 	bl	8009aac <USBH_Get_USB_Status>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fa fb15 	bl	8003f1a <HAL_HCD_HC_GetXferCount>
 80098f0:	4603      	mov	r3, r0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80098fa:	b590      	push	{r4, r7, lr}
 80098fc:	b089      	sub	sp, #36	; 0x24
 80098fe:	af04      	add	r7, sp, #16
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	4608      	mov	r0, r1
 8009904:	4611      	mov	r1, r2
 8009906:	461a      	mov	r2, r3
 8009908:	4603      	mov	r3, r0
 800990a:	70fb      	strb	r3, [r7, #3]
 800990c:	460b      	mov	r3, r1
 800990e:	70bb      	strb	r3, [r7, #2]
 8009910:	4613      	mov	r3, r2
 8009912:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009922:	787c      	ldrb	r4, [r7, #1]
 8009924:	78ba      	ldrb	r2, [r7, #2]
 8009926:	78f9      	ldrb	r1, [r7, #3]
 8009928:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	4623      	mov	r3, r4
 800993a:	f7f9 ff87 	bl	800384c <HAL_HCD_HC_Init>
 800993e:	4603      	mov	r3, r0
 8009940:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009942:	7bfb      	ldrb	r3, [r7, #15]
 8009944:	4618      	mov	r0, r3
 8009946:	f000 f8b1 	bl	8009aac <USBH_Get_USB_Status>
 800994a:	4603      	mov	r3, r0
 800994c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800994e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	bd90      	pop	{r4, r7, pc}

08009958 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7f9 fff7 	bl	800396a <HAL_HCD_HC_Halt>
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 f892 	bl	8009aac <USBH_Get_USB_Status>
 8009988:	4603      	mov	r3, r0
 800998a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800998c:	7bbb      	ldrb	r3, [r7, #14]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009996:	b590      	push	{r4, r7, lr}
 8009998:	b089      	sub	sp, #36	; 0x24
 800999a:	af04      	add	r7, sp, #16
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	461a      	mov	r2, r3
 80099a4:	4603      	mov	r3, r0
 80099a6:	70fb      	strb	r3, [r7, #3]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70bb      	strb	r3, [r7, #2]
 80099ac:	4613      	mov	r3, r2
 80099ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80099be:	787c      	ldrb	r4, [r7, #1]
 80099c0:	78ba      	ldrb	r2, [r7, #2]
 80099c2:	78f9      	ldrb	r1, [r7, #3]
 80099c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099c8:	9303      	str	r3, [sp, #12]
 80099ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80099cc:	9302      	str	r3, [sp, #8]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	4623      	mov	r3, r4
 80099da:	f7f9 ffe9 	bl	80039b0 <HAL_HCD_HC_SubmitRequest>
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f861 	bl	8009aac <USBH_Get_USB_Status>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd90      	pop	{r4, r7, pc}

080099f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a0a:	78fa      	ldrb	r2, [r7, #3]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fa fa6f 	bl	8003ef2 <HAL_HCD_HC_GetURBState>
 8009a14:	4603      	mov	r3, r0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	460b      	mov	r3, r1
 8009a28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d103      	bne.n	8009a3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f864 	bl	8009b04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a3c:	20c8      	movs	r0, #200	; 0xc8
 8009a3e:	f7f8 ffa1 	bl	8002984 <HAL_Delay>
  return USBH_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	212c      	movs	r1, #44	; 0x2c
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	4413      	add	r3, r2
 8009a70:	333b      	adds	r3, #59	; 0x3b
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d009      	beq.n	8009a8c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	212c      	movs	r1, #44	; 0x2c
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	4413      	add	r3, r2
 8009a84:	3354      	adds	r3, #84	; 0x54
 8009a86:	78ba      	ldrb	r2, [r7, #2]
 8009a88:	701a      	strb	r2, [r3, #0]
 8009a8a:	e008      	b.n	8009a9e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	212c      	movs	r1, #44	; 0x2c
 8009a92:	fb01 f303 	mul.w	r3, r1, r3
 8009a96:	4413      	add	r3, r2
 8009a98:	3355      	adds	r3, #85	; 0x55
 8009a9a:	78ba      	ldrb	r2, [r7, #2]
 8009a9c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d817      	bhi.n	8009af0 <USBH_Get_USB_Status+0x44>
 8009ac0:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <USBH_Get_USB_Status+0x1c>)
 8009ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac6:	bf00      	nop
 8009ac8:	08009ad9 	.word	0x08009ad9
 8009acc:	08009adf 	.word	0x08009adf
 8009ad0:	08009ae5 	.word	0x08009ae5
 8009ad4:	08009aeb 	.word	0x08009aeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73fb      	strb	r3, [r7, #15]
    break;
 8009adc:	e00b      	b.n	8009af6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae2:	e008      	b.n	8009af6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae8:	e005      	b.n	8009af6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009aea:	2302      	movs	r3, #2
 8009aec:	73fb      	strb	r3, [r7, #15]
    break;
 8009aee:	e002      	b.n	8009af6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009af0:	2302      	movs	r3, #2
 8009af2:	73fb      	strb	r3, [r7, #15]
    break;
 8009af4:	bf00      	nop
  }
  return usb_status;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	73fb      	strb	r3, [r7, #15]
 8009b1c:	e001      	b.n	8009b22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	461a      	mov	r2, r3
 8009b26:	2101      	movs	r1, #1
 8009b28:	4803      	ldr	r0, [pc, #12]	; (8009b38 <MX_DriverVbusFS+0x34>)
 8009b2a:	f7f9 fde1 	bl	80036f0 <HAL_GPIO_WritePin>
}
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	40020800 	.word	0x40020800

08009b3c <__errno>:
 8009b3c:	4b01      	ldr	r3, [pc, #4]	; (8009b44 <__errno+0x8>)
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	20000038 	.word	0x20000038

08009b48 <__libc_init_array>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	4d0d      	ldr	r5, [pc, #52]	; (8009b80 <__libc_init_array+0x38>)
 8009b4c:	4c0d      	ldr	r4, [pc, #52]	; (8009b84 <__libc_init_array+0x3c>)
 8009b4e:	1b64      	subs	r4, r4, r5
 8009b50:	10a4      	asrs	r4, r4, #2
 8009b52:	2600      	movs	r6, #0
 8009b54:	42a6      	cmp	r6, r4
 8009b56:	d109      	bne.n	8009b6c <__libc_init_array+0x24>
 8009b58:	4d0b      	ldr	r5, [pc, #44]	; (8009b88 <__libc_init_array+0x40>)
 8009b5a:	4c0c      	ldr	r4, [pc, #48]	; (8009b8c <__libc_init_array+0x44>)
 8009b5c:	f000 f954 	bl	8009e08 <_init>
 8009b60:	1b64      	subs	r4, r4, r5
 8009b62:	10a4      	asrs	r4, r4, #2
 8009b64:	2600      	movs	r6, #0
 8009b66:	42a6      	cmp	r6, r4
 8009b68:	d105      	bne.n	8009b76 <__libc_init_array+0x2e>
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b70:	4798      	blx	r3
 8009b72:	3601      	adds	r6, #1
 8009b74:	e7ee      	b.n	8009b54 <__libc_init_array+0xc>
 8009b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7a:	4798      	blx	r3
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	e7f2      	b.n	8009b66 <__libc_init_array+0x1e>
 8009b80:	08009f0c 	.word	0x08009f0c
 8009b84:	08009f0c 	.word	0x08009f0c
 8009b88:	08009f0c 	.word	0x08009f0c
 8009b8c:	08009f10 	.word	0x08009f10

08009b90 <__itoa>:
 8009b90:	1e93      	subs	r3, r2, #2
 8009b92:	2b22      	cmp	r3, #34	; 0x22
 8009b94:	b510      	push	{r4, lr}
 8009b96:	460c      	mov	r4, r1
 8009b98:	d904      	bls.n	8009ba4 <__itoa+0x14>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	700b      	strb	r3, [r1, #0]
 8009b9e:	461c      	mov	r4, r3
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	bd10      	pop	{r4, pc}
 8009ba4:	2a0a      	cmp	r2, #10
 8009ba6:	d109      	bne.n	8009bbc <__itoa+0x2c>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	da07      	bge.n	8009bbc <__itoa+0x2c>
 8009bac:	232d      	movs	r3, #45	; 0x2d
 8009bae:	700b      	strb	r3, [r1, #0]
 8009bb0:	4240      	negs	r0, r0
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	4421      	add	r1, r4
 8009bb6:	f000 f8d7 	bl	8009d68 <__utoa>
 8009bba:	e7f1      	b.n	8009ba0 <__itoa+0x10>
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	e7f9      	b.n	8009bb4 <__itoa+0x24>

08009bc0 <itoa>:
 8009bc0:	f7ff bfe6 	b.w	8009b90 <__itoa>

08009bc4 <malloc>:
 8009bc4:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <malloc+0xc>)
 8009bc6:	4601      	mov	r1, r0
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	f000 b863 	b.w	8009c94 <_malloc_r>
 8009bce:	bf00      	nop
 8009bd0:	20000038 	.word	0x20000038

08009bd4 <free>:
 8009bd4:	4b02      	ldr	r3, [pc, #8]	; (8009be0 <free+0xc>)
 8009bd6:	4601      	mov	r1, r0
 8009bd8:	6818      	ldr	r0, [r3, #0]
 8009bda:	f000 b80b 	b.w	8009bf4 <_free_r>
 8009bde:	bf00      	nop
 8009be0:	20000038 	.word	0x20000038

08009be4 <memset>:
 8009be4:	4402      	add	r2, r0
 8009be6:	4603      	mov	r3, r0
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d100      	bne.n	8009bee <memset+0xa>
 8009bec:	4770      	bx	lr
 8009bee:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf2:	e7f9      	b.n	8009be8 <memset+0x4>

08009bf4 <_free_r>:
 8009bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bf6:	2900      	cmp	r1, #0
 8009bf8:	d048      	beq.n	8009c8c <_free_r+0x98>
 8009bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bfe:	9001      	str	r0, [sp, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f1a1 0404 	sub.w	r4, r1, #4
 8009c06:	bfb8      	it	lt
 8009c08:	18e4      	addlt	r4, r4, r3
 8009c0a:	f000 f8ef 	bl	8009dec <__malloc_lock>
 8009c0e:	4a20      	ldr	r2, [pc, #128]	; (8009c90 <_free_r+0x9c>)
 8009c10:	9801      	ldr	r0, [sp, #4]
 8009c12:	6813      	ldr	r3, [r2, #0]
 8009c14:	4615      	mov	r5, r2
 8009c16:	b933      	cbnz	r3, 8009c26 <_free_r+0x32>
 8009c18:	6063      	str	r3, [r4, #4]
 8009c1a:	6014      	str	r4, [r2, #0]
 8009c1c:	b003      	add	sp, #12
 8009c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c22:	f000 b8e9 	b.w	8009df8 <__malloc_unlock>
 8009c26:	42a3      	cmp	r3, r4
 8009c28:	d90b      	bls.n	8009c42 <_free_r+0x4e>
 8009c2a:	6821      	ldr	r1, [r4, #0]
 8009c2c:	1862      	adds	r2, r4, r1
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	bf04      	itt	eq
 8009c32:	681a      	ldreq	r2, [r3, #0]
 8009c34:	685b      	ldreq	r3, [r3, #4]
 8009c36:	6063      	str	r3, [r4, #4]
 8009c38:	bf04      	itt	eq
 8009c3a:	1852      	addeq	r2, r2, r1
 8009c3c:	6022      	streq	r2, [r4, #0]
 8009c3e:	602c      	str	r4, [r5, #0]
 8009c40:	e7ec      	b.n	8009c1c <_free_r+0x28>
 8009c42:	461a      	mov	r2, r3
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	b10b      	cbz	r3, 8009c4c <_free_r+0x58>
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	d9fa      	bls.n	8009c42 <_free_r+0x4e>
 8009c4c:	6811      	ldr	r1, [r2, #0]
 8009c4e:	1855      	adds	r5, r2, r1
 8009c50:	42a5      	cmp	r5, r4
 8009c52:	d10b      	bne.n	8009c6c <_free_r+0x78>
 8009c54:	6824      	ldr	r4, [r4, #0]
 8009c56:	4421      	add	r1, r4
 8009c58:	1854      	adds	r4, r2, r1
 8009c5a:	42a3      	cmp	r3, r4
 8009c5c:	6011      	str	r1, [r2, #0]
 8009c5e:	d1dd      	bne.n	8009c1c <_free_r+0x28>
 8009c60:	681c      	ldr	r4, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	6053      	str	r3, [r2, #4]
 8009c66:	4421      	add	r1, r4
 8009c68:	6011      	str	r1, [r2, #0]
 8009c6a:	e7d7      	b.n	8009c1c <_free_r+0x28>
 8009c6c:	d902      	bls.n	8009c74 <_free_r+0x80>
 8009c6e:	230c      	movs	r3, #12
 8009c70:	6003      	str	r3, [r0, #0]
 8009c72:	e7d3      	b.n	8009c1c <_free_r+0x28>
 8009c74:	6825      	ldr	r5, [r4, #0]
 8009c76:	1961      	adds	r1, r4, r5
 8009c78:	428b      	cmp	r3, r1
 8009c7a:	bf04      	itt	eq
 8009c7c:	6819      	ldreq	r1, [r3, #0]
 8009c7e:	685b      	ldreq	r3, [r3, #4]
 8009c80:	6063      	str	r3, [r4, #4]
 8009c82:	bf04      	itt	eq
 8009c84:	1949      	addeq	r1, r1, r5
 8009c86:	6021      	streq	r1, [r4, #0]
 8009c88:	6054      	str	r4, [r2, #4]
 8009c8a:	e7c7      	b.n	8009c1c <_free_r+0x28>
 8009c8c:	b003      	add	sp, #12
 8009c8e:	bd30      	pop	{r4, r5, pc}
 8009c90:	200000ec 	.word	0x200000ec

08009c94 <_malloc_r>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	1ccd      	adds	r5, r1, #3
 8009c98:	f025 0503 	bic.w	r5, r5, #3
 8009c9c:	3508      	adds	r5, #8
 8009c9e:	2d0c      	cmp	r5, #12
 8009ca0:	bf38      	it	cc
 8009ca2:	250c      	movcc	r5, #12
 8009ca4:	2d00      	cmp	r5, #0
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	db01      	blt.n	8009cae <_malloc_r+0x1a>
 8009caa:	42a9      	cmp	r1, r5
 8009cac:	d903      	bls.n	8009cb6 <_malloc_r+0x22>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	6033      	str	r3, [r6, #0]
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb6:	f000 f899 	bl	8009dec <__malloc_lock>
 8009cba:	4921      	ldr	r1, [pc, #132]	; (8009d40 <_malloc_r+0xac>)
 8009cbc:	680a      	ldr	r2, [r1, #0]
 8009cbe:	4614      	mov	r4, r2
 8009cc0:	b99c      	cbnz	r4, 8009cea <_malloc_r+0x56>
 8009cc2:	4f20      	ldr	r7, [pc, #128]	; (8009d44 <_malloc_r+0xb0>)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	b923      	cbnz	r3, 8009cd2 <_malloc_r+0x3e>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f000 f83c 	bl	8009d48 <_sbrk_r>
 8009cd0:	6038      	str	r0, [r7, #0]
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f000 f837 	bl	8009d48 <_sbrk_r>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	d123      	bne.n	8009d26 <_malloc_r+0x92>
 8009cde:	230c      	movs	r3, #12
 8009ce0:	6033      	str	r3, [r6, #0]
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f000 f888 	bl	8009df8 <__malloc_unlock>
 8009ce8:	e7e3      	b.n	8009cb2 <_malloc_r+0x1e>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	1b5b      	subs	r3, r3, r5
 8009cee:	d417      	bmi.n	8009d20 <_malloc_r+0x8c>
 8009cf0:	2b0b      	cmp	r3, #11
 8009cf2:	d903      	bls.n	8009cfc <_malloc_r+0x68>
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	441c      	add	r4, r3
 8009cf8:	6025      	str	r5, [r4, #0]
 8009cfa:	e004      	b.n	8009d06 <_malloc_r+0x72>
 8009cfc:	6863      	ldr	r3, [r4, #4]
 8009cfe:	42a2      	cmp	r2, r4
 8009d00:	bf0c      	ite	eq
 8009d02:	600b      	streq	r3, [r1, #0]
 8009d04:	6053      	strne	r3, [r2, #4]
 8009d06:	4630      	mov	r0, r6
 8009d08:	f000 f876 	bl	8009df8 <__malloc_unlock>
 8009d0c:	f104 000b 	add.w	r0, r4, #11
 8009d10:	1d23      	adds	r3, r4, #4
 8009d12:	f020 0007 	bic.w	r0, r0, #7
 8009d16:	1ac2      	subs	r2, r0, r3
 8009d18:	d0cc      	beq.n	8009cb4 <_malloc_r+0x20>
 8009d1a:	1a1b      	subs	r3, r3, r0
 8009d1c:	50a3      	str	r3, [r4, r2]
 8009d1e:	e7c9      	b.n	8009cb4 <_malloc_r+0x20>
 8009d20:	4622      	mov	r2, r4
 8009d22:	6864      	ldr	r4, [r4, #4]
 8009d24:	e7cc      	b.n	8009cc0 <_malloc_r+0x2c>
 8009d26:	1cc4      	adds	r4, r0, #3
 8009d28:	f024 0403 	bic.w	r4, r4, #3
 8009d2c:	42a0      	cmp	r0, r4
 8009d2e:	d0e3      	beq.n	8009cf8 <_malloc_r+0x64>
 8009d30:	1a21      	subs	r1, r4, r0
 8009d32:	4630      	mov	r0, r6
 8009d34:	f000 f808 	bl	8009d48 <_sbrk_r>
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d1dd      	bne.n	8009cf8 <_malloc_r+0x64>
 8009d3c:	e7cf      	b.n	8009cde <_malloc_r+0x4a>
 8009d3e:	bf00      	nop
 8009d40:	200000ec 	.word	0x200000ec
 8009d44:	200000f0 	.word	0x200000f0

08009d48 <_sbrk_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d06      	ldr	r5, [pc, #24]	; (8009d64 <_sbrk_r+0x1c>)
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4604      	mov	r4, r0
 8009d50:	4608      	mov	r0, r1
 8009d52:	602b      	str	r3, [r5, #0]
 8009d54:	f7f8 fd32 	bl	80027bc <_sbrk>
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	d102      	bne.n	8009d62 <_sbrk_r+0x1a>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	b103      	cbz	r3, 8009d62 <_sbrk_r+0x1a>
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	20000a20 	.word	0x20000a20

08009d68 <__utoa>:
 8009d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6a:	4c1f      	ldr	r4, [pc, #124]	; (8009de8 <__utoa+0x80>)
 8009d6c:	b08b      	sub	sp, #44	; 0x2c
 8009d6e:	4605      	mov	r5, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	466e      	mov	r6, sp
 8009d74:	f104 0c20 	add.w	ip, r4, #32
 8009d78:	6820      	ldr	r0, [r4, #0]
 8009d7a:	6861      	ldr	r1, [r4, #4]
 8009d7c:	4637      	mov	r7, r6
 8009d7e:	c703      	stmia	r7!, {r0, r1}
 8009d80:	3408      	adds	r4, #8
 8009d82:	4564      	cmp	r4, ip
 8009d84:	463e      	mov	r6, r7
 8009d86:	d1f7      	bne.n	8009d78 <__utoa+0x10>
 8009d88:	7921      	ldrb	r1, [r4, #4]
 8009d8a:	7139      	strb	r1, [r7, #4]
 8009d8c:	1e91      	subs	r1, r2, #2
 8009d8e:	6820      	ldr	r0, [r4, #0]
 8009d90:	6038      	str	r0, [r7, #0]
 8009d92:	2922      	cmp	r1, #34	; 0x22
 8009d94:	f04f 0100 	mov.w	r1, #0
 8009d98:	d904      	bls.n	8009da4 <__utoa+0x3c>
 8009d9a:	7019      	strb	r1, [r3, #0]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4618      	mov	r0, r3
 8009da0:	b00b      	add	sp, #44	; 0x2c
 8009da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da4:	1e58      	subs	r0, r3, #1
 8009da6:	4684      	mov	ip, r0
 8009da8:	fbb5 f7f2 	udiv	r7, r5, r2
 8009dac:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8009db0:	fb02 5617 	mls	r6, r2, r7, r5
 8009db4:	4476      	add	r6, lr
 8009db6:	460c      	mov	r4, r1
 8009db8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009dbc:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009dc0:	462e      	mov	r6, r5
 8009dc2:	42b2      	cmp	r2, r6
 8009dc4:	f101 0101 	add.w	r1, r1, #1
 8009dc8:	463d      	mov	r5, r7
 8009dca:	d9ed      	bls.n	8009da8 <__utoa+0x40>
 8009dcc:	2200      	movs	r2, #0
 8009dce:	545a      	strb	r2, [r3, r1]
 8009dd0:	1919      	adds	r1, r3, r4
 8009dd2:	1aa5      	subs	r5, r4, r2
 8009dd4:	42aa      	cmp	r2, r5
 8009dd6:	dae2      	bge.n	8009d9e <__utoa+0x36>
 8009dd8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009ddc:	780e      	ldrb	r6, [r1, #0]
 8009dde:	7006      	strb	r6, [r0, #0]
 8009de0:	3201      	adds	r2, #1
 8009de2:	f801 5901 	strb.w	r5, [r1], #-1
 8009de6:	e7f4      	b.n	8009dd2 <__utoa+0x6a>
 8009de8:	08009edc 	.word	0x08009edc

08009dec <__malloc_lock>:
 8009dec:	4801      	ldr	r0, [pc, #4]	; (8009df4 <__malloc_lock+0x8>)
 8009dee:	f000 b809 	b.w	8009e04 <__retarget_lock_acquire_recursive>
 8009df2:	bf00      	nop
 8009df4:	20000a28 	.word	0x20000a28

08009df8 <__malloc_unlock>:
 8009df8:	4801      	ldr	r0, [pc, #4]	; (8009e00 <__malloc_unlock+0x8>)
 8009dfa:	f000 b804 	b.w	8009e06 <__retarget_lock_release_recursive>
 8009dfe:	bf00      	nop
 8009e00:	20000a28 	.word	0x20000a28

08009e04 <__retarget_lock_acquire_recursive>:
 8009e04:	4770      	bx	lr

08009e06 <__retarget_lock_release_recursive>:
 8009e06:	4770      	bx	lr

08009e08 <_init>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr

08009e14 <_fini>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr
